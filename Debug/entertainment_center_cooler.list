
entertainment_center_cooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6f4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  0800a8e0  0800a8e0  0001a8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b06c  0800b06c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b06c  0800b06c  0001b06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b074  0800b074  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b074  0800b074  0001b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b078  0800b078  0001b078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b07c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200001e0  0800b25c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  0800b25c  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016eec  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb3  00000000  00000000  000370f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00039ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  0003ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215cb  00000000  00000000  0003bae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bd0  00000000  00000000  0005d0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8a18  00000000  00000000  0006fc7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00128693  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a4c  00000000  00000000  001286e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a8c4 	.word	0x0800a8c4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	0800a8c4 	.word	0x0800a8c4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_uldivmod>:
 80011e8:	b953      	cbnz	r3, 8001200 <__aeabi_uldivmod+0x18>
 80011ea:	b94a      	cbnz	r2, 8001200 <__aeabi_uldivmod+0x18>
 80011ec:	2900      	cmp	r1, #0
 80011ee:	bf08      	it	eq
 80011f0:	2800      	cmpeq	r0, #0
 80011f2:	bf1c      	itt	ne
 80011f4:	f04f 31ff 	movne.w	r1, #4294967295
 80011f8:	f04f 30ff 	movne.w	r0, #4294967295
 80011fc:	f000 b9a6 	b.w	800154c <__aeabi_idiv0>
 8001200:	f1ad 0c08 	sub.w	ip, sp, #8
 8001204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001208:	f000 f83e 	bl	8001288 <__udivmoddi4>
 800120c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001214:	b004      	add	sp, #16
 8001216:	4770      	bx	lr

08001218 <__aeabi_d2lz>:
 8001218:	b538      	push	{r3, r4, r5, lr}
 800121a:	460c      	mov	r4, r1
 800121c:	4605      	mov	r5, r0
 800121e:	4621      	mov	r1, r4
 8001220:	4628      	mov	r0, r5
 8001222:	2200      	movs	r2, #0
 8001224:	2300      	movs	r3, #0
 8001226:	f7ff fc35 	bl	8000a94 <__aeabi_dcmplt>
 800122a:	b928      	cbnz	r0, 8001238 <__aeabi_d2lz+0x20>
 800122c:	4628      	mov	r0, r5
 800122e:	4621      	mov	r1, r4
 8001230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001234:	f000 b80a 	b.w	800124c <__aeabi_d2ulz>
 8001238:	4628      	mov	r0, r5
 800123a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800123e:	f000 f805 	bl	800124c <__aeabi_d2ulz>
 8001242:	4240      	negs	r0, r0
 8001244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001248:	bd38      	pop	{r3, r4, r5, pc}
 800124a:	bf00      	nop

0800124c <__aeabi_d2ulz>:
 800124c:	b5d0      	push	{r4, r6, r7, lr}
 800124e:	2200      	movs	r2, #0
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <__aeabi_d2ulz+0x34>)
 8001252:	4606      	mov	r6, r0
 8001254:	460f      	mov	r7, r1
 8001256:	f7ff f9ab 	bl	80005b0 <__aeabi_dmul>
 800125a:	f7ff fc81 	bl	8000b60 <__aeabi_d2uiz>
 800125e:	4604      	mov	r4, r0
 8001260:	f7ff f92c 	bl	80004bc <__aeabi_ui2d>
 8001264:	2200      	movs	r2, #0
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <__aeabi_d2ulz+0x38>)
 8001268:	f7ff f9a2 	bl	80005b0 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4630      	mov	r0, r6
 8001272:	4639      	mov	r1, r7
 8001274:	f7fe ffe4 	bl	8000240 <__aeabi_dsub>
 8001278:	f7ff fc72 	bl	8000b60 <__aeabi_d2uiz>
 800127c:	4621      	mov	r1, r4
 800127e:	bdd0      	pop	{r4, r6, r7, pc}
 8001280:	3df00000 	.word	0x3df00000
 8001284:	41f00000 	.word	0x41f00000

08001288 <__udivmoddi4>:
 8001288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800128c:	9e08      	ldr	r6, [sp, #32]
 800128e:	460d      	mov	r5, r1
 8001290:	4604      	mov	r4, r0
 8001292:	468e      	mov	lr, r1
 8001294:	2b00      	cmp	r3, #0
 8001296:	f040 8083 	bne.w	80013a0 <__udivmoddi4+0x118>
 800129a:	428a      	cmp	r2, r1
 800129c:	4617      	mov	r7, r2
 800129e:	d947      	bls.n	8001330 <__udivmoddi4+0xa8>
 80012a0:	fab2 f382 	clz	r3, r2
 80012a4:	b14b      	cbz	r3, 80012ba <__udivmoddi4+0x32>
 80012a6:	f1c3 0120 	rsb	r1, r3, #32
 80012aa:	fa05 fe03 	lsl.w	lr, r5, r3
 80012ae:	fa20 f101 	lsr.w	r1, r0, r1
 80012b2:	409f      	lsls	r7, r3
 80012b4:	ea41 0e0e 	orr.w	lr, r1, lr
 80012b8:	409c      	lsls	r4, r3
 80012ba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80012be:	fbbe fcf8 	udiv	ip, lr, r8
 80012c2:	fa1f f987 	uxth.w	r9, r7
 80012c6:	fb08 e21c 	mls	r2, r8, ip, lr
 80012ca:	fb0c f009 	mul.w	r0, ip, r9
 80012ce:	0c21      	lsrs	r1, r4, #16
 80012d0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80012d4:	4290      	cmp	r0, r2
 80012d6:	d90a      	bls.n	80012ee <__udivmoddi4+0x66>
 80012d8:	18ba      	adds	r2, r7, r2
 80012da:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012de:	f080 8118 	bcs.w	8001512 <__udivmoddi4+0x28a>
 80012e2:	4290      	cmp	r0, r2
 80012e4:	f240 8115 	bls.w	8001512 <__udivmoddi4+0x28a>
 80012e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80012ec:	443a      	add	r2, r7
 80012ee:	1a12      	subs	r2, r2, r0
 80012f0:	fbb2 f0f8 	udiv	r0, r2, r8
 80012f4:	fb08 2210 	mls	r2, r8, r0, r2
 80012f8:	fb00 f109 	mul.w	r1, r0, r9
 80012fc:	b2a4      	uxth	r4, r4
 80012fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001302:	42a1      	cmp	r1, r4
 8001304:	d909      	bls.n	800131a <__udivmoddi4+0x92>
 8001306:	193c      	adds	r4, r7, r4
 8001308:	f100 32ff 	add.w	r2, r0, #4294967295
 800130c:	f080 8103 	bcs.w	8001516 <__udivmoddi4+0x28e>
 8001310:	42a1      	cmp	r1, r4
 8001312:	f240 8100 	bls.w	8001516 <__udivmoddi4+0x28e>
 8001316:	3802      	subs	r0, #2
 8001318:	443c      	add	r4, r7
 800131a:	1a64      	subs	r4, r4, r1
 800131c:	2100      	movs	r1, #0
 800131e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001322:	b11e      	cbz	r6, 800132c <__udivmoddi4+0xa4>
 8001324:	2200      	movs	r2, #0
 8001326:	40dc      	lsrs	r4, r3
 8001328:	e9c6 4200 	strd	r4, r2, [r6]
 800132c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001330:	b902      	cbnz	r2, 8001334 <__udivmoddi4+0xac>
 8001332:	deff      	udf	#255	; 0xff
 8001334:	fab2 f382 	clz	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d14f      	bne.n	80013dc <__udivmoddi4+0x154>
 800133c:	1a8d      	subs	r5, r1, r2
 800133e:	2101      	movs	r1, #1
 8001340:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001344:	fa1f f882 	uxth.w	r8, r2
 8001348:	fbb5 fcfe 	udiv	ip, r5, lr
 800134c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001350:	fb08 f00c 	mul.w	r0, r8, ip
 8001354:	0c22      	lsrs	r2, r4, #16
 8001356:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800135a:	42a8      	cmp	r0, r5
 800135c:	d907      	bls.n	800136e <__udivmoddi4+0xe6>
 800135e:	197d      	adds	r5, r7, r5
 8001360:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001364:	d202      	bcs.n	800136c <__udivmoddi4+0xe4>
 8001366:	42a8      	cmp	r0, r5
 8001368:	f200 80e9 	bhi.w	800153e <__udivmoddi4+0x2b6>
 800136c:	4694      	mov	ip, r2
 800136e:	1a2d      	subs	r5, r5, r0
 8001370:	fbb5 f0fe 	udiv	r0, r5, lr
 8001374:	fb0e 5510 	mls	r5, lr, r0, r5
 8001378:	fb08 f800 	mul.w	r8, r8, r0
 800137c:	b2a4      	uxth	r4, r4
 800137e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001382:	45a0      	cmp	r8, r4
 8001384:	d907      	bls.n	8001396 <__udivmoddi4+0x10e>
 8001386:	193c      	adds	r4, r7, r4
 8001388:	f100 32ff 	add.w	r2, r0, #4294967295
 800138c:	d202      	bcs.n	8001394 <__udivmoddi4+0x10c>
 800138e:	45a0      	cmp	r8, r4
 8001390:	f200 80d9 	bhi.w	8001546 <__udivmoddi4+0x2be>
 8001394:	4610      	mov	r0, r2
 8001396:	eba4 0408 	sub.w	r4, r4, r8
 800139a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800139e:	e7c0      	b.n	8001322 <__udivmoddi4+0x9a>
 80013a0:	428b      	cmp	r3, r1
 80013a2:	d908      	bls.n	80013b6 <__udivmoddi4+0x12e>
 80013a4:	2e00      	cmp	r6, #0
 80013a6:	f000 80b1 	beq.w	800150c <__udivmoddi4+0x284>
 80013aa:	2100      	movs	r1, #0
 80013ac:	e9c6 0500 	strd	r0, r5, [r6]
 80013b0:	4608      	mov	r0, r1
 80013b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013b6:	fab3 f183 	clz	r1, r3
 80013ba:	2900      	cmp	r1, #0
 80013bc:	d14b      	bne.n	8001456 <__udivmoddi4+0x1ce>
 80013be:	42ab      	cmp	r3, r5
 80013c0:	d302      	bcc.n	80013c8 <__udivmoddi4+0x140>
 80013c2:	4282      	cmp	r2, r0
 80013c4:	f200 80b9 	bhi.w	800153a <__udivmoddi4+0x2b2>
 80013c8:	1a84      	subs	r4, r0, r2
 80013ca:	eb65 0303 	sbc.w	r3, r5, r3
 80013ce:	2001      	movs	r0, #1
 80013d0:	469e      	mov	lr, r3
 80013d2:	2e00      	cmp	r6, #0
 80013d4:	d0aa      	beq.n	800132c <__udivmoddi4+0xa4>
 80013d6:	e9c6 4e00 	strd	r4, lr, [r6]
 80013da:	e7a7      	b.n	800132c <__udivmoddi4+0xa4>
 80013dc:	409f      	lsls	r7, r3
 80013de:	f1c3 0220 	rsb	r2, r3, #32
 80013e2:	40d1      	lsrs	r1, r2
 80013e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80013ec:	fa1f f887 	uxth.w	r8, r7
 80013f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80013f4:	fa24 f202 	lsr.w	r2, r4, r2
 80013f8:	409d      	lsls	r5, r3
 80013fa:	fb00 fc08 	mul.w	ip, r0, r8
 80013fe:	432a      	orrs	r2, r5
 8001400:	0c15      	lsrs	r5, r2, #16
 8001402:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001406:	45ac      	cmp	ip, r5
 8001408:	fa04 f403 	lsl.w	r4, r4, r3
 800140c:	d909      	bls.n	8001422 <__udivmoddi4+0x19a>
 800140e:	197d      	adds	r5, r7, r5
 8001410:	f100 31ff 	add.w	r1, r0, #4294967295
 8001414:	f080 808f 	bcs.w	8001536 <__udivmoddi4+0x2ae>
 8001418:	45ac      	cmp	ip, r5
 800141a:	f240 808c 	bls.w	8001536 <__udivmoddi4+0x2ae>
 800141e:	3802      	subs	r0, #2
 8001420:	443d      	add	r5, r7
 8001422:	eba5 050c 	sub.w	r5, r5, ip
 8001426:	fbb5 f1fe 	udiv	r1, r5, lr
 800142a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800142e:	fb01 f908 	mul.w	r9, r1, r8
 8001432:	b295      	uxth	r5, r2
 8001434:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001438:	45a9      	cmp	r9, r5
 800143a:	d907      	bls.n	800144c <__udivmoddi4+0x1c4>
 800143c:	197d      	adds	r5, r7, r5
 800143e:	f101 32ff 	add.w	r2, r1, #4294967295
 8001442:	d274      	bcs.n	800152e <__udivmoddi4+0x2a6>
 8001444:	45a9      	cmp	r9, r5
 8001446:	d972      	bls.n	800152e <__udivmoddi4+0x2a6>
 8001448:	3902      	subs	r1, #2
 800144a:	443d      	add	r5, r7
 800144c:	eba5 0509 	sub.w	r5, r5, r9
 8001450:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001454:	e778      	b.n	8001348 <__udivmoddi4+0xc0>
 8001456:	f1c1 0720 	rsb	r7, r1, #32
 800145a:	408b      	lsls	r3, r1
 800145c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001460:	ea4c 0c03 	orr.w	ip, ip, r3
 8001464:	fa25 f407 	lsr.w	r4, r5, r7
 8001468:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800146c:	fbb4 f9fe 	udiv	r9, r4, lr
 8001470:	fa1f f88c 	uxth.w	r8, ip
 8001474:	fb0e 4419 	mls	r4, lr, r9, r4
 8001478:	fa20 f307 	lsr.w	r3, r0, r7
 800147c:	fb09 fa08 	mul.w	sl, r9, r8
 8001480:	408d      	lsls	r5, r1
 8001482:	431d      	orrs	r5, r3
 8001484:	0c2b      	lsrs	r3, r5, #16
 8001486:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800148a:	45a2      	cmp	sl, r4
 800148c:	fa02 f201 	lsl.w	r2, r2, r1
 8001490:	fa00 f301 	lsl.w	r3, r0, r1
 8001494:	d909      	bls.n	80014aa <__udivmoddi4+0x222>
 8001496:	eb1c 0404 	adds.w	r4, ip, r4
 800149a:	f109 30ff 	add.w	r0, r9, #4294967295
 800149e:	d248      	bcs.n	8001532 <__udivmoddi4+0x2aa>
 80014a0:	45a2      	cmp	sl, r4
 80014a2:	d946      	bls.n	8001532 <__udivmoddi4+0x2aa>
 80014a4:	f1a9 0902 	sub.w	r9, r9, #2
 80014a8:	4464      	add	r4, ip
 80014aa:	eba4 040a 	sub.w	r4, r4, sl
 80014ae:	fbb4 f0fe 	udiv	r0, r4, lr
 80014b2:	fb0e 4410 	mls	r4, lr, r0, r4
 80014b6:	fb00 fa08 	mul.w	sl, r0, r8
 80014ba:	b2ad      	uxth	r5, r5
 80014bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80014c0:	45a2      	cmp	sl, r4
 80014c2:	d908      	bls.n	80014d6 <__udivmoddi4+0x24e>
 80014c4:	eb1c 0404 	adds.w	r4, ip, r4
 80014c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80014cc:	d22d      	bcs.n	800152a <__udivmoddi4+0x2a2>
 80014ce:	45a2      	cmp	sl, r4
 80014d0:	d92b      	bls.n	800152a <__udivmoddi4+0x2a2>
 80014d2:	3802      	subs	r0, #2
 80014d4:	4464      	add	r4, ip
 80014d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014da:	fba0 8902 	umull	r8, r9, r0, r2
 80014de:	eba4 040a 	sub.w	r4, r4, sl
 80014e2:	454c      	cmp	r4, r9
 80014e4:	46c6      	mov	lr, r8
 80014e6:	464d      	mov	r5, r9
 80014e8:	d319      	bcc.n	800151e <__udivmoddi4+0x296>
 80014ea:	d016      	beq.n	800151a <__udivmoddi4+0x292>
 80014ec:	b15e      	cbz	r6, 8001506 <__udivmoddi4+0x27e>
 80014ee:	ebb3 020e 	subs.w	r2, r3, lr
 80014f2:	eb64 0405 	sbc.w	r4, r4, r5
 80014f6:	fa04 f707 	lsl.w	r7, r4, r7
 80014fa:	fa22 f301 	lsr.w	r3, r2, r1
 80014fe:	431f      	orrs	r7, r3
 8001500:	40cc      	lsrs	r4, r1
 8001502:	e9c6 7400 	strd	r7, r4, [r6]
 8001506:	2100      	movs	r1, #0
 8001508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800150c:	4631      	mov	r1, r6
 800150e:	4630      	mov	r0, r6
 8001510:	e70c      	b.n	800132c <__udivmoddi4+0xa4>
 8001512:	468c      	mov	ip, r1
 8001514:	e6eb      	b.n	80012ee <__udivmoddi4+0x66>
 8001516:	4610      	mov	r0, r2
 8001518:	e6ff      	b.n	800131a <__udivmoddi4+0x92>
 800151a:	4543      	cmp	r3, r8
 800151c:	d2e6      	bcs.n	80014ec <__udivmoddi4+0x264>
 800151e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001522:	eb69 050c 	sbc.w	r5, r9, ip
 8001526:	3801      	subs	r0, #1
 8001528:	e7e0      	b.n	80014ec <__udivmoddi4+0x264>
 800152a:	4628      	mov	r0, r5
 800152c:	e7d3      	b.n	80014d6 <__udivmoddi4+0x24e>
 800152e:	4611      	mov	r1, r2
 8001530:	e78c      	b.n	800144c <__udivmoddi4+0x1c4>
 8001532:	4681      	mov	r9, r0
 8001534:	e7b9      	b.n	80014aa <__udivmoddi4+0x222>
 8001536:	4608      	mov	r0, r1
 8001538:	e773      	b.n	8001422 <__udivmoddi4+0x19a>
 800153a:	4608      	mov	r0, r1
 800153c:	e749      	b.n	80013d2 <__udivmoddi4+0x14a>
 800153e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001542:	443d      	add	r5, r7
 8001544:	e713      	b.n	800136e <__udivmoddi4+0xe6>
 8001546:	3802      	subs	r0, #2
 8001548:	443c      	add	r4, r7
 800154a:	e724      	b.n	8001396 <__udivmoddi4+0x10e>

0800154c <__aeabi_idiv0>:
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop

08001550 <get_uint8>:

struct UARTMembers uart;
struct TEMPMembers temp;


uint8_t get_uint8 ( void ) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
    int number      = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
    uint8_t timeout     = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	71fb      	strb	r3, [r7, #7]

    reset_rx_buffer();
 800155e:	f001 f977 	bl	8002850 <reset_rx_buffer>
    
    uart.rxchar = '\0';
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <get_uint8+0x7c>)
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while(uart.rxchar == '\0'){}                   // Wait for keyboard input 
 800156a:	bf00      	nop
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <get_uint8+0x7c>)
 800156e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0fa      	beq.n	800156c <get_uint8+0x1c>
    
    while (timeout < 20) {
 8001576:	e00b      	b.n	8001590 <get_uint8+0x40>
        if(uart.rxchar == ENTER_KEY) break;
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <get_uint8+0x7c>)
 800157a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800157e:	2b0d      	cmp	r3, #13
 8001580:	d00a      	beq.n	8001598 <get_uint8+0x48>

        blocking_ms_delay(1000);
 8001582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001586:	f000 ffe5 	bl	8002554 <blocking_ms_delay>
        timeout++;
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	3301      	adds	r3, #1
 800158e:	71fb      	strb	r3, [r7, #7]
    while (timeout < 20) {
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b13      	cmp	r3, #19
 8001594:	d9f0      	bls.n	8001578 <get_uint8+0x28>
 8001596:	e000      	b.n	800159a <get_uint8+0x4a>
        if(uart.rxchar == ENTER_KEY) break;
 8001598:	bf00      	nop
    }

    sscanf(uart.rxbuf,"%d",&number);
 800159a:	463b      	mov	r3, r7
 800159c:	461a      	mov	r2, r3
 800159e:	490c      	ldr	r1, [pc, #48]	; (80015d0 <get_uint8+0x80>)
 80015a0:	480a      	ldr	r0, [pc, #40]	; (80015cc <get_uint8+0x7c>)
 80015a2:	f004 ffe3 	bl	800656c <siscanf>

    print_string("Number Received: ",0);
 80015a6:	2100      	movs	r1, #0
 80015a8:	480a      	ldr	r0, [pc, #40]	; (80015d4 <get_uint8+0x84>)
 80015aa:	f001 f891 	bl	80026d0 <print_string>
    print_unsigned_decimal(number, LF);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	2101      	movs	r1, #1
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 f839 	bl	800262c <print_unsigned_decimal>

    reset_rx_buffer();
 80015ba:	f001 f949 	bl	8002850 <reset_rx_buffer>
    return(number);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2db      	uxtb	r3, r3
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000234 	.word	0x20000234
 80015d0:	0800a8e0 	.word	0x0800a8e0
 80015d4:	0800a8e4 	.word	0x0800a8e4

080015d8 <console_menu>:
    return(number);

}

void console_menu( void ) 
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
     * used for the main application.  reset_rx_buffer() is called
     * in main.c just prior to entering this routine. 
     * 
     */

	uint8_t     usr_number_u8       = 0;        // Number user has entered will be stored here
 80015de:	2300      	movs	r3, #0
 80015e0:	71fb      	strb	r3, [r7, #7]
    // float       temp_float          = 0.0;
    
    uart.rxchar = '\0';                  
 80015e2:	4b91      	ldr	r3, [pc, #580]	; (8001828 <console_menu+0x250>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    reset_terminal();                            // Clear all the contents on the terminal
 80015ea:	f001 f8e3 	bl	80027b4 <reset_terminal>

    
    blocking_ms_delay(10);
 80015ee:	200a      	movs	r0, #10
 80015f0:	f000 ffb0 	bl	8002554 <blocking_ms_delay>
    cursor_top_left();
 80015f4:	f001 f8c6 	bl	8002784 <cursor_top_left>
    blocking_ms_delay(10);
 80015f8:	200a      	movs	r0, #10
 80015fa:	f000 ffab 	bl	8002554 <blocking_ms_delay>

    while(usr_number_u8 != 99) 
 80015fe:	e106      	b.n	800180e <console_menu+0x236>
    {
        print_string("1 --- View HW version.",LF);
 8001600:	2101      	movs	r1, #1
 8001602:	488a      	ldr	r0, [pc, #552]	; (800182c <console_menu+0x254>)
 8001604:	f001 f864 	bl	80026d0 <print_string>
        print_string("2 --- View SW version.",LF);
 8001608:	2101      	movs	r1, #1
 800160a:	4889      	ldr	r0, [pc, #548]	; (8001830 <console_menu+0x258>)
 800160c:	f001 f860 	bl	80026d0 <print_string>
        print_string("3 --- Report temperature values.",LF);
 8001610:	2101      	movs	r1, #1
 8001612:	4888      	ldr	r0, [pc, #544]	; (8001834 <console_menu+0x25c>)
 8001614:	f001 f85c 	bl	80026d0 <print_string>
        print_string("       press \'x\' to quit.",LF);
 8001618:	2101      	movs	r1, #1
 800161a:	4887      	ldr	r0, [pc, #540]	; (8001838 <console_menu+0x260>)
 800161c:	f001 f858 	bl	80026d0 <print_string>
        print_string("4 --- View temperature trip point.",LF);
 8001620:	2101      	movs	r1, #1
 8001622:	4886      	ldr	r0, [pc, #536]	; (800183c <console_menu+0x264>)
 8001624:	f001 f854 	bl	80026d0 <print_string>
        print_string("5 --- Enable fan.",LF);
 8001628:	2101      	movs	r1, #1
 800162a:	4885      	ldr	r0, [pc, #532]	; (8001840 <console_menu+0x268>)
 800162c:	f001 f850 	bl	80026d0 <print_string>
        print_string("6 --- Disable the fan.",LF);
 8001630:	2101      	movs	r1, #1
 8001632:	4884      	ldr	r0, [pc, #528]	; (8001844 <console_menu+0x26c>)
 8001634:	f001 f84c 	bl	80026d0 <print_string>
        
        print_string("99 -- Exit menu.",LF);  
 8001638:	2101      	movs	r1, #1
 800163a:	4883      	ldr	r0, [pc, #524]	; (8001848 <console_menu+0x270>)
 800163c:	f001 f848 	bl	80026d0 <print_string>
        insert_line_feed(2);
 8001640:	2002      	movs	r0, #2
 8001642:	f001 f8cf 	bl	80027e4 <insert_line_feed>
        
        print_string("Enter Selection:  ",0);
 8001646:	2100      	movs	r1, #0
 8001648:	4880      	ldr	r0, [pc, #512]	; (800184c <console_menu+0x274>)
 800164a:	f001 f841 	bl	80026d0 <print_string>
        usr_number_u8 = get_uint8();
 800164e:	f7ff ff7f 	bl	8001550 <get_uint8>
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]

       
        switch(usr_number_u8) 
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b06      	cmp	r3, #6
 800165a:	dc15      	bgt.n	8001688 <console_menu+0xb0>
 800165c:	2b00      	cmp	r3, #0
 800165e:	f340 80d4 	ble.w	800180a <console_menu+0x232>
 8001662:	3b01      	subs	r3, #1
 8001664:	2b05      	cmp	r3, #5
 8001666:	f200 80d0 	bhi.w	800180a <console_menu+0x232>
 800166a:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <console_menu+0x98>)
 800166c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001670:	08001691 	.word	0x08001691
 8001674:	080016ef 	.word	0x080016ef
 8001678:	0800170d 	.word	0x0800170d
 800167c:	0800177f 	.word	0x0800177f
 8001680:	080017b1 	.word	0x080017b1
 8001684:	080017d1 	.word	0x080017d1
 8001688:	2b63      	cmp	r3, #99	; 0x63
 800168a:	f000 80b1 	beq.w	80017f0 <console_menu+0x218>
 800168e:	e0bc      	b.n	800180a <console_menu+0x232>
            /**
             * View HW version
             */
            case 1:
            {
                uint8_t version = 0;    
 8001690:	2300      	movs	r3, #0
 8001692:	717b      	strb	r3, [r7, #5]
                clear_screen();
 8001694:	f001 f85e 	bl	8002754 <clear_screen>
                cursor_top_left();
 8001698:	f001 f874 	bl	8002784 <cursor_top_left>
                insert_line_separator();
 800169c:	f001 f8ce 	bl	800283c <insert_line_separator>
                
                version = (HAL_GPIO_ReadPin(ID_B2_GPIO_Port, ID_B2_Pin) << 2) |
 80016a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016a4:	486a      	ldr	r0, [pc, #424]	; (8001850 <console_menu+0x278>)
 80016a6:	f001 fd49 	bl	800313c <HAL_GPIO_ReadPin>
 80016aa:	4603      	mov	r3, r0
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	b25c      	sxtb	r4, r3
                (HAL_GPIO_ReadPin(ID_B0_GPIO_Port, ID_B0_Pin) << 1) |
 80016b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b4:	4866      	ldr	r0, [pc, #408]	; (8001850 <console_menu+0x278>)
 80016b6:	f001 fd41 	bl	800313c <HAL_GPIO_ReadPin>
 80016ba:	4603      	mov	r3, r0
 80016bc:	005b      	lsls	r3, r3, #1
                version = (HAL_GPIO_ReadPin(ID_B2_GPIO_Port, ID_B2_Pin) << 2) |
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	4323      	orrs	r3, r4
 80016c2:	b25c      	sxtb	r4, r3
                HAL_GPIO_ReadPin(ID_B0_GPIO_Port, ID_B0_Pin);
 80016c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c8:	4861      	ldr	r0, [pc, #388]	; (8001850 <console_menu+0x278>)
 80016ca:	f001 fd37 	bl	800313c <HAL_GPIO_ReadPin>
 80016ce:	4603      	mov	r3, r0
 80016d0:	b25b      	sxtb	r3, r3
                (HAL_GPIO_ReadPin(ID_B0_GPIO_Port, ID_B0_Pin) << 1) |
 80016d2:	4323      	orrs	r3, r4
 80016d4:	b25b      	sxtb	r3, r3
                version = (HAL_GPIO_ReadPin(ID_B2_GPIO_Port, ID_B2_Pin) << 2) |
 80016d6:	717b      	strb	r3, [r7, #5]
                
                
                print_string("HW vrsion: ", 0);
 80016d8:	2100      	movs	r1, #0
 80016da:	485e      	ldr	r0, [pc, #376]	; (8001854 <console_menu+0x27c>)
 80016dc:	f000 fff8 	bl	80026d0 <print_string>
                print_unsigned_decimal(version, LF);
 80016e0:	797b      	ldrb	r3, [r7, #5]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	2101      	movs	r1, #1
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 ffa0 	bl	800262c <print_unsigned_decimal>
                break;
 80016ec:	e08f      	b.n	800180e <console_menu+0x236>
            
            /**
             * View SW version
             */
            case 2:
                clear_screen();
 80016ee:	f001 f831 	bl	8002754 <clear_screen>
                cursor_top_left();
 80016f2:	f001 f847 	bl	8002784 <cursor_top_left>
                insert_line_separator();
 80016f6:	f001 f8a1 	bl	800283c <insert_line_separator>
                
                print_string("SW version",0);
 80016fa:	2100      	movs	r1, #0
 80016fc:	4856      	ldr	r0, [pc, #344]	; (8001858 <console_menu+0x280>)
 80016fe:	f000 ffe7 	bl	80026d0 <print_string>
                print_string(SW_VERSION,LF);
 8001702:	2101      	movs	r1, #1
 8001704:	4855      	ldr	r0, [pc, #340]	; (800185c <console_menu+0x284>)
 8001706:	f000 ffe3 	bl	80026d0 <print_string>
            break;
 800170a:	e080      	b.n	800180e <console_menu+0x236>
            
            /**
             * Report temperature values
             */
            case 3:
                clear_screen();
 800170c:	f001 f822 	bl	8002754 <clear_screen>
                cursor_top_left();
 8001710:	f001 f838 	bl	8002784 <cursor_top_left>
                insert_line_separator();
 8001714:	f001 f892 	bl	800283c <insert_line_separator>
                
                
                uart.rxchar = '\0';
 8001718:	4b43      	ldr	r3, [pc, #268]	; (8001828 <console_menu+0x250>)
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                while (uart.rxchar != 'x')
 8001720:	e023      	b.n	800176a <console_menu+0x192>
                {
                    uint8_t i=0;
 8001722:	2300      	movs	r3, #0
 8001724:	71bb      	strb	r3, [r7, #6]

                    if (get_temperature_reading () == false) {
 8001726:	f000 fbff 	bl	8001f28 <get_temperature_reading>
 800172a:	4603      	mov	r3, r0
 800172c:	f083 0301 	eor.w	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <console_menu+0x166>
                        print_string("Error retrieving temp value", LF);
 8001736:	2101      	movs	r1, #1
 8001738:	4849      	ldr	r0, [pc, #292]	; (8001860 <console_menu+0x288>)
 800173a:	f000 ffc9 	bl	80026d0 <print_string>
                    }

                    print_string("Temp value: ", 0);
 800173e:	2100      	movs	r1, #0
 8001740:	4848      	ldr	r0, [pc, #288]	; (8001864 <console_menu+0x28c>)
 8001742:	f000 ffc5 	bl	80026d0 <print_string>
                    print_float(temp.flt_temp_value, LF);
 8001746:	4b48      	ldr	r3, [pc, #288]	; (8001868 <console_menu+0x290>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2101      	movs	r1, #1
 800174c:	4618      	mov	r0, r3
 800174e:	f000 ff21 	bl	8002594 <print_float>
                    
                    for(i=0;i<10;i++)
 8001752:	2300      	movs	r3, #0
 8001754:	71bb      	strb	r3, [r7, #6]
 8001756:	e005      	b.n	8001764 <console_menu+0x18c>
                    {
                        blocking_ms_delay(50);          //Max is 65535us
 8001758:	2032      	movs	r0, #50	; 0x32
 800175a:	f000 fefb 	bl	8002554 <blocking_ms_delay>
                    for(i=0;i<10;i++)
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	3301      	adds	r3, #1
 8001762:	71bb      	strb	r3, [r7, #6]
 8001764:	79bb      	ldrb	r3, [r7, #6]
 8001766:	2b09      	cmp	r3, #9
 8001768:	d9f6      	bls.n	8001758 <console_menu+0x180>
                while (uart.rxchar != 'x')
 800176a:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <console_menu+0x250>)
 800176c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001770:	2b78      	cmp	r3, #120	; 0x78
 8001772:	d1d6      	bne.n	8001722 <console_menu+0x14a>
                    }

                }
                clear_screen();
 8001774:	f000 ffee 	bl	8002754 <clear_screen>
                cursor_top_left();
 8001778:	f001 f804 	bl	8002784 <cursor_top_left>
            break;
 800177c:	e047      	b.n	800180e <console_menu+0x236>
            
            /**
             * View temperature trip point
             */
            case 4:
                clear_screen();
 800177e:	f000 ffe9 	bl	8002754 <clear_screen>
                cursor_top_left();
 8001782:	f000 ffff 	bl	8002784 <cursor_top_left>
                insert_line_separator();
 8001786:	f001 f859 	bl	800283c <insert_line_separator>
                
                print_string("Temperature rising trip point: ",0);
 800178a:	2100      	movs	r1, #0
 800178c:	4837      	ldr	r0, [pc, #220]	; (800186c <console_menu+0x294>)
 800178e:	f000 ff9f 	bl	80026d0 <print_string>
                print_unsigned_decimal(TEMP_TRIP_F_RISING,LF);
 8001792:	2101      	movs	r1, #1
 8001794:	205a      	movs	r0, #90	; 0x5a
 8001796:	f000 ff49 	bl	800262c <print_unsigned_decimal>
                insert_line_separator();
 800179a:	f001 f84f 	bl	800283c <insert_line_separator>
                print_string("Temperature falling trip point: ",0);
 800179e:	2100      	movs	r1, #0
 80017a0:	4833      	ldr	r0, [pc, #204]	; (8001870 <console_menu+0x298>)
 80017a2:	f000 ff95 	bl	80026d0 <print_string>
                print_unsigned_decimal(TEMP_TRIP_F_FALLING,LF);
 80017a6:	2101      	movs	r1, #1
 80017a8:	2057      	movs	r0, #87	; 0x57
 80017aa:	f000 ff3f 	bl	800262c <print_unsigned_decimal>
            break;
 80017ae:	e02e      	b.n	800180e <console_menu+0x236>
            
            /**
             * Enable the fan
             */
            case 5:
                clear_screen();
 80017b0:	f000 ffd0 	bl	8002754 <clear_screen>
                cursor_top_left();
 80017b4:	f000 ffe6 	bl	8002784 <cursor_top_left>
                insert_line_separator();
 80017b8:	f001 f840 	bl	800283c <insert_line_separator>
                print_string("Enabling the fan",LF);
 80017bc:	2101      	movs	r1, #1
 80017be:	482d      	ldr	r0, [pc, #180]	; (8001874 <console_menu+0x29c>)
 80017c0:	f000 ff86 	bl	80026d0 <print_string>

                HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	2140      	movs	r1, #64	; 0x40
 80017c8:	4821      	ldr	r0, [pc, #132]	; (8001850 <console_menu+0x278>)
 80017ca:	f001 fcce 	bl	800316a <HAL_GPIO_WritePin>
            break;
 80017ce:	e01e      	b.n	800180e <console_menu+0x236>
                
            /**
             * Disable the fan
             */
            case 6:
                clear_screen();
 80017d0:	f000 ffc0 	bl	8002754 <clear_screen>
                cursor_top_left();
 80017d4:	f000 ffd6 	bl	8002784 <cursor_top_left>
                insert_line_separator();
 80017d8:	f001 f830 	bl	800283c <insert_line_separator>
                print_string("Disabling the fan",LF);
 80017dc:	2101      	movs	r1, #1
 80017de:	4826      	ldr	r0, [pc, #152]	; (8001878 <console_menu+0x2a0>)
 80017e0:	f000 ff76 	bl	80026d0 <print_string>
                
                HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2140      	movs	r1, #64	; 0x40
 80017e8:	4819      	ldr	r0, [pc, #100]	; (8001850 <console_menu+0x278>)
 80017ea:	f001 fcbe 	bl	800316a <HAL_GPIO_WritePin>
            break;
 80017ee:	e00e      	b.n	800180e <console_menu+0x236>

            case 99:
                reset_terminal();              //Leaving menu, so clear the screen so not to confuse user
 80017f0:	f000 ffe0 	bl	80027b4 <reset_terminal>
                blocking_ms_delay(1);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f000 fead 	bl	8002554 <blocking_ms_delay>
                cursor_top_left();        //Make sure the cursor is in the Top Left position
 80017fa:	f000 ffc3 	bl	8002784 <cursor_top_left>
                blocking_ms_delay(1);
 80017fe:	2001      	movs	r0, #1
 8001800:	f000 fea8 	bl	8002554 <blocking_ms_delay>
                usr_number_u8 = 99;
 8001804:	2363      	movs	r3, #99	; 0x63
 8001806:	71fb      	strb	r3, [r7, #7]
            break;
 8001808:	e001      	b.n	800180e <console_menu+0x236>

            default:
                usr_number_u8 = 99;
 800180a:	2363      	movs	r3, #99	; 0x63
 800180c:	71fb      	strb	r3, [r7, #7]
    while(usr_number_u8 != 99) 
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b63      	cmp	r3, #99	; 0x63
 8001812:	f47f aef5 	bne.w	8001600 <console_menu+0x28>
        }   //END Switch(usr_number_u8)
    }  //END while(glbinfo.rxchar != 99)

    print_string("Leaving console.",LF);
 8001816:	2101      	movs	r1, #1
 8001818:	4818      	ldr	r0, [pc, #96]	; (800187c <console_menu+0x2a4>)
 800181a:	f000 ff59 	bl	80026d0 <print_string>

}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bd90      	pop	{r4, r7, pc}
 8001826:	bf00      	nop
 8001828:	20000234 	.word	0x20000234
 800182c:	0800a900 	.word	0x0800a900
 8001830:	0800a918 	.word	0x0800a918
 8001834:	0800a930 	.word	0x0800a930
 8001838:	0800a954 	.word	0x0800a954
 800183c:	0800a970 	.word	0x0800a970
 8001840:	0800a994 	.word	0x0800a994
 8001844:	0800a9a8 	.word	0x0800a9a8
 8001848:	0800a9c0 	.word	0x0800a9c0
 800184c:	0800a9d4 	.word	0x0800a9d4
 8001850:	40011000 	.word	0x40011000
 8001854:	0800a9e8 	.word	0x0800a9e8
 8001858:	0800a9f4 	.word	0x0800a9f4
 800185c:	0800aa00 	.word	0x0800aa00
 8001860:	0800aa08 	.word	0x0800aa08
 8001864:	0800aa24 	.word	0x0800aa24
 8001868:	20000208 	.word	0x20000208
 800186c:	0800aa34 	.word	0x0800aa34
 8001870:	0800aa54 	.word	0x0800aa54
 8001874:	0800aa78 	.word	0x0800aa78
 8001878:	0800aa8c 	.word	0x0800aa8c
 800187c:	0800aaa0 	.word	0x0800aaa0

08001880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001884:	f001 f824 	bl	80028d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_timer ();
 8001888:	f000 fe4a 	bl	8002520 <init_timer>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800188c:	f000 f8f6 	bl	8001a7c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  uart.errorflag      = false;
 8001890:	4b6f      	ldr	r3, [pc, #444]	; (8001a50 <main+0x1d0>)
 8001892:	2200      	movs	r2, #0
 8001894:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  uart.validmsg       = false;
 8001898:	4b6d      	ldr	r3, [pc, #436]	; (8001a50 <main+0x1d0>)
 800189a:	2200      	movs	r2, #0
 800189c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  uart.inmenu         = false;                    // Will not start out in console menu
 80018a0:	4b6b      	ldr	r3, [pc, #428]	; (8001a50 <main+0x1d0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  uart.msg_state      = STATESTART;
 80018a8:	4b69      	ldr	r3, [pc, #420]	; (8001a50 <main+0x1d0>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  uart.len_verify     = 0;                        // Initialize length verify counter to 0
 80018b0:	4b67      	ldr	r3, [pc, #412]	; (8001a50 <main+0x1d0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  uart.producer_index = 0;                        // Initialize consumer index
 80018b8:	4b65      	ldr	r3, [pc, #404]	; (8001a50 <main+0x1d0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  uart.consumer_index = 0;                        // Initialize producer index
 80018c0:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <main+0x1d0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  temp.fan_transition = false;
 80018c8:	4b62      	ldr	r3, [pc, #392]	; (8001a54 <main+0x1d4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  temp.fan_on         = false;
 80018d0:	4b60      	ldr	r3, [pc, #384]	; (8001a54 <main+0x1d4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  temp.fan_transition_blink_count = 0;
 80018d8:	4b5e      	ldr	r3, [pc, #376]	; (8001a54 <main+0x1d4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	851a      	strh	r2, [r3, #40]	; 0x28

  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018de:	f000 fa1d 	bl	8001d1c <MX_GPIO_Init>
  MX_TIM1_Init();
 80018e2:	f000 f955 	bl	8001b90 <MX_TIM1_Init>
  MX_SPI1_Init();
 80018e6:	f000 f91d 	bl	8001b24 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80018ea:	f000 f9ed 	bl	8001cc8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80018ee:	f000 f99f 	bl	8001c30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  
  HAL_TIM_Base_Start_IT(&htim1);     // Main tick counter
 80018f2:	4859      	ldr	r0, [pc, #356]	; (8001a58 <main+0x1d8>)
 80018f4:	f002 fd18 	bl	8004328 <HAL_TIM_Base_Start_IT>
  
  __HAL_TIM_SET_AUTORELOAD(&htim2, 0xFFFFFFFF);  //Issue with the GUI -- this is a 32 bit timer!
 80018f8:	4b58      	ldr	r3, [pc, #352]	; (8001a5c <main+0x1dc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c
 8001902:	4b56      	ldr	r3, [pc, #344]	; (8001a5c <main+0x1dc>)
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start(&htim2);     // Used for us counter
 800190a:	4854      	ldr	r0, [pc, #336]	; (8001a5c <main+0x1dc>)
 800190c:	f002 fcba 	bl	8004284 <HAL_TIM_Base_Start>
  
  
  HAL_GPIO_WritePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	2101      	movs	r1, #1
 8001914:	4852      	ldr	r0, [pc, #328]	; (8001a60 <main+0x1e0>)
 8001916:	f001 fc28 	bl	800316a <HAL_GPIO_WritePin>
  
  // Must use Base Start IT if using interrupts
  HAL_UART_Receive_IT(&huart1, &uart.rxchar, 1);  // UART to console interface
 800191a:	2201      	movs	r2, #1
 800191c:	4951      	ldr	r1, [pc, #324]	; (8001a64 <main+0x1e4>)
 800191e:	4852      	ldr	r0, [pc, #328]	; (8001a68 <main+0x1e8>)
 8001920:	f003 f999 	bl	8004c56 <HAL_UART_Receive_IT>
  
  print_string("RESET",LF);
 8001924:	2101      	movs	r1, #1
 8001926:	4851      	ldr	r0, [pc, #324]	; (8001a6c <main+0x1ec>)
 8001928:	f000 fed2 	bl	80026d0 <print_string>

  HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET);  //Disable the fan
 800192c:	2200      	movs	r2, #0
 800192e:	2140      	movs	r1, #64	; 0x40
 8001930:	484b      	ldr	r0, [pc, #300]	; (8001a60 <main+0x1e0>)
 8001932:	f001 fc1a 	bl	800316a <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(time.flag_10ms_tick) 
 8001936:	4b4e      	ldr	r3, [pc, #312]	; (8001a70 <main+0x1f0>)
 8001938:	78db      	ldrb	r3, [r3, #3]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d03c      	beq.n	80019b8 <main+0x138>
    {
		  time.flag_10ms_tick = false;
 800193e:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <main+0x1f0>)
 8001940:	2200      	movs	r2, #0
 8001942:	70da      	strb	r2, [r3, #3]
      
      /** Enable fan if temp is to high */
      if(temp.flt_temp_value > TEMP_TRIP_F_RISING &&
 8001944:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <main+0x1d4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	494a      	ldr	r1, [pc, #296]	; (8001a74 <main+0x1f4>)
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fc42 	bl	80011d4 <__aeabi_fcmpgt>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d015      	beq.n	8001982 <main+0x102>
          temp.fan_on == false) 
 8001956:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <main+0x1d4>)
 8001958:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800195c:	f083 0301 	eor.w	r3, r3, #1
 8001960:	b2db      	uxtb	r3, r3
      if(temp.flt_temp_value > TEMP_TRIP_F_RISING &&
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00d      	beq.n	8001982 <main+0x102>
      {
       HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_SET); 
 8001966:	2201      	movs	r2, #1
 8001968:	2140      	movs	r1, #64	; 0x40
 800196a:	483d      	ldr	r0, [pc, #244]	; (8001a60 <main+0x1e0>)
 800196c:	f001 fbfd 	bl	800316a <HAL_GPIO_WritePin>
       temp.fan_transition = true;
 8001970:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <main+0x1d4>)
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
       temp.fan_on = true;
 8001978:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <main+0x1d4>)
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8001980:	e01a      	b.n	80019b8 <main+0x138>
      }
      
      /** Disable the fan when the temp is cool enough */
      else if(temp.flt_temp_value < TEMP_TRIP_F_FALLING &&
 8001982:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <main+0x1d4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	493c      	ldr	r1, [pc, #240]	; (8001a78 <main+0x1f8>)
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fc05 	bl	8001198 <__aeabi_fcmplt>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d011      	beq.n	80019b8 <main+0x138>
                temp.fan_on == true)
 8001994:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <main+0x1d4>)
 8001996:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
      else if(temp.flt_temp_value < TEMP_TRIP_F_FALLING &&
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00c      	beq.n	80019b8 <main+0x138>
      {
        HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2140      	movs	r1, #64	; 0x40
 80019a2:	482f      	ldr	r0, [pc, #188]	; (8001a60 <main+0x1e0>)
 80019a4:	f001 fbe1 	bl	800316a <HAL_GPIO_WritePin>
        temp.fan_transition = true;
 80019a8:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <main+0x1d4>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        temp.fan_on = false;
 80019b0:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <main+0x1d4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      }

	  }

	  if(time.flag_100ms_tick) 
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <main+0x1f0>)
 80019ba:	791b      	ldrb	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d032      	beq.n	8001a26 <main+0x1a6>
    {
      time.flag_100ms_tick = false;
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <main+0x1f0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	711a      	strb	r2, [r3, #4]
      
      if(temp.fan_transition == true &&
 80019c6:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <main+0x1d4>)
 80019c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01d      	beq.n	8001a0c <main+0x18c>
          temp.fan_transition_blink_count < MAX_TRANSITION_BLINKS)
 80019d0:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <main+0x1d4>)
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      if(temp.fan_transition == true &&
 80019d4:	2b18      	cmp	r3, #24
 80019d6:	d819      	bhi.n	8001a0c <main+0x18c>
      {
        temp.fan_transition_blink_count++;
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <main+0x1d4>)
 80019da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019dc:	3301      	adds	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <main+0x1d4>)
 80019e2:	851a      	strh	r2, [r3, #40]	; 0x28
        HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);
 80019e4:	2101      	movs	r1, #1
 80019e6:	481e      	ldr	r0, [pc, #120]	; (8001a60 <main+0x1e0>)
 80019e8:	f001 fbd7 	bl	800319a <HAL_GPIO_TogglePin>
        if(temp.fan_transition_blink_count >= MAX_TRANSITION_BLINKS &&
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <main+0x1d4>)
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f0:	2b18      	cmp	r3, #24
 80019f2:	d90b      	bls.n	8001a0c <main+0x18c>
            temp.fan_transition == true)
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <main+0x1d4>)
 80019f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
        if(temp.fan_transition_blink_count >= MAX_TRANSITION_BLINKS &&
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <main+0x18c>
        {
          temp.fan_transition = false;
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <main+0x1d4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
          temp.fan_transition_blink_count = 0;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <main+0x1d4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
      }
      get_temperature_reading();
 8001a0c:	f000 fa8c 	bl	8001f28 <get_temperature_reading>
      if(uart.rxchar == 'z')
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <main+0x1d0>)
 8001a12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a16:	2b7a      	cmp	r3, #122	; 0x7a
 8001a18:	d105      	bne.n	8001a26 <main+0x1a6>
      {
        uart.rxchar = '\0';
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <main+0x1d0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        console_menu();
 8001a22:	f7ff fdd9 	bl	80015d8 <console_menu>
      }
	  }
    
    if(time.flag_500ms_tick) {
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <main+0x1f0>)
 8001a28:	795b      	ldrb	r3, [r3, #5]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d083      	beq.n	8001936 <main+0xb6>
      time.flag_500ms_tick = false;
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <main+0x1f0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	715a      	strb	r2, [r3, #5]
      if(temp.fan_transition == false)
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <main+0x1d4>)
 8001a36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a3a:	f083 0301 	eor.w	r3, r3, #1
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f43f af78 	beq.w	8001936 <main+0xb6>
      {
        HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);
 8001a46:	2101      	movs	r1, #1
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <main+0x1e0>)
 8001a4a:	f001 fba6 	bl	800319a <HAL_GPIO_TogglePin>
	  if(time.flag_10ms_tick) 
 8001a4e:	e772      	b.n	8001936 <main+0xb6>
 8001a50:	20000234 	.word	0x20000234
 8001a54:	20000208 	.word	0x20000208
 8001a58:	200002ac 	.word	0x200002ac
 8001a5c:	20000354 	.word	0x20000354
 8001a60:	40011000 	.word	0x40011000
 8001a64:	20000255 	.word	0x20000255
 8001a68:	20000264 	.word	0x20000264
 8001a6c:	0800aab4 	.word	0x0800aab4
 8001a70:	200002f4 	.word	0x200002f4
 8001a74:	42b40000 	.word	0x42b40000
 8001a78:	42ae0000 	.word	0x42ae0000

08001a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b094      	sub	sp, #80	; 0x50
 8001a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a82:	f107 0318 	add.w	r3, r7, #24
 8001a86:	2238      	movs	r2, #56	; 0x38
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fe9c 	bl	80057c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aac:	2301      	movs	r3, #1
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8001ab0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ac0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ac4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL10;
 8001aca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ace:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV4;
 8001ad0:	2330      	movs	r3, #48	; 0x30
 8001ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 fb77 	bl	80031cc <HAL_RCC_OscConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001ae4:	f000 fa1a 	bl	8001f1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae8:	230f      	movs	r3, #15
 8001aea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aec:	2302      	movs	r3, #2
 8001aee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	2102      	movs	r1, #2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 fe78 	bl	80037f8 <HAL_RCC_ClockConfig>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b0e:	f000 fa05 	bl	8001f1c <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001b12:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <SystemClock_Config+0xa4>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	3750      	adds	r7, #80	; 0x50
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	42420070 	.word	0x42420070

08001b24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b28:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <MX_SPI1_Init+0x64>)
 8001b2a:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <MX_SPI1_Init+0x68>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <MX_SPI1_Init+0x64>)
 8001b30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <MX_SPI1_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <MX_SPI1_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_SPI1_Init+0x64>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_SPI1_Init+0x64>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_SPI1_Init+0x64>)
 8001b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_SPI1_Init+0x64>)
 8001b58:	2238      	movs	r2, #56	; 0x38
 8001b5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <MX_SPI1_Init+0x64>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_SPI1_Init+0x64>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <MX_SPI1_Init+0x64>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_SPI1_Init+0x64>)
 8001b70:	220a      	movs	r2, #10
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <MX_SPI1_Init+0x64>)
 8001b76:	f002 f84f 	bl	8003c18 <HAL_SPI_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b80:	f000 f9cc 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200002fc 	.word	0x200002fc
 8001b8c:	40013000 	.word	0x40013000

08001b90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <MX_TIM1_Init+0x98>)
 8001bae:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <MX_TIM1_Init+0x9c>)
 8001bb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <MX_TIM1_Init+0x98>)
 8001bb4:	2247      	movs	r2, #71	; 0x47
 8001bb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <MX_TIM1_Init+0x98>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <MX_TIM1_Init+0x98>)
 8001bc0:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <MX_TIM1_Init+0x98>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <MX_TIM1_Init+0x98>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <MX_TIM1_Init+0x98>)
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bd8:	4813      	ldr	r0, [pc, #76]	; (8001c28 <MX_TIM1_Init+0x98>)
 8001bda:	f002 fb04 	bl	80041e6 <HAL_TIM_Base_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001be4:	f000 f99a 	bl	8001f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bee:	f107 0308 	add.w	r3, r7, #8
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480c      	ldr	r0, [pc, #48]	; (8001c28 <MX_TIM1_Init+0x98>)
 8001bf6:	f002 fce1 	bl	80045bc <HAL_TIM_ConfigClockSource>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001c00:	f000 f98c 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_TIM1_Init+0x98>)
 8001c12:	f002 fecd 	bl	80049b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c1c:	f000 f97e 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200002ac 	.word	0x200002ac
 8001c2c:	40012c00 	.word	0x40012c00

08001c30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c44:	463b      	mov	r3, r7
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <MX_TIM2_Init+0x94>)
 8001c4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <MX_TIM2_Init+0x94>)
 8001c56:	2247      	movs	r2, #71	; 0x47
 8001c58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <MX_TIM2_Init+0x94>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MX_TIM2_Init+0x94>)
 8001c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_TIM2_Init+0x94>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <MX_TIM2_Init+0x94>)
 8001c70:	2280      	movs	r2, #128	; 0x80
 8001c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c74:	4813      	ldr	r0, [pc, #76]	; (8001cc4 <MX_TIM2_Init+0x94>)
 8001c76:	f002 fab6 	bl	80041e6 <HAL_TIM_Base_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c80:	f000 f94c 	bl	8001f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <MX_TIM2_Init+0x94>)
 8001c92:	f002 fc93 	bl	80045bc <HAL_TIM_ConfigClockSource>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c9c:	f000 f93e 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca8:	463b      	mov	r3, r7
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_TIM2_Init+0x94>)
 8001cae:	f002 fe7f 	bl	80049b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cb8:	f000 f930 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000354 	.word	0x20000354

08001cc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <MX_USART1_UART_Init+0x50>)
 8001cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cd4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cee:	220c      	movs	r2, #12
 8001cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001d00:	f002 fece 	bl	8004aa0 <HAL_UART_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d0a:	f000 f907 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000264 	.word	0x20000264
 8001d18:	40013800 	.word	0x40013800

08001d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <MX_GPIO_Init+0xf0>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a35      	ldr	r2, [pc, #212]	; (8001e0c <MX_GPIO_Init+0xf0>)
 8001d36:	f043 0310 	orr.w	r3, r3, #16
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <MX_GPIO_Init+0xf0>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d48:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <MX_GPIO_Init+0xf0>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a2f      	ldr	r2, [pc, #188]	; (8001e0c <MX_GPIO_Init+0xf0>)
 8001d4e:	f043 0320 	orr.w	r3, r3, #32
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <MX_GPIO_Init+0xf0>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0320 	and.w	r3, r3, #32
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <MX_GPIO_Init+0xf0>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a29      	ldr	r2, [pc, #164]	; (8001e0c <MX_GPIO_Init+0xf0>)
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <MX_GPIO_Init+0xf0>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <MX_GPIO_Init+0xf0>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <MX_GPIO_Init+0xf0>)
 8001d7e:	f043 0308 	orr.w	r3, r3, #8
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <MX_GPIO_Init+0xf0>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin, GPIO_PIN_SET);
 8001d90:	2201      	movs	r2, #1
 8001d92:	2101      	movs	r1, #1
 8001d94:	481e      	ldr	r0, [pc, #120]	; (8001e10 <MX_GPIO_Init+0xf4>)
 8001d96:	f001 f9e8 	bl	800316a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2140      	movs	r1, #64	; 0x40
 8001d9e:	481c      	ldr	r0, [pc, #112]	; (8001e10 <MX_GPIO_Init+0xf4>)
 8001da0:	f001 f9e3 	bl	800316a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEMP_CS_GPIO_Port, TEMP_CS_Pin, GPIO_PIN_SET);
 8001da4:	2201      	movs	r2, #1
 8001da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001daa:	481a      	ldr	r0, [pc, #104]	; (8001e14 <MX_GPIO_Init+0xf8>)
 8001dac:	f001 f9dd 	bl	800316a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ID_B0_Pin ID_B1_Pin ID_B2_Pin */
  GPIO_InitStruct.Pin = ID_B0_Pin|ID_B1_Pin|ID_B2_Pin;
 8001db0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4812      	ldr	r0, [pc, #72]	; (8001e10 <MX_GPIO_Init+0xf4>)
 8001dc6:	f001 f835 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : HLTH_LED_Pin FAN_EN_Pin */
  GPIO_InitStruct.Pin = HLTH_LED_Pin|FAN_EN_Pin;
 8001dca:	2341      	movs	r3, #65	; 0x41
 8001dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dda:	f107 0310 	add.w	r3, r7, #16
 8001dde:	4619      	mov	r1, r3
 8001de0:	480b      	ldr	r0, [pc, #44]	; (8001e10 <MX_GPIO_Init+0xf4>)
 8001de2:	f001 f827 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_CS_Pin */
  GPIO_InitStruct.Pin = TEMP_CS_Pin;
 8001de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_CS_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_GPIO_Init+0xf8>)
 8001e00:	f001 f818 	bl	8002e34 <HAL_GPIO_Init>

}
 8001e04:	bf00      	nop
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40011000 	.word	0x40011000
 8001e14:	40010800 	.word	0x40010800

08001e18 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */
/************************************************
 *  @brief Handle timer interrupts 
 ***********************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) 
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if(htim == &htim1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d132      	bne.n	8001e8e <HAL_TIM_PeriodElapsedCallback+0x76>
  {
    time.flag_10ms_tick = true;
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	70da      	strb	r2, [r3, #3]

    if(time.ticks10ms == 9) 
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b09      	cmp	r3, #9
 8001e34:	d125      	bne.n	8001e82 <HAL_TIM_PeriodElapsedCallback+0x6a>
    {
        time.ticks10ms = 0;
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
        time.flag_100ms_tick = true;
 8001e3c:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	711a      	strb	r2, [r3, #4]

        if(time.ticks100ms == 4) 
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e44:	785b      	ldrb	r3, [r3, #1]
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d114      	bne.n	8001e74 <HAL_TIM_PeriodElapsedCallback+0x5c>
        {
          time.ticks100ms = 0;
 8001e4a:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	705a      	strb	r2, [r3, #1]
          time.flag_500ms_tick = true;
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	715a      	strb	r2, [r3, #5]

          if(time.ticks500ms == 119)										// One minute worth of half seconds
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e58:	789b      	ldrb	r3, [r3, #2]
 8001e5a:	2b77      	cmp	r3, #119	; 0x77
 8001e5c:	d103      	bne.n	8001e66 <HAL_TIM_PeriodElapsedCallback+0x4e>
          {
            time.ticks500ms = 0;
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	709a      	strb	r2, [r3, #2]
    {
      time.ticks10ms += 1;
    }

  }
}
 8001e64:	e013      	b.n	8001e8e <HAL_TIM_PeriodElapsedCallback+0x76>
            time.ticks500ms += 1;
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e68:	789b      	ldrb	r3, [r3, #2]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e70:	709a      	strb	r2, [r3, #2]
}
 8001e72:	e00c      	b.n	8001e8e <HAL_TIM_PeriodElapsedCallback+0x76>
          time.ticks100ms += 1;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e76:	785b      	ldrb	r3, [r3, #1]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e7e:	705a      	strb	r2, [r3, #1]
}
 8001e80:	e005      	b.n	8001e8e <HAL_TIM_PeriodElapsedCallback+0x76>
      time.ticks10ms += 1;
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	3301      	adds	r3, #1
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e8c:	701a      	strb	r2, [r3, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	200002ac 	.word	0x200002ac
 8001e9c:	200002f4 	.word	0x200002f4

08001ea0 <HAL_UART_RxCpltCallback>:

/************************************************
 *  @brief Handle UART RX interrupts 
 ***********************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	
  /**
   * Console UART Interface
   * 
   */
  if(huart->Instance == USART1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_UART_RxCpltCallback+0x6c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d127      	bne.n	8001f02 <HAL_UART_RxCpltCallback+0x62>
  {
    uart.rxbuf[uart.producer_index] = uart.rxchar;          // Load this byte into rx buffer  
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_UART_RxCpltCallback+0x70>)
 8001eb4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_UART_RxCpltCallback+0x70>)
 8001ebc:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_UART_RxCpltCallback+0x70>)
 8001ec2:	5499      	strb	r1, [r3, r2]
    uart.byte_counter++;                                                   //Increase data counter
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_UART_RxCpltCallback+0x70>)
 8001ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001eca:	3301      	adds	r3, #1
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_UART_RxCpltCallback+0x70>)
 8001ed0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    (uart.producer_index >= MAX_RX_BUF_INDEX) ? (uart.producer_index = 0):(uart.producer_index++);       
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_UART_RxCpltCallback+0x70>)
 8001ed6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001eda:	2b1f      	cmp	r3, #31
 8001edc:	d904      	bls.n	8001ee8 <HAL_UART_RxCpltCallback+0x48>
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_UART_RxCpltCallback+0x70>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001ee6:	e007      	b.n	8001ef8 <HAL_UART_RxCpltCallback+0x58>
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_UART_RxCpltCallback+0x70>)
 8001eea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <HAL_UART_RxCpltCallback+0x70>)
 8001ef4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		HAL_UART_Receive_IT(&huart1, &uart.rxchar, 1);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4906      	ldr	r1, [pc, #24]	; (8001f14 <HAL_UART_RxCpltCallback+0x74>)
 8001efc:	4806      	ldr	r0, [pc, #24]	; (8001f18 <HAL_UART_RxCpltCallback+0x78>)
 8001efe:	f002 feaa 	bl	8004c56 <HAL_UART_Receive_IT>
	} 
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40013800 	.word	0x40013800
 8001f10:	20000234 	.word	0x20000234
 8001f14:	20000255 	.word	0x20000255
 8001f18:	20000264 	.word	0x20000264

08001f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <Error_Handler+0x8>
	...

08001f28 <get_temperature_reading>:
    return(x);
}


bool get_temperature_reading( void )
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af02      	add	r7, sp, #8
    uint8_t i                   = 0;  
 8001f2e:	2300      	movs	r3, #0
 8001f30:	77fb      	strb	r3, [r7, #31]
    int32_t i32_signed_temp_data   = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
    uint32_t raw                = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]

    float temp_sum              = 0.0;
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
    float temp_value            = -0.0;
 8001f40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f44:	60fb      	str	r3, [r7, #12]

    uint8_t tx[4] = {0x00, 0x00, 0x00, 0x00};   // dummy bytes to clock data out
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
    uint8_t rx[4] = {0};
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	603b      	str	r3, [r7, #0]
  
    /**
     * Drop the CS line low
     */
    HAL_GPIO_WritePin(TEMP_CS_GPIO_Port, TEMP_CS_Pin, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f54:	485c      	ldr	r0, [pc, #368]	; (80020c8 <get_temperature_reading+0x1a0>)
 8001f56:	f001 f908 	bl	800316a <HAL_GPIO_WritePin>
    blocking_ms_delay(2);
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	f000 fafa 	bl	8002554 <blocking_ms_delay>
    
    if(HAL_SPI_TransmitReceive(&hspi1, tx, rx, sizeof(rx), 10) != HAL_OK)  // 10 ms timeout. The first byte will land in rx[0]
 8001f60:	463a      	mov	r2, r7
 8001f62:	1d39      	adds	r1, r7, #4
 8001f64:	230a      	movs	r3, #10
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2304      	movs	r3, #4
 8001f6a:	4858      	ldr	r0, [pc, #352]	; (80020cc <get_temperature_reading+0x1a4>)
 8001f6c:	f001 fed8 	bl	8003d20 <HAL_SPI_TransmitReceive>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <get_temperature_reading+0x52>
    {
        return false;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e09e      	b.n	80020b8 <get_temperature_reading+0x190>
    } 
    
    /**
     * Bring the CS pin back high
     */
    HAL_GPIO_WritePin(TEMP_CS_GPIO_Port, TEMP_CS_Pin, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f80:	4851      	ldr	r0, [pc, #324]	; (80020c8 <get_temperature_reading+0x1a0>)
 8001f82:	f001 f8f2 	bl	800316a <HAL_GPIO_WritePin>
    
    raw = ((uint32_t)rx[0] << 24) | ((uint32_t)rx[1] << 16)
 8001f86:	783b      	ldrb	r3, [r7, #0]
 8001f88:	061a      	lsls	r2, r3, #24
 8001f8a:	787b      	ldrb	r3, [r7, #1]
 8001f8c:	041b      	lsls	r3, r3, #16
 8001f8e:	431a      	orrs	r2, r3
    | ((uint32_t)rx[2] << 8)  |  ((uint32_t)rx[3]);
 8001f90:	78bb      	ldrb	r3, [r7, #2]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	4313      	orrs	r3, r2
 8001f96:	78fa      	ldrb	r2, [r7, #3]
    raw = ((uint32_t)rx[0] << 24) | ((uint32_t)rx[1] << 16)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]


    /**
     * Check the temp fault bit
     */
    if (raw & 0x00010000UL) 
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d021      	beq.n	8001fea <get_temperature_reading+0xc2>
    {                   // FAULT bit set (bit16)
        uint8_t f = raw & 0x07;                 // bits 2..0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	72fb      	strb	r3, [r7, #11]
        if (f & 0x04) print_string("Fault: SCV (short to VCC)", LF);
 8001fb0:	7afb      	ldrb	r3, [r7, #11]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <get_temperature_reading+0x9a>
 8001fba:	2101      	movs	r1, #1
 8001fbc:	4844      	ldr	r0, [pc, #272]	; (80020d0 <get_temperature_reading+0x1a8>)
 8001fbe:	f000 fb87 	bl	80026d0 <print_string>
        if (f & 0x02) print_string("Fault: SCG (short to GND)", LF);
 8001fc2:	7afb      	ldrb	r3, [r7, #11]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <get_temperature_reading+0xac>
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4841      	ldr	r0, [pc, #260]	; (80020d4 <get_temperature_reading+0x1ac>)
 8001fd0:	f000 fb7e 	bl	80026d0 <print_string>
        if (f & 0x01) print_string("Fault: OC  (open thermocouple)", LF);
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <get_temperature_reading+0xbe>
 8001fde:	2101      	movs	r1, #1
 8001fe0:	483d      	ldr	r0, [pc, #244]	; (80020d8 <get_temperature_reading+0x1b0>)
 8001fe2:	f000 fb75 	bl	80026d0 <print_string>
        
        // // You can still read cold-junction temp if you want:
        return false;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e066      	b.n	80020b8 <get_temperature_reading+0x190>
    }

    /**
     * Only process this if we don't have a fault
     */
    i32_signed_temp_data = (int32_t)((raw >> 18) & 0x3FFF);     // sign-extend 
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	0c9b      	lsrs	r3, r3, #18
 8001fee:	617b      	str	r3, [r7, #20]
    temp_value = (float)(i32_signed_temp_data / 4.0);
 8001ff0:	6978      	ldr	r0, [r7, #20]
 8001ff2:	f7fe fa73 	bl	80004dc <__aeabi_i2d>
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	4b38      	ldr	r3, [pc, #224]	; (80020dc <get_temperature_reading+0x1b4>)
 8001ffc:	f7fe fc02 	bl	8000804 <__aeabi_ddiv>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4610      	mov	r0, r2
 8002006:	4619      	mov	r1, r3
 8002008:	f7fe fdca 	bl	8000ba0 <__aeabi_d2f>
 800200c:	4603      	mov	r3, r0
 800200e:	60fb      	str	r3, [r7, #12]
    

    /**
     * Convert Celsius to Fahrenheit
     */
    temp_value = (float)((temp_value * 1.8) + 32);
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7fe fa75 	bl	8000500 <__aeabi_f2d>
 8002016:	a32a      	add	r3, pc, #168	; (adr r3, 80020c0 <get_temperature_reading+0x198>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe fac8 	bl	80005b0 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <get_temperature_reading+0x1b8>)
 800202e:	f7fe f909 	bl	8000244 <__adddf3>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fdb1 	bl	8000ba0 <__aeabi_d2f>
 800203e:	4603      	mov	r3, r0
 8002040:	60fb      	str	r3, [r7, #12]

    temp.temperature_buffer[temp.temp_buf_index] = temp_value;   
 8002042:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <get_temperature_reading+0x1bc>)
 8002044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002048:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <get_temperature_reading+0x1bc>)
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	605a      	str	r2, [r3, #4]
    (temp.temp_buf_index >= 7) ? (temp.temp_buf_index = 0):(temp.temp_buf_index++);
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <get_temperature_reading+0x1bc>)
 8002054:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002058:	2b06      	cmp	r3, #6
 800205a:	d904      	bls.n	8002066 <get_temperature_reading+0x13e>
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <get_temperature_reading+0x1bc>)
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002064:	e007      	b.n	8002076 <get_temperature_reading+0x14e>
 8002066:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <get_temperature_reading+0x1bc>)
 8002068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800206c:	3301      	adds	r3, #1
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <get_temperature_reading+0x1bc>)
 8002072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    temp_sum = 0.0;   // Reset this value in preparation to calculate the average
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
    
    for(i = 0; i < 8; i++) 
 800207c:	2300      	movs	r3, #0
 800207e:	77fb      	strb	r3, [r7, #31]
 8002080:	e00d      	b.n	800209e <get_temperature_reading+0x176>
    {
        temp_sum += temp.temperature_buffer[i];
 8002082:	7ffb      	ldrb	r3, [r7, #31]
 8002084:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <get_temperature_reading+0x1bc>)
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4619      	mov	r1, r3
 800208e:	69b8      	ldr	r0, [r7, #24]
 8002090:	f7fe fddc 	bl	8000c4c <__addsf3>
 8002094:	4603      	mov	r3, r0
 8002096:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < 8; i++) 
 8002098:	7ffb      	ldrb	r3, [r7, #31]
 800209a:	3301      	adds	r3, #1
 800209c:	77fb      	strb	r3, [r7, #31]
 800209e:	7ffb      	ldrb	r3, [r7, #31]
 80020a0:	2b07      	cmp	r3, #7
 80020a2:	d9ee      	bls.n	8002082 <get_temperature_reading+0x15a>
    }

    temp.flt_temp_value = (float)(temp_sum / 8);  
 80020a4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80020a8:	69b8      	ldr	r0, [r7, #24]
 80020aa:	f7fe ff8b 	bl	8000fc4 <__aeabi_fdiv>
 80020ae:	4603      	mov	r3, r0
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <get_temperature_reading+0x1bc>)
 80020b4:	601a      	str	r2, [r3, #0]

    return(true);
 80020b6:	2301      	movs	r3, #1

}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3720      	adds	r7, #32
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	cccccccd 	.word	0xcccccccd
 80020c4:	3ffccccc 	.word	0x3ffccccc
 80020c8:	40010800 	.word	0x40010800
 80020cc:	200002fc 	.word	0x200002fc
 80020d0:	0800aabc 	.word	0x0800aabc
 80020d4:	0800aad8 	.word	0x0800aad8
 80020d8:	0800aaf4 	.word	0x0800aaf4
 80020dc:	40100000 	.word	0x40100000
 80020e0:	40400000 	.word	0x40400000
 80020e4:	20000208 	.word	0x20000208

080020e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_MspInit+0x5c>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	4a14      	ldr	r2, [pc, #80]	; (8002144 <HAL_MspInit+0x5c>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6193      	str	r3, [r2, #24]
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_MspInit+0x5c>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_MspInit+0x5c>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <HAL_MspInit+0x5c>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	61d3      	str	r3, [r2, #28]
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_MspInit+0x5c>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_MspInit+0x60>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <HAL_MspInit+0x60>)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	40021000 	.word	0x40021000
 8002148:	40010000 	.word	0x40010000

0800214c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <HAL_SPI_MspInit+0x88>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d12f      	bne.n	80021cc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_SPI_MspInit+0x8c>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <HAL_SPI_MspInit+0x8c>)
 8002172:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002176:	6193      	str	r3, [r2, #24]
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_SPI_MspInit+0x8c>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_SPI_MspInit+0x8c>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a13      	ldr	r2, [pc, #76]	; (80021d8 <HAL_SPI_MspInit+0x8c>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_SPI_MspInit+0x8c>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_TEMP_SCK_Pin|SPI1_TEMP_MOSI_Pin;
 800219c:	23a0      	movs	r3, #160	; 0xa0
 800219e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	4619      	mov	r1, r3
 80021ae:	480b      	ldr	r0, [pc, #44]	; (80021dc <HAL_SPI_MspInit+0x90>)
 80021b0:	f000 fe40 	bl	8002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_TEMP_MISO_Pin;
 80021b4:	2340      	movs	r3, #64	; 0x40
 80021b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI1_TEMP_MISO_GPIO_Port, &GPIO_InitStruct);
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	4619      	mov	r1, r3
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <HAL_SPI_MspInit+0x90>)
 80021c8:	f000 fe34 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021cc:	bf00      	nop
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40013000 	.word	0x40013000
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40010800 	.word	0x40010800

080021e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1a      	ldr	r2, [pc, #104]	; (8002258 <HAL_TIM_Base_MspInit+0x78>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d114      	bne.n	800221c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021f2:	4b1a      	ldr	r3, [pc, #104]	; (800225c <HAL_TIM_Base_MspInit+0x7c>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	4a19      	ldr	r2, [pc, #100]	; (800225c <HAL_TIM_Base_MspInit+0x7c>)
 80021f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021fc:	6193      	str	r3, [r2, #24]
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_TIM_Base_MspInit+0x7c>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	2019      	movs	r0, #25
 8002210:	f000 fc97 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002214:	2019      	movs	r0, #25
 8002216:	f000 fcb0 	bl	8002b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800221a:	e018      	b.n	800224e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002224:	d113      	bne.n	800224e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <HAL_TIM_Base_MspInit+0x7c>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	4a0c      	ldr	r2, [pc, #48]	; (800225c <HAL_TIM_Base_MspInit+0x7c>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	61d3      	str	r3, [r2, #28]
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_TIM_Base_MspInit+0x7c>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	201c      	movs	r0, #28
 8002244:	f000 fc7d 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002248:	201c      	movs	r0, #28
 800224a:	f000 fc96 	bl	8002b7a <HAL_NVIC_EnableIRQ>
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40021000 	.word	0x40021000

08002260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a20      	ldr	r2, [pc, #128]	; (80022fc <HAL_UART_MspInit+0x9c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d139      	bne.n	80022f4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <HAL_UART_MspInit+0xa0>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <HAL_UART_MspInit+0xa0>)
 8002286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800228a:	6193      	str	r3, [r2, #24]
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <HAL_UART_MspInit+0xa0>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_UART_MspInit+0xa0>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a18      	ldr	r2, [pc, #96]	; (8002300 <HAL_UART_MspInit+0xa0>)
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_UART_MspInit+0xa0>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_RXD_MCU_TXD_Pin;
 80022b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_RXD_MCU_TXD_GPIO_Port, &GPIO_InitStruct);
 80022be:	f107 0310 	add.w	r3, r7, #16
 80022c2:	4619      	mov	r1, r3
 80022c4:	480f      	ldr	r0, [pc, #60]	; (8002304 <HAL_UART_MspInit+0xa4>)
 80022c6:	f000 fdb5 	bl	8002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_TXD_MCU_RXD_Pin;
 80022ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(USB_TXD_MCU_RXD_GPIO_Port, &GPIO_InitStruct);
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	4619      	mov	r1, r3
 80022de:	4809      	ldr	r0, [pc, #36]	; (8002304 <HAL_UART_MspInit+0xa4>)
 80022e0:	f000 fda8 	bl	8002e34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2100      	movs	r1, #0
 80022e8:	2025      	movs	r0, #37	; 0x25
 80022ea:	f000 fc2a 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ee:	2025      	movs	r0, #37	; 0x25
 80022f0:	f000 fc43 	bl	8002b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022f4:	bf00      	nop
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40013800 	.word	0x40013800
 8002300:	40021000 	.word	0x40021000
 8002304:	40010800 	.word	0x40010800

08002308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800230c:	e7fe      	b.n	800230c <NMI_Handler+0x4>

0800230e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <HardFault_Handler+0x4>

08002314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <MemManage_Handler+0x4>

0800231a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <BusFault_Handler+0x4>

08002320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <UsageFault_Handler+0x4>

08002326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800234e:	f000 fb05 	bl	800295c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <TIM1_UP_IRQHandler+0x10>)
 800235e:	f002 f83d 	bl	80043dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200002ac 	.word	0x200002ac

0800236c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <TIM2_IRQHandler+0x10>)
 8002372:	f002 f833 	bl	80043dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000354 	.word	0x20000354

08002380 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <USART1_IRQHandler+0x10>)
 8002386:	f002 fc8b 	bl	8004ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000264 	.word	0x20000264

08002394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
	return 1;
 8002398:	2301      	movs	r3, #1
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <_kill>:

int _kill(int pid, int sig)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023ac:	f003 f9e2 	bl	8005774 <__errno>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2216      	movs	r2, #22
 80023b4:	601a      	str	r2, [r3, #0]
	return -1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <_exit>:

void _exit (int status)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023ca:	f04f 31ff 	mov.w	r1, #4294967295
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ffe7 	bl	80023a2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023d4:	e7fe      	b.n	80023d4 <_exit+0x12>

080023d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e00a      	b.n	80023fe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023e8:	f3af 8000 	nop.w
 80023ec:	4601      	mov	r1, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	60ba      	str	r2, [r7, #8]
 80023f4:	b2ca      	uxtb	r2, r1
 80023f6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	3301      	adds	r3, #1
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	429a      	cmp	r2, r3
 8002404:	dbf0      	blt.n	80023e8 <_read+0x12>
	}

return len;
 8002406:	687b      	ldr	r3, [r7, #4]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	e009      	b.n	8002436 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	60ba      	str	r2, [r7, #8]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3301      	adds	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	dbf1      	blt.n	8002422 <_write+0x12>
	}
	return len;
 800243e:	687b      	ldr	r3, [r7, #4]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_close>:

int _close(int file)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	return -1;
 8002450:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800246e:	605a      	str	r2, [r3, #4]
	return 0;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <_isatty>:

int _isatty(int file)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	return 1;
 8002484:	2301      	movs	r3, #1
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
	return 0;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <_sbrk+0x5c>)
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <_sbrk+0x60>)
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <_sbrk+0x64>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <_sbrk+0x68>)
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d207      	bcs.n	80024e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d8:	f003 f94c 	bl	8005774 <__errno>
 80024dc:	4603      	mov	r3, r0
 80024de:	220c      	movs	r2, #12
 80024e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	e009      	b.n	80024fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a05      	ldr	r2, [pc, #20]	; (800250c <_sbrk+0x64>)
 80024f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20010000 	.word	0x20010000
 8002508:	00000400 	.word	0x00000400
 800250c:	200001fc 	.word	0x200001fc
 8002510:	200003b0 	.word	0x200003b0

08002514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <init_timer>:

struct timing       time;

//TODO need to clean up the following

void init_timer ( void ) {
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
//   time.led_fast_blink = false; //TODO remove?  
  time.flag_10ms_tick = false;
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <init_timer+0x30>)
 8002526:	2200      	movs	r2, #0
 8002528:	70da      	strb	r2, [r3, #3]
  time.flag_100ms_tick = false;
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <init_timer+0x30>)
 800252c:	2200      	movs	r2, #0
 800252e:	711a      	strb	r2, [r3, #4]
  time.flag_500ms_tick = false;
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <init_timer+0x30>)
 8002532:	2200      	movs	r2, #0
 8002534:	715a      	strb	r2, [r3, #5]
  time.ticks10ms = 0;
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <init_timer+0x30>)
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
  time.ticks100ms = 0;
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <init_timer+0x30>)
 800253e:	2200      	movs	r2, #0
 8002540:	705a      	strb	r2, [r3, #1]
  time.ticks500ms = 0;
 8002542:	4b03      	ldr	r3, [pc, #12]	; (8002550 <init_timer+0x30>)
 8002544:	2200      	movs	r2, #0
 8002546:	709a      	strb	r2, [r3, #2]

}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	200002f4 	.word	0x200002f4

08002554 <blocking_ms_delay>:
    __HAL_TIM_SET_COUNTER(&htim2,0);    // set the counter value a 0
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // Ticks are in us
}

void blocking_ms_delay(uint32_t ms)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
    uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);     // µs counter
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <blocking_ms_delay+0x3c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	60fb      	str	r3, [r7, #12]
    uint32_t wait  = ms * 1000U;                         // total µs
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800256a:	fb02 f303 	mul.w	r3, r2, r3
 800256e:	60bb      	str	r3, [r7, #8]

    // works across wrap-around because of unsigned subtraction
    while ((uint32_t)(__HAL_TIM_GET_COUNTER(&htim2) - start) < wait) {
 8002570:	e000      	b.n	8002574 <blocking_ms_delay+0x20>
        __NOP();
 8002572:	bf00      	nop
    while ((uint32_t)(__HAL_TIM_GET_COUNTER(&htim2) - start) < wait) {
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <blocking_ms_delay+0x3c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	429a      	cmp	r2, r3
 8002582:	d8f6      	bhi.n	8002572 <blocking_ms_delay+0x1e>
    }
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	20000354 	.word	0x20000354

08002594 <print_float>:
//     HAL_UART_Transmit(&huart1, (uint8_t*)buf, (uint16_t)n, HAL_MAX_DELAY);
//     const char crlf[] = "\r\n";
//     HAL_UART_Transmit(&huart1, (uint8_t*)crlf, 2, HAL_MAX_DELAY);
// }

void print_float (float number, uint8_t action) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af02      	add	r7, sp, #8
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
    char temp_buffer[16];        //Define the array that will hold the ASCII values
    uint8_t c = '\0';
 80025a0:	2300      	movs	r3, #0
 80025a2:	72fb      	strb	r3, [r7, #11]

    /* USE SPRINT F TO BUILD THE ARRAY OF ASCII CHARACTERS */
    // int chars = snprintf((char *)temp_buffer, "%.4f", (double)number);   //f tells the function we want to print a float value

    int chars = snprintf(temp_buffer, sizeof temp_buffer, "%.4f", (double)number);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7fd ffab 	bl	8000500 <__aeabi_f2d>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	f107 000c 	add.w	r0, r7, #12
 80025b2:	e9cd 2300 	strd	r2, r3, [sp]
 80025b6:	4a1b      	ldr	r2, [pc, #108]	; (8002624 <print_float+0x90>)
 80025b8:	2110      	movs	r1, #16
 80025ba:	f003 ff83 	bl	80064c4 <sniprintf>
 80025be:	61f8      	str	r0, [r7, #28]
    // if (chars >= (int)sizeof(temp_buffer)) 
    // {  
    //     chars = sizeof(temp_buffer) - 1;
    // }
    
    HAL_UART_Transmit(&huart1, (uint8_t *) temp_buffer, (uint16_t)chars, HAL_MAX_DELAY);
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	f107 010c 	add.w	r1, r7, #12
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
 80025cc:	4816      	ldr	r0, [pc, #88]	; (8002628 <print_float+0x94>)
 80025ce:	f002 fab7 	bl	8004b40 <HAL_UART_Transmit>

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d114      	bne.n	8002602 <print_float+0x6e>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80025d8:	230d      	movs	r3, #13
 80025da:	72fb      	strb	r3, [r7, #11]
 80025dc:	f107 010b 	add.w	r1, r7, #11
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295
 80025e4:	2201      	movs	r2, #1
 80025e6:	4810      	ldr	r0, [pc, #64]	; (8002628 <print_float+0x94>)
 80025e8:	f002 faaa 	bl	8004b40 <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80025ec:	230a      	movs	r3, #10
 80025ee:	72fb      	strb	r3, [r7, #11]
 80025f0:	f107 010b 	add.w	r1, r7, #11
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
 80025f8:	2201      	movs	r2, #1
 80025fa:	480b      	ldr	r0, [pc, #44]	; (8002628 <print_float+0x94>)
 80025fc:	f002 faa0 	bl	8004b40 <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}
 8002600:	e00c      	b.n	800261c <print_float+0x88>
    else if(action == CR) {
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d109      	bne.n	800261c <print_float+0x88>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002608:	230d      	movs	r3, #13
 800260a:	72fb      	strb	r3, [r7, #11]
 800260c:	f107 010b 	add.w	r1, r7, #11
 8002610:	f04f 33ff 	mov.w	r3, #4294967295
 8002614:	2201      	movs	r2, #1
 8002616:	4804      	ldr	r0, [pc, #16]	; (8002628 <print_float+0x94>)
 8002618:	f002 fa92 	bl	8004b40 <HAL_UART_Transmit>
}
 800261c:	bf00      	nop
 800261e:	3720      	adds	r7, #32
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	0800ab14 	.word	0x0800ab14
 8002628:	20000264 	.word	0x20000264

0800262c <print_unsigned_decimal>:
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}

void print_unsigned_decimal (uint16_t number, uint8_t action) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	460a      	mov	r2, r1
 8002636:	80fb      	strh	r3, [r7, #6]
 8002638:	4613      	mov	r3, r2
 800263a:	717b      	strb	r3, [r7, #5]
    char temphex[16];        //Define the array that will hold the ASCII values
    uint8_t c = '\r';
 800263c:	230d      	movs	r3, #13
 800263e:	72fb      	strb	r3, [r7, #11]
    uint8_t i;                
    uint8_t decimal_count;    //This is how many digits are written

    /* USE SPRINT F TO BUILD THE ARRAY OF ASCII CHARACTERS */
    decimal_count = (uint8_t)(sprintf(temphex, "%u", number)); //u tells the function we want an unsigned decimal number
 8002640:	88fa      	ldrh	r2, [r7, #6]
 8002642:	f107 030c 	add.w	r3, r7, #12
 8002646:	4920      	ldr	r1, [pc, #128]	; (80026c8 <print_unsigned_decimal+0x9c>)
 8002648:	4618      	mov	r0, r3
 800264a:	f003 ff6f 	bl	800652c <siprintf>
 800264e:	4603      	mov	r3, r0
 8002650:	77bb      	strb	r3, [r7, #30]

    for(i = 0; i < decimal_count; i++) {    //Print out the array of ASCII characters.
 8002652:	2300      	movs	r3, #0
 8002654:	77fb      	strb	r3, [r7, #31]
 8002656:	e00c      	b.n	8002672 <print_unsigned_decimal+0x46>
        // TXREG1 = (temphex[i]);
        HAL_UART_Transmit(&huart1,(uint8_t *) &temphex[i], (uint16_t) 0x01, HAL_MAX_DELAY);
 8002658:	7ffb      	ldrb	r3, [r7, #31]
 800265a:	f107 020c 	add.w	r2, r7, #12
 800265e:	18d1      	adds	r1, r2, r3
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	2201      	movs	r2, #1
 8002666:	4819      	ldr	r0, [pc, #100]	; (80026cc <print_unsigned_decimal+0xa0>)
 8002668:	f002 fa6a 	bl	8004b40 <HAL_UART_Transmit>
    for(i = 0; i < decimal_count; i++) {    //Print out the array of ASCII characters.
 800266c:	7ffb      	ldrb	r3, [r7, #31]
 800266e:	3301      	adds	r3, #1
 8002670:	77fb      	strb	r3, [r7, #31]
 8002672:	7ffa      	ldrb	r2, [r7, #31]
 8002674:	7fbb      	ldrb	r3, [r7, #30]
 8002676:	429a      	cmp	r2, r3
 8002678:	d3ee      	bcc.n	8002658 <print_unsigned_decimal+0x2c>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 800267a:	797b      	ldrb	r3, [r7, #5]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d112      	bne.n	80026a6 <print_unsigned_decimal+0x7a>
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002680:	f107 010b 	add.w	r1, r7, #11
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	2201      	movs	r2, #1
 800268a:	4810      	ldr	r0, [pc, #64]	; (80026cc <print_unsigned_decimal+0xa0>)
 800268c:	f002 fa58 	bl	8004b40 <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002690:	230a      	movs	r3, #10
 8002692:	72fb      	strb	r3, [r7, #11]
 8002694:	f107 010b 	add.w	r1, r7, #11
 8002698:	f04f 33ff 	mov.w	r3, #4294967295
 800269c:	2201      	movs	r2, #1
 800269e:	480b      	ldr	r0, [pc, #44]	; (80026cc <print_unsigned_decimal+0xa0>)
 80026a0:	f002 fa4e 	bl	8004b40 <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}
 80026a4:	e00c      	b.n	80026c0 <print_unsigned_decimal+0x94>
    else if(action == CR) {
 80026a6:	797b      	ldrb	r3, [r7, #5]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d109      	bne.n	80026c0 <print_unsigned_decimal+0x94>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80026ac:	230d      	movs	r3, #13
 80026ae:	72fb      	strb	r3, [r7, #11]
 80026b0:	f107 010b 	add.w	r1, r7, #11
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295
 80026b8:	2201      	movs	r2, #1
 80026ba:	4804      	ldr	r0, [pc, #16]	; (80026cc <print_unsigned_decimal+0xa0>)
 80026bc:	f002 fa40 	bl	8004b40 <HAL_UART_Transmit>
}
 80026c0:	bf00      	nop
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	0800ab1c 	.word	0x0800ab1c
 80026cc:	20000264 	.word	0x20000264

080026d0 <print_string>:


void print_string(const char * s, uint8_t action) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
    uint8_t c = '\0';
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]

    while(*s != '\0') {
 80026e0:	e009      	b.n	80026f6 <print_string+0x26>
        HAL_UART_Transmit(&huart1, (uint8_t *) s, (uint16_t) 0x01, HAL_MAX_DELAY);
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
 80026e6:	2201      	movs	r2, #1
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4819      	ldr	r0, [pc, #100]	; (8002750 <print_string+0x80>)
 80026ec:	f002 fa28 	bl	8004b40 <HAL_UART_Transmit>
        s++;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3301      	adds	r3, #1
 80026f4:	607b      	str	r3, [r7, #4]
    while(*s != '\0') {
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f1      	bne.n	80026e2 <print_string+0x12>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d114      	bne.n	800272e <print_string+0x5e>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002704:	230d      	movs	r3, #13
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	f107 010f 	add.w	r1, r7, #15
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
 8002710:	2201      	movs	r2, #1
 8002712:	480f      	ldr	r0, [pc, #60]	; (8002750 <print_string+0x80>)
 8002714:	f002 fa14 	bl	8004b40 <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002718:	230a      	movs	r3, #10
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	f107 010f 	add.w	r1, r7, #15
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
 8002724:	2201      	movs	r2, #1
 8002726:	480a      	ldr	r0, [pc, #40]	; (8002750 <print_string+0x80>)
 8002728:	f002 fa0a 	bl	8004b40 <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }

}
 800272c:	e00c      	b.n	8002748 <print_string+0x78>
    else if(action == CR) {
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d109      	bne.n	8002748 <print_string+0x78>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002734:	230d      	movs	r3, #13
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	f107 010f 	add.w	r1, r7, #15
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
 8002740:	2201      	movs	r2, #1
 8002742:	4803      	ldr	r0, [pc, #12]	; (8002750 <print_string+0x80>)
 8002744:	f002 f9fc 	bl	8004b40 <HAL_UART_Transmit>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000264 	.word	0x20000264

08002754 <clear_screen>:
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    print_string("[1J",0);        //Send the rest of the sequence to clear the screen

}

void clear_screen( void ) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
    char c = 0x1B;
 800275a:	231b      	movs	r3, #27
 800275c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 800275e:	1df9      	adds	r1, r7, #7
 8002760:	f04f 33ff 	mov.w	r3, #4294967295
 8002764:	2201      	movs	r2, #1
 8002766:	4805      	ldr	r0, [pc, #20]	; (800277c <clear_screen+0x28>)
 8002768:	f002 f9ea 	bl	8004b40 <HAL_UART_Transmit>
    print_string("[2J",0);        //Send the rest of the sequence to clear the screen
 800276c:	2100      	movs	r1, #0
 800276e:	4804      	ldr	r0, [pc, #16]	; (8002780 <clear_screen+0x2c>)
 8002770:	f7ff ffae 	bl	80026d0 <print_string>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000264 	.word	0x20000264
 8002780:	0800ab24 	.word	0x0800ab24

08002784 <cursor_top_left>:
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    print_string("[2K",0);        //Send the rest of the sequence to clear the screen

}

void cursor_top_left( void ) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
    char c = 0x1B;
 800278a:	231b      	movs	r3, #27
 800278c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 800278e:	1df9      	adds	r1, r7, #7
 8002790:	f04f 33ff 	mov.w	r3, #4294967295
 8002794:	2201      	movs	r2, #1
 8002796:	4805      	ldr	r0, [pc, #20]	; (80027ac <cursor_top_left+0x28>)
 8002798:	f002 f9d2 	bl	8004b40 <HAL_UART_Transmit>
    print_string("[H",0);     //Send the rest of the sequence to clear the screen
 800279c:	2100      	movs	r1, #0
 800279e:	4804      	ldr	r0, [pc, #16]	; (80027b0 <cursor_top_left+0x2c>)
 80027a0:	f7ff ff96 	bl	80026d0 <print_string>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000264 	.word	0x20000264
 80027b0:	0800ab2c 	.word	0x0800ab2c

080027b4 <reset_terminal>:

void reset_terminal( void ) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
    char c = 0x1B;
 80027ba:	231b      	movs	r3, #27
 80027bc:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80027be:	1df9      	adds	r1, r7, #7
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
 80027c4:	2201      	movs	r2, #1
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <reset_terminal+0x28>)
 80027c8:	f002 f9ba 	bl	8004b40 <HAL_UART_Transmit>
    print_string("c",0);      //Send the rest of the sequence to clear the screen
 80027cc:	2100      	movs	r1, #0
 80027ce:	4804      	ldr	r0, [pc, #16]	; (80027e0 <reset_terminal+0x2c>)
 80027d0:	f7ff ff7e 	bl	80026d0 <print_string>
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000264 	.word	0x20000264
 80027e0:	0800ab30 	.word	0x0800ab30

080027e4 <insert_line_feed>:

void insert_line_feed( uint8_t line_feeds ) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;         //Use this as a counter
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]
    char c = '\r';
 80027f2:	230d      	movs	r3, #13
 80027f4:	73bb      	strb	r3, [r7, #14]
    
    for(i = 0; i < line_feeds; i++){
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	e014      	b.n	8002826 <insert_line_feed+0x42>
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80027fc:	f107 010e 	add.w	r1, r7, #14
 8002800:	f04f 33ff 	mov.w	r3, #4294967295
 8002804:	2201      	movs	r2, #1
 8002806:	480c      	ldr	r0, [pc, #48]	; (8002838 <insert_line_feed+0x54>)
 8002808:	f002 f99a 	bl	8004b40 <HAL_UART_Transmit>
        c = '\n'; 
 800280c:	230a      	movs	r3, #10
 800280e:	73bb      	strb	r3, [r7, #14]
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002810:	f107 010e 	add.w	r1, r7, #14
 8002814:	f04f 33ff 	mov.w	r3, #4294967295
 8002818:	2201      	movs	r2, #1
 800281a:	4807      	ldr	r0, [pc, #28]	; (8002838 <insert_line_feed+0x54>)
 800281c:	f002 f990 	bl	8004b40 <HAL_UART_Transmit>
    for(i = 0; i < line_feeds; i++){
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	3301      	adds	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	429a      	cmp	r2, r3
 800282c:	d3e6      	bcc.n	80027fc <insert_line_feed+0x18>
    }
}
 800282e:	bf00      	nop
 8002830:	bf00      	nop
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000264 	.word	0x20000264

0800283c <insert_line_separator>:

void insert_line_separator( void ) {
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
    print_string("---------------------------------------", LF);
 8002840:	2101      	movs	r1, #1
 8002842:	4802      	ldr	r0, [pc, #8]	; (800284c <insert_line_separator+0x10>)
 8002844:	f7ff ff44 	bl	80026d0 <print_string>
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}
 800284c:	0800ab34 	.word	0x0800ab34

08002850 <reset_rx_buffer>:

void reset_rx_buffer( void ) {
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0

    uart.consumer_index = uart.producer_index = 0;                              //Reset the pointers
 8002854:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <reset_rx_buffer+0x30>)
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <reset_rx_buffer+0x30>)
 800285e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <reset_rx_buffer+0x30>)
 8002864:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    uart.byte_counter = 0;                                            //Reset the data counter
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <reset_rx_buffer+0x30>)
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    memset(uart.rxbuf,'\0',MAX_ELEMENTS);                           //Null out the buffer
 8002870:	2221      	movs	r2, #33	; 0x21
 8002872:	2100      	movs	r1, #0
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <reset_rx_buffer+0x30>)
 8002876:	f002 ffa7 	bl	80057c8 <memset>
} /* End of ResetRxBuffer */
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000234 	.word	0x20000234

08002884 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002884:	f7ff fe46 	bl	8002514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002888:	480b      	ldr	r0, [pc, #44]	; (80028b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800288a:	490c      	ldr	r1, [pc, #48]	; (80028bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800288c:	4a0c      	ldr	r2, [pc, #48]	; (80028c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800288e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002890:	e002      	b.n	8002898 <LoopCopyDataInit>

08002892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002896:	3304      	adds	r3, #4

08002898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800289a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800289c:	d3f9      	bcc.n	8002892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028a0:	4c09      	ldr	r4, [pc, #36]	; (80028c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a4:	e001      	b.n	80028aa <LoopFillZerobss>

080028a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a8:	3204      	adds	r2, #4

080028aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028ac:	d3fb      	bcc.n	80028a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80028ae:	f002 ff67 	bl	8005780 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028b2:	f7fe ffe5 	bl	8001880 <main>
  bx lr
 80028b6:	4770      	bx	lr
  ldr r0, =_sdata
 80028b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028bc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80028c0:	0800b07c 	.word	0x0800b07c
  ldr r2, =_sbss
 80028c4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80028c8:	200003b0 	.word	0x200003b0

080028cc <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028cc:	e7fe      	b.n	80028cc <ADC1_2_IRQHandler>
	...

080028d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <HAL_Init+0x28>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <HAL_Init+0x28>)
 80028da:	f043 0310 	orr.w	r3, r3, #16
 80028de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e0:	2003      	movs	r0, #3
 80028e2:	f000 f923 	bl	8002b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f000 f808 	bl	80028fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028ec:	f7ff fbfc 	bl	80020e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40022000 	.word	0x40022000

080028fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_InitTick+0x54>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_InitTick+0x58>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	4619      	mov	r1, r3
 800290e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002912:	fbb3 f3f1 	udiv	r3, r3, r1
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f93b 	bl	8002b96 <HAL_SYSTICK_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e00e      	b.n	8002948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b0f      	cmp	r3, #15
 800292e:	d80a      	bhi.n	8002946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002930:	2200      	movs	r2, #0
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	f000 f903 	bl	8002b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800293c:	4a06      	ldr	r2, [pc, #24]	; (8002958 <HAL_InitTick+0x5c>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	e000      	b.n	8002948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000000 	.word	0x20000000
 8002954:	20000008 	.word	0x20000008
 8002958:	20000004 	.word	0x20000004

0800295c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_IncTick+0x1c>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_IncTick+0x20>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4413      	add	r3, r2
 800296c:	4a03      	ldr	r2, [pc, #12]	; (800297c <HAL_IncTick+0x20>)
 800296e:	6013      	str	r3, [r2, #0]
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	20000008 	.word	0x20000008
 800297c:	2000039c 	.word	0x2000039c

08002980 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return uwTick;
 8002984:	4b02      	ldr	r3, [pc, #8]	; (8002990 <HAL_GetTick+0x10>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	2000039c 	.word	0x2000039c

08002994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b0:	4013      	ands	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029c6:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	60d3      	str	r3, [r2, #12]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <__NVIC_GetPriorityGrouping+0x18>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	0a1b      	lsrs	r3, r3, #8
 80029e6:	f003 0307 	and.w	r3, r3, #7
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	db0b      	blt.n	8002a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f003 021f 	and.w	r2, r3, #31
 8002a10:	4906      	ldr	r1, [pc, #24]	; (8002a2c <__NVIC_EnableIRQ+0x34>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	2001      	movs	r0, #1
 8002a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	e000e100 	.word	0xe000e100

08002a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	6039      	str	r1, [r7, #0]
 8002a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	db0a      	blt.n	8002a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	490c      	ldr	r1, [pc, #48]	; (8002a7c <__NVIC_SetPriority+0x4c>)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	0112      	lsls	r2, r2, #4
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	440b      	add	r3, r1
 8002a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a58:	e00a      	b.n	8002a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4908      	ldr	r1, [pc, #32]	; (8002a80 <__NVIC_SetPriority+0x50>)
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	3b04      	subs	r3, #4
 8002a68:	0112      	lsls	r2, r2, #4
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	761a      	strb	r2, [r3, #24]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000e100 	.word	0xe000e100
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f1c3 0307 	rsb	r3, r3, #7
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	bf28      	it	cs
 8002aa2:	2304      	movcs	r3, #4
 8002aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	2b06      	cmp	r3, #6
 8002aac:	d902      	bls.n	8002ab4 <NVIC_EncodePriority+0x30>
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3b03      	subs	r3, #3
 8002ab2:	e000      	b.n	8002ab6 <NVIC_EncodePriority+0x32>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	43d9      	mvns	r1, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	4313      	orrs	r3, r2
         );
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3724      	adds	r7, #36	; 0x24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af8:	d301      	bcc.n	8002afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00f      	b.n	8002b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002afe:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <SysTick_Config+0x40>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b06:	210f      	movs	r1, #15
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0c:	f7ff ff90 	bl	8002a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <SysTick_Config+0x40>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b16:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <SysTick_Config+0x40>)
 8002b18:	2207      	movs	r2, #7
 8002b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	e000e010 	.word	0xe000e010

08002b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ff2d 	bl	8002994 <__NVIC_SetPriorityGrouping>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	4603      	mov	r3, r0
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b54:	f7ff ff42 	bl	80029dc <__NVIC_GetPriorityGrouping>
 8002b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	6978      	ldr	r0, [r7, #20]
 8002b60:	f7ff ff90 	bl	8002a84 <NVIC_EncodePriority>
 8002b64:	4602      	mov	r2, r0
 8002b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff5f 	bl	8002a30 <__NVIC_SetPriority>
}
 8002b72:	bf00      	nop
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff35 	bl	80029f8 <__NVIC_EnableIRQ>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffa2 	bl	8002ae8 <SysTick_Config>
 8002ba4:	4603      	mov	r3, r0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d008      	beq.n	8002bd8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2204      	movs	r2, #4
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e020      	b.n	8002c1a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 020e 	bic.w	r2, r2, #14
 8002be6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c00:	2101      	movs	r1, #1
 8002c02:	fa01 f202 	lsl.w	r2, r1, r2
 8002c06:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d005      	beq.n	8002c48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2204      	movs	r2, #4
 8002c40:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
 8002c46:	e0d6      	b.n	8002df6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 020e 	bic.w	r2, r2, #14
 8002c56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0201 	bic.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b64      	ldr	r3, [pc, #400]	; (8002e00 <HAL_DMA_Abort_IT+0x1dc>)
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d958      	bls.n	8002d26 <HAL_DMA_Abort_IT+0x102>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a62      	ldr	r2, [pc, #392]	; (8002e04 <HAL_DMA_Abort_IT+0x1e0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d04f      	beq.n	8002d1e <HAL_DMA_Abort_IT+0xfa>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a61      	ldr	r2, [pc, #388]	; (8002e08 <HAL_DMA_Abort_IT+0x1e4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d048      	beq.n	8002d1a <HAL_DMA_Abort_IT+0xf6>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5f      	ldr	r2, [pc, #380]	; (8002e0c <HAL_DMA_Abort_IT+0x1e8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d040      	beq.n	8002d14 <HAL_DMA_Abort_IT+0xf0>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a5e      	ldr	r2, [pc, #376]	; (8002e10 <HAL_DMA_Abort_IT+0x1ec>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d038      	beq.n	8002d0e <HAL_DMA_Abort_IT+0xea>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a5c      	ldr	r2, [pc, #368]	; (8002e14 <HAL_DMA_Abort_IT+0x1f0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d030      	beq.n	8002d08 <HAL_DMA_Abort_IT+0xe4>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a5b      	ldr	r2, [pc, #364]	; (8002e18 <HAL_DMA_Abort_IT+0x1f4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d028      	beq.n	8002d02 <HAL_DMA_Abort_IT+0xde>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_DMA_Abort_IT+0x1dc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d020      	beq.n	8002cfc <HAL_DMA_Abort_IT+0xd8>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a57      	ldr	r2, [pc, #348]	; (8002e1c <HAL_DMA_Abort_IT+0x1f8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d019      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xd4>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a55      	ldr	r2, [pc, #340]	; (8002e20 <HAL_DMA_Abort_IT+0x1fc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d012      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xd0>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a54      	ldr	r2, [pc, #336]	; (8002e24 <HAL_DMA_Abort_IT+0x200>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00a      	beq.n	8002cee <HAL_DMA_Abort_IT+0xca>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_DMA_Abort_IT+0x204>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d102      	bne.n	8002ce8 <HAL_DMA_Abort_IT+0xc4>
 8002ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce6:	e01b      	b.n	8002d20 <HAL_DMA_Abort_IT+0xfc>
 8002ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cec:	e018      	b.n	8002d20 <HAL_DMA_Abort_IT+0xfc>
 8002cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cf2:	e015      	b.n	8002d20 <HAL_DMA_Abort_IT+0xfc>
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	e013      	b.n	8002d20 <HAL_DMA_Abort_IT+0xfc>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e011      	b.n	8002d20 <HAL_DMA_Abort_IT+0xfc>
 8002cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d00:	e00e      	b.n	8002d20 <HAL_DMA_Abort_IT+0xfc>
 8002d02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d06:	e00b      	b.n	8002d20 <HAL_DMA_Abort_IT+0xfc>
 8002d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d0c:	e008      	b.n	8002d20 <HAL_DMA_Abort_IT+0xfc>
 8002d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d12:	e005      	b.n	8002d20 <HAL_DMA_Abort_IT+0xfc>
 8002d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d18:	e002      	b.n	8002d20 <HAL_DMA_Abort_IT+0xfc>
 8002d1a:	2310      	movs	r3, #16
 8002d1c:	e000      	b.n	8002d20 <HAL_DMA_Abort_IT+0xfc>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	4a42      	ldr	r2, [pc, #264]	; (8002e2c <HAL_DMA_Abort_IT+0x208>)
 8002d22:	6053      	str	r3, [r2, #4]
 8002d24:	e057      	b.n	8002dd6 <HAL_DMA_Abort_IT+0x1b2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a36      	ldr	r2, [pc, #216]	; (8002e04 <HAL_DMA_Abort_IT+0x1e0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d04f      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x1ac>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a34      	ldr	r2, [pc, #208]	; (8002e08 <HAL_DMA_Abort_IT+0x1e4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d048      	beq.n	8002dcc <HAL_DMA_Abort_IT+0x1a8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a33      	ldr	r2, [pc, #204]	; (8002e0c <HAL_DMA_Abort_IT+0x1e8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d040      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x1a2>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a31      	ldr	r2, [pc, #196]	; (8002e10 <HAL_DMA_Abort_IT+0x1ec>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d038      	beq.n	8002dc0 <HAL_DMA_Abort_IT+0x19c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a30      	ldr	r2, [pc, #192]	; (8002e14 <HAL_DMA_Abort_IT+0x1f0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d030      	beq.n	8002dba <HAL_DMA_Abort_IT+0x196>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2e      	ldr	r2, [pc, #184]	; (8002e18 <HAL_DMA_Abort_IT+0x1f4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d028      	beq.n	8002db4 <HAL_DMA_Abort_IT+0x190>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <HAL_DMA_Abort_IT+0x1dc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d020      	beq.n	8002dae <HAL_DMA_Abort_IT+0x18a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2a      	ldr	r2, [pc, #168]	; (8002e1c <HAL_DMA_Abort_IT+0x1f8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d019      	beq.n	8002daa <HAL_DMA_Abort_IT+0x186>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <HAL_DMA_Abort_IT+0x1fc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d012      	beq.n	8002da6 <HAL_DMA_Abort_IT+0x182>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <HAL_DMA_Abort_IT+0x200>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00a      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x17c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <HAL_DMA_Abort_IT+0x204>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d102      	bne.n	8002d9a <HAL_DMA_Abort_IT+0x176>
 8002d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d98:	e01b      	b.n	8002dd2 <HAL_DMA_Abort_IT+0x1ae>
 8002d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d9e:	e018      	b.n	8002dd2 <HAL_DMA_Abort_IT+0x1ae>
 8002da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002da4:	e015      	b.n	8002dd2 <HAL_DMA_Abort_IT+0x1ae>
 8002da6:	2310      	movs	r3, #16
 8002da8:	e013      	b.n	8002dd2 <HAL_DMA_Abort_IT+0x1ae>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e011      	b.n	8002dd2 <HAL_DMA_Abort_IT+0x1ae>
 8002dae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db2:	e00e      	b.n	8002dd2 <HAL_DMA_Abort_IT+0x1ae>
 8002db4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002db8:	e00b      	b.n	8002dd2 <HAL_DMA_Abort_IT+0x1ae>
 8002dba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dbe:	e008      	b.n	8002dd2 <HAL_DMA_Abort_IT+0x1ae>
 8002dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc4:	e005      	b.n	8002dd2 <HAL_DMA_Abort_IT+0x1ae>
 8002dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dca:	e002      	b.n	8002dd2 <HAL_DMA_Abort_IT+0x1ae>
 8002dcc:	2310      	movs	r3, #16
 8002dce:	e000      	b.n	8002dd2 <HAL_DMA_Abort_IT+0x1ae>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	4a17      	ldr	r2, [pc, #92]	; (8002e30 <HAL_DMA_Abort_IT+0x20c>)
 8002dd4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
    } 
  }
  return status;
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40020080 	.word	0x40020080
 8002e04:	40020008 	.word	0x40020008
 8002e08:	4002001c 	.word	0x4002001c
 8002e0c:	40020030 	.word	0x40020030
 8002e10:	40020044 	.word	0x40020044
 8002e14:	40020058 	.word	0x40020058
 8002e18:	4002006c 	.word	0x4002006c
 8002e1c:	40020408 	.word	0x40020408
 8002e20:	4002041c 	.word	0x4002041c
 8002e24:	40020430 	.word	0x40020430
 8002e28:	40020444 	.word	0x40020444
 8002e2c:	40020400 	.word	0x40020400
 8002e30:	40020000 	.word	0x40020000

08002e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b08b      	sub	sp, #44	; 0x2c
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e42:	2300      	movs	r3, #0
 8002e44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e46:	e169      	b.n	800311c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e48:	2201      	movs	r2, #1
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	f040 8158 	bne.w	8003116 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a9a      	ldr	r2, [pc, #616]	; (80030d4 <HAL_GPIO_Init+0x2a0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d05e      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002e70:	4a98      	ldr	r2, [pc, #608]	; (80030d4 <HAL_GPIO_Init+0x2a0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d875      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002e76:	4a98      	ldr	r2, [pc, #608]	; (80030d8 <HAL_GPIO_Init+0x2a4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d058      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002e7c:	4a96      	ldr	r2, [pc, #600]	; (80030d8 <HAL_GPIO_Init+0x2a4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d86f      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002e82:	4a96      	ldr	r2, [pc, #600]	; (80030dc <HAL_GPIO_Init+0x2a8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d052      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002e88:	4a94      	ldr	r2, [pc, #592]	; (80030dc <HAL_GPIO_Init+0x2a8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d869      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002e8e:	4a94      	ldr	r2, [pc, #592]	; (80030e0 <HAL_GPIO_Init+0x2ac>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d04c      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002e94:	4a92      	ldr	r2, [pc, #584]	; (80030e0 <HAL_GPIO_Init+0x2ac>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d863      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002e9a:	4a92      	ldr	r2, [pc, #584]	; (80030e4 <HAL_GPIO_Init+0x2b0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d046      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002ea0:	4a90      	ldr	r2, [pc, #576]	; (80030e4 <HAL_GPIO_Init+0x2b0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d85d      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002ea6:	2b12      	cmp	r3, #18
 8002ea8:	d82a      	bhi.n	8002f00 <HAL_GPIO_Init+0xcc>
 8002eaa:	2b12      	cmp	r3, #18
 8002eac:	d859      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002eae:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <HAL_GPIO_Init+0x80>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002f2f 	.word	0x08002f2f
 8002eb8:	08002f09 	.word	0x08002f09
 8002ebc:	08002f1b 	.word	0x08002f1b
 8002ec0:	08002f5d 	.word	0x08002f5d
 8002ec4:	08002f63 	.word	0x08002f63
 8002ec8:	08002f63 	.word	0x08002f63
 8002ecc:	08002f63 	.word	0x08002f63
 8002ed0:	08002f63 	.word	0x08002f63
 8002ed4:	08002f63 	.word	0x08002f63
 8002ed8:	08002f63 	.word	0x08002f63
 8002edc:	08002f63 	.word	0x08002f63
 8002ee0:	08002f63 	.word	0x08002f63
 8002ee4:	08002f63 	.word	0x08002f63
 8002ee8:	08002f63 	.word	0x08002f63
 8002eec:	08002f63 	.word	0x08002f63
 8002ef0:	08002f63 	.word	0x08002f63
 8002ef4:	08002f63 	.word	0x08002f63
 8002ef8:	08002f11 	.word	0x08002f11
 8002efc:	08002f25 	.word	0x08002f25
 8002f00:	4a79      	ldr	r2, [pc, #484]	; (80030e8 <HAL_GPIO_Init+0x2b4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f06:	e02c      	b.n	8002f62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	623b      	str	r3, [r7, #32]
          break;
 8002f0e:	e029      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	3304      	adds	r3, #4
 8002f16:	623b      	str	r3, [r7, #32]
          break;
 8002f18:	e024      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	3308      	adds	r3, #8
 8002f20:	623b      	str	r3, [r7, #32]
          break;
 8002f22:	e01f      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	623b      	str	r3, [r7, #32]
          break;
 8002f2c:	e01a      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d102      	bne.n	8002f3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f36:	2304      	movs	r3, #4
 8002f38:	623b      	str	r3, [r7, #32]
          break;
 8002f3a:	e013      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d105      	bne.n	8002f50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f44:	2308      	movs	r3, #8
 8002f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	611a      	str	r2, [r3, #16]
          break;
 8002f4e:	e009      	b.n	8002f64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f50:	2308      	movs	r3, #8
 8002f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	615a      	str	r2, [r3, #20]
          break;
 8002f5a:	e003      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	623b      	str	r3, [r7, #32]
          break;
 8002f60:	e000      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          break;
 8002f62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2bff      	cmp	r3, #255	; 0xff
 8002f68:	d801      	bhi.n	8002f6e <HAL_GPIO_Init+0x13a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	e001      	b.n	8002f72 <HAL_GPIO_Init+0x13e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3304      	adds	r3, #4
 8002f72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2bff      	cmp	r3, #255	; 0xff
 8002f78:	d802      	bhi.n	8002f80 <HAL_GPIO_Init+0x14c>
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	e002      	b.n	8002f86 <HAL_GPIO_Init+0x152>
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	3b08      	subs	r3, #8
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	210f      	movs	r1, #15
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	401a      	ands	r2, r3
 8002f98:	6a39      	ldr	r1, [r7, #32]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80b1 	beq.w	8003116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fb4:	4b4d      	ldr	r3, [pc, #308]	; (80030ec <HAL_GPIO_Init+0x2b8>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	4a4c      	ldr	r2, [pc, #304]	; (80030ec <HAL_GPIO_Init+0x2b8>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6193      	str	r3, [r2, #24]
 8002fc0:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_GPIO_Init+0x2b8>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fcc:	4a48      	ldr	r2, [pc, #288]	; (80030f0 <HAL_GPIO_Init+0x2bc>)
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4013      	ands	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a40      	ldr	r2, [pc, #256]	; (80030f4 <HAL_GPIO_Init+0x2c0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <HAL_GPIO_Init+0x1ec>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3f      	ldr	r2, [pc, #252]	; (80030f8 <HAL_GPIO_Init+0x2c4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00d      	beq.n	800301c <HAL_GPIO_Init+0x1e8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a3e      	ldr	r2, [pc, #248]	; (80030fc <HAL_GPIO_Init+0x2c8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <HAL_GPIO_Init+0x1e4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a3d      	ldr	r2, [pc, #244]	; (8003100 <HAL_GPIO_Init+0x2cc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d101      	bne.n	8003014 <HAL_GPIO_Init+0x1e0>
 8003010:	2303      	movs	r3, #3
 8003012:	e006      	b.n	8003022 <HAL_GPIO_Init+0x1ee>
 8003014:	2304      	movs	r3, #4
 8003016:	e004      	b.n	8003022 <HAL_GPIO_Init+0x1ee>
 8003018:	2302      	movs	r3, #2
 800301a:	e002      	b.n	8003022 <HAL_GPIO_Init+0x1ee>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_GPIO_Init+0x1ee>
 8003020:	2300      	movs	r3, #0
 8003022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003024:	f002 0203 	and.w	r2, r2, #3
 8003028:	0092      	lsls	r2, r2, #2
 800302a:	4093      	lsls	r3, r2
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003032:	492f      	ldr	r1, [pc, #188]	; (80030f0 <HAL_GPIO_Init+0x2bc>)
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	089b      	lsrs	r3, r3, #2
 8003038:	3302      	adds	r3, #2
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d006      	beq.n	800305a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800304c:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	492c      	ldr	r1, [pc, #176]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	608b      	str	r3, [r1, #8]
 8003058:	e006      	b.n	8003068 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800305a:	4b2a      	ldr	r3, [pc, #168]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	43db      	mvns	r3, r3
 8003062:	4928      	ldr	r1, [pc, #160]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 8003064:	4013      	ands	r3, r2
 8003066:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d006      	beq.n	8003082 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003074:	4b23      	ldr	r3, [pc, #140]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	4922      	ldr	r1, [pc, #136]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	60cb      	str	r3, [r1, #12]
 8003080:	e006      	b.n	8003090 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	43db      	mvns	r3, r3
 800308a:	491e      	ldr	r1, [pc, #120]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 800308c:	4013      	ands	r3, r2
 800308e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4918      	ldr	r1, [pc, #96]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
 80030a8:	e006      	b.n	80030b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	4914      	ldr	r1, [pc, #80]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d021      	beq.n	8003108 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	490e      	ldr	r1, [pc, #56]	; (8003104 <HAL_GPIO_Init+0x2d0>)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]
 80030d0:	e021      	b.n	8003116 <HAL_GPIO_Init+0x2e2>
 80030d2:	bf00      	nop
 80030d4:	10320000 	.word	0x10320000
 80030d8:	10310000 	.word	0x10310000
 80030dc:	10220000 	.word	0x10220000
 80030e0:	10210000 	.word	0x10210000
 80030e4:	10120000 	.word	0x10120000
 80030e8:	10110000 	.word	0x10110000
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40010000 	.word	0x40010000
 80030f4:	40010800 	.word	0x40010800
 80030f8:	40010c00 	.word	0x40010c00
 80030fc:	40011000 	.word	0x40011000
 8003100:	40011400 	.word	0x40011400
 8003104:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_GPIO_Init+0x304>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	43db      	mvns	r3, r3
 8003110:	4909      	ldr	r1, [pc, #36]	; (8003138 <HAL_GPIO_Init+0x304>)
 8003112:	4013      	ands	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	3301      	adds	r3, #1
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	f47f ae8e 	bne.w	8002e48 <HAL_GPIO_Init+0x14>
  }
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	372c      	adds	r7, #44	; 0x2c
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	40010400 	.word	0x40010400

0800313c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	887b      	ldrh	r3, [r7, #2]
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	e001      	b.n	800315e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	807b      	strh	r3, [r7, #2]
 8003176:	4613      	mov	r3, r2
 8003178:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800317a:	787b      	ldrb	r3, [r7, #1]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003180:	887a      	ldrh	r2, [r7, #2]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003186:	e003      	b.n	8003190 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003188:	887b      	ldrh	r3, [r7, #2]
 800318a:	041a      	lsls	r2, r3, #16
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	611a      	str	r2, [r3, #16]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800319a:	b480      	push	{r7}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031ac:	887a      	ldrh	r2, [r7, #2]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4013      	ands	r3, r2
 80031b2:	041a      	lsls	r2, r3, #16
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	400b      	ands	r3, r1
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	611a      	str	r2, [r3, #16]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e304      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8087 	beq.w	80032fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ec:	4b92      	ldr	r3, [pc, #584]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d00c      	beq.n	8003212 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031f8:	4b8f      	ldr	r3, [pc, #572]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b08      	cmp	r3, #8
 8003202:	d112      	bne.n	800322a <HAL_RCC_OscConfig+0x5e>
 8003204:	4b8c      	ldr	r3, [pc, #560]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003210:	d10b      	bne.n	800322a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003212:	4b89      	ldr	r3, [pc, #548]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d06c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x12c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d168      	bne.n	80032f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e2de      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x76>
 8003234:	4b80      	ldr	r3, [pc, #512]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a7f      	ldr	r2, [pc, #508]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800323a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e02e      	b.n	80032a0 <HAL_RCC_OscConfig+0xd4>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x98>
 800324a:	4b7b      	ldr	r3, [pc, #492]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a7a      	ldr	r2, [pc, #488]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b78      	ldr	r3, [pc, #480]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a77      	ldr	r2, [pc, #476]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800325c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e01d      	b.n	80032a0 <HAL_RCC_OscConfig+0xd4>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0xbc>
 800326e:	4b72      	ldr	r3, [pc, #456]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a71      	ldr	r2, [pc, #452]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4b6f      	ldr	r3, [pc, #444]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6e      	ldr	r2, [pc, #440]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e00b      	b.n	80032a0 <HAL_RCC_OscConfig+0xd4>
 8003288:	4b6b      	ldr	r3, [pc, #428]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a6a      	ldr	r2, [pc, #424]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800328e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b68      	ldr	r3, [pc, #416]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a67      	ldr	r2, [pc, #412]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800329a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7ff fb6a 	bl	8002980 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7ff fb66 	bl	8002980 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e292      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b5d      	ldr	r3, [pc, #372]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0xe4>
 80032ce:	e014      	b.n	80032fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7ff fb56 	bl	8002980 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7ff fb52 	bl	8002980 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e27e      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	4b53      	ldr	r3, [pc, #332]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x10c>
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d063      	beq.n	80033ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003306:	4b4c      	ldr	r3, [pc, #304]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003312:	4b49      	ldr	r3, [pc, #292]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b08      	cmp	r3, #8
 800331c:	d11c      	bne.n	8003358 <HAL_RCC_OscConfig+0x18c>
 800331e:	4b46      	ldr	r3, [pc, #280]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d116      	bne.n	8003358 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	4b43      	ldr	r3, [pc, #268]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_RCC_OscConfig+0x176>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e252      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4939      	ldr	r1, [pc, #228]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003356:	e03a      	b.n	80033ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d020      	beq.n	80033a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003360:	4b36      	ldr	r3, [pc, #216]	; (800343c <HAL_RCC_OscConfig+0x270>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7ff fb0b 	bl	8002980 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336e:	f7ff fb07 	bl	8002980 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e233      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338c:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4927      	ldr	r1, [pc, #156]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
 80033a0:	e015      	b.n	80033ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_RCC_OscConfig+0x270>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7ff faea 	bl	8002980 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b0:	f7ff fae6 	bl	8002980 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e212      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d03a      	beq.n	8003450 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d019      	beq.n	8003416 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033e2:	4b17      	ldr	r3, [pc, #92]	; (8003440 <HAL_RCC_OscConfig+0x274>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e8:	f7ff faca 	bl	8002980 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f0:	f7ff fac6 	bl	8002980 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1f2      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800340e:	2001      	movs	r0, #1
 8003410:	f000 fbe4 	bl	8003bdc <RCC_Delay>
 8003414:	e01c      	b.n	8003450 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <HAL_RCC_OscConfig+0x274>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341c:	f7ff fab0 	bl	8002980 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003422:	e00f      	b.n	8003444 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003424:	f7ff faac 	bl	8002980 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d908      	bls.n	8003444 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e1d8      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	42420000 	.word	0x42420000
 8003440:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003444:	4b9b      	ldr	r3, [pc, #620]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e9      	bne.n	8003424 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80a6 	beq.w	80035aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003462:	4b94      	ldr	r3, [pc, #592]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10d      	bne.n	800348a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	4b91      	ldr	r3, [pc, #580]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4a90      	ldr	r2, [pc, #576]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003478:	61d3      	str	r3, [r2, #28]
 800347a:	4b8e      	ldr	r3, [pc, #568]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003486:	2301      	movs	r3, #1
 8003488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348a:	4b8b      	ldr	r3, [pc, #556]	; (80036b8 <HAL_RCC_OscConfig+0x4ec>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d118      	bne.n	80034c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003496:	4b88      	ldr	r3, [pc, #544]	; (80036b8 <HAL_RCC_OscConfig+0x4ec>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a87      	ldr	r2, [pc, #540]	; (80036b8 <HAL_RCC_OscConfig+0x4ec>)
 800349c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a2:	f7ff fa6d 	bl	8002980 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034aa:	f7ff fa69 	bl	8002980 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b64      	cmp	r3, #100	; 0x64
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e195      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034bc:	4b7e      	ldr	r3, [pc, #504]	; (80036b8 <HAL_RCC_OscConfig+0x4ec>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x312>
 80034d0:	4b78      	ldr	r3, [pc, #480]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4a77      	ldr	r2, [pc, #476]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6213      	str	r3, [r2, #32]
 80034dc:	e02d      	b.n	800353a <HAL_RCC_OscConfig+0x36e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x334>
 80034e6:	4b73      	ldr	r3, [pc, #460]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a72      	ldr	r2, [pc, #456]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6213      	str	r3, [r2, #32]
 80034f2:	4b70      	ldr	r3, [pc, #448]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4a6f      	ldr	r2, [pc, #444]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	6213      	str	r3, [r2, #32]
 80034fe:	e01c      	b.n	800353a <HAL_RCC_OscConfig+0x36e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d10c      	bne.n	8003522 <HAL_RCC_OscConfig+0x356>
 8003508:	4b6a      	ldr	r3, [pc, #424]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4a69      	ldr	r2, [pc, #420]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 800350e:	f043 0304 	orr.w	r3, r3, #4
 8003512:	6213      	str	r3, [r2, #32]
 8003514:	4b67      	ldr	r3, [pc, #412]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a66      	ldr	r2, [pc, #408]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	e00b      	b.n	800353a <HAL_RCC_OscConfig+0x36e>
 8003522:	4b64      	ldr	r3, [pc, #400]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4a63      	ldr	r2, [pc, #396]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6213      	str	r3, [r2, #32]
 800352e:	4b61      	ldr	r3, [pc, #388]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4a60      	ldr	r2, [pc, #384]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003534:	f023 0304 	bic.w	r3, r3, #4
 8003538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d015      	beq.n	800356e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003542:	f7ff fa1d 	bl	8002980 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7ff fa19 	bl	8002980 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e143      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	4b54      	ldr	r3, [pc, #336]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ee      	beq.n	800354a <HAL_RCC_OscConfig+0x37e>
 800356c:	e014      	b.n	8003598 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356e:	f7ff fa07 	bl	8002980 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7ff fa03 	bl	8002980 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	; 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e12d      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358c:	4b49      	ldr	r3, [pc, #292]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ee      	bne.n	8003576 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d105      	bne.n	80035aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359e:	4b45      	ldr	r3, [pc, #276]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	4a44      	ldr	r2, [pc, #272]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80035a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 808c 	beq.w	80036cc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80035b4:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d10e      	bne.n	80035e0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80035c2:	4b3c      	ldr	r3, [pc, #240]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d108      	bne.n	80035e0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80035ce:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80035d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e103      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d14e      	bne.n	8003686 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80035e8:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d009      	beq.n	8003608 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80035f4:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0ef      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003608:	4b2c      	ldr	r3, [pc, #176]	; (80036bc <HAL_RCC_OscConfig+0x4f0>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7ff f9b7 	bl	8002980 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003616:	f7ff f9b3 	bl	8002980 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b64      	cmp	r3, #100	; 0x64
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e0df      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003628:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f0      	bne.n	8003616 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003634:	4b1f      	ldr	r3, [pc, #124]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003640:	491c      	ldr	r1, [pc, #112]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003642:	4313      	orrs	r3, r2
 8003644:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003646:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	4918      	ldr	r1, [pc, #96]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003654:	4313      	orrs	r3, r2
 8003656:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003658:	4b18      	ldr	r3, [pc, #96]	; (80036bc <HAL_RCC_OscConfig+0x4f0>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365e:	f7ff f98f 	bl	8002980 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003666:	f7ff f98b 	bl	8002980 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b64      	cmp	r3, #100	; 0x64
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e0b7      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003678:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x49a>
 8003684:	e022      	b.n	80036cc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 800368c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003690:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_RCC_OscConfig+0x4f0>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7ff f972 	bl	8002980 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800369e:	e00f      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80036a0:	f7ff f96e 	bl	8002980 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d908      	bls.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e09a      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40007000 	.word	0x40007000
 80036bc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80036c0:	4b4b      	ldr	r3, [pc, #300]	; (80037f0 <HAL_RCC_OscConfig+0x624>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e9      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8088 	beq.w	80037e6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d6:	4b46      	ldr	r3, [pc, #280]	; (80037f0 <HAL_RCC_OscConfig+0x624>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d068      	beq.n	80037b4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d14d      	bne.n	8003786 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ea:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <HAL_RCC_OscConfig+0x628>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7ff f946 	bl	8002980 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f8:	f7ff f942 	bl	8002980 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e06e      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370a:	4b39      	ldr	r3, [pc, #228]	; (80037f0 <HAL_RCC_OscConfig+0x624>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371e:	d10f      	bne.n	8003740 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003720:	4b33      	ldr	r3, [pc, #204]	; (80037f0 <HAL_RCC_OscConfig+0x624>)
 8003722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4931      	ldr	r1, [pc, #196]	; (80037f0 <HAL_RCC_OscConfig+0x624>)
 800372a:	4313      	orrs	r3, r2
 800372c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800372e:	4b30      	ldr	r3, [pc, #192]	; (80037f0 <HAL_RCC_OscConfig+0x624>)
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	f023 020f 	bic.w	r2, r3, #15
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	492d      	ldr	r1, [pc, #180]	; (80037f0 <HAL_RCC_OscConfig+0x624>)
 800373c:	4313      	orrs	r3, r2
 800373e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003740:	4b2b      	ldr	r3, [pc, #172]	; (80037f0 <HAL_RCC_OscConfig+0x624>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	430b      	orrs	r3, r1
 8003752:	4927      	ldr	r1, [pc, #156]	; (80037f0 <HAL_RCC_OscConfig+0x624>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <HAL_RCC_OscConfig+0x628>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7ff f90f 	bl	8002980 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003766:	f7ff f90b 	bl	8002980 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e037      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003778:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <HAL_RCC_OscConfig+0x624>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x59a>
 8003784:	e02f      	b.n	80037e6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x628>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7ff f8f8 	bl	8002980 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7ff f8f4 	bl	8002980 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e020      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_RCC_OscConfig+0x624>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x5c8>
 80037b2:	e018      	b.n	80037e6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e013      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_OscConfig+0x624>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d001      	beq.n	80037e6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000
 80037f4:	42420060 	.word	0x42420060

080037f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0d0      	b.n	80039ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b6a      	ldr	r3, [pc, #424]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d910      	bls.n	800383c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b67      	ldr	r3, [pc, #412]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 0207 	bic.w	r2, r3, #7
 8003822:	4965      	ldr	r1, [pc, #404]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b63      	ldr	r3, [pc, #396]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0b8      	b.n	80039ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d020      	beq.n	800388a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003854:	4b59      	ldr	r3, [pc, #356]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a58      	ldr	r2, [pc, #352]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800385e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800386c:	4b53      	ldr	r3, [pc, #332]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4a52      	ldr	r2, [pc, #328]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003876:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003878:	4b50      	ldr	r3, [pc, #320]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	494d      	ldr	r1, [pc, #308]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d040      	beq.n	8003918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d107      	bne.n	80038ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389e:	4b47      	ldr	r3, [pc, #284]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d115      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e07f      	b.n	80039ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b41      	ldr	r3, [pc, #260]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e073      	b.n	80039ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b3d      	ldr	r3, [pc, #244]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e06b      	b.n	80039ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4b39      	ldr	r3, [pc, #228]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4936      	ldr	r1, [pc, #216]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e8:	f7ff f84a 	bl	8002980 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7ff f846 	bl	8002980 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e053      	b.n	80039ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	4b2d      	ldr	r3, [pc, #180]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 020c 	and.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d1eb      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b27      	ldr	r3, [pc, #156]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d210      	bcs.n	8003948 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 0207 	bic.w	r2, r3, #7
 800392e:	4922      	ldr	r1, [pc, #136]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e032      	b.n	80039ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003954:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4916      	ldr	r1, [pc, #88]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003972:	4b12      	ldr	r3, [pc, #72]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	490e      	ldr	r1, [pc, #56]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	4313      	orrs	r3, r2
 8003984:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003986:	f000 f821 	bl	80039cc <HAL_RCC_GetSysClockFreq>
 800398a:	4602      	mov	r2, r0
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	490a      	ldr	r1, [pc, #40]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003998:	5ccb      	ldrb	r3, [r1, r3]
 800399a:	fa22 f303 	lsr.w	r3, r2, r3
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <HAL_RCC_ClockConfig+0x1cc>)
 80039a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039a2:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_RCC_ClockConfig+0x1d0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe ffa8 	bl	80028fc <HAL_InitTick>

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40022000 	.word	0x40022000
 80039bc:	40021000 	.word	0x40021000
 80039c0:	0800ab68 	.word	0x0800ab68
 80039c4:	20000000 	.word	0x20000000
 80039c8:	20000004 	.word	0x20000004

080039cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039d0:	b089      	sub	sp, #36	; 0x24
 80039d2:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	2300      	movs	r3, #0
 80039ee:	607b      	str	r3, [r7, #4]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039f0:	4b5b      	ldr	r3, [pc, #364]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x194>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d002      	beq.n	8003a06 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d003      	beq.n	8003a0c <HAL_RCC_GetSysClockFreq+0x40>
 8003a04:	e0a2      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x180>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a06:	4b57      	ldr	r3, [pc, #348]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x198>)
 8003a08:	61bb      	str	r3, [r7, #24]
      break;
 8003a0a:	e0a2      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x186>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	0c9b      	lsrs	r3, r3, #18
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	4a54      	ldr	r2, [pc, #336]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x19c>)
 8003a16:	5cd3      	ldrb	r3, [r2, r3]
 8003a18:	60fb      	str	r3, [r7, #12]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 808b 	beq.w	8003b3c <HAL_RCC_GetSysClockFreq+0x170>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003a26:	4b4e      	ldr	r3, [pc, #312]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x194>)
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	4a4f      	ldr	r2, [pc, #316]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x1a0>)
 8003a30:	5cd3      	ldrb	r3, [r2, r3]
 8003a32:	613b      	str	r3, [r7, #16]
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003a34:	4b4a      	ldr	r3, [pc, #296]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x194>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d06b      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x14c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003a40:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x194>)
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60bb      	str	r3, [r7, #8]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003a4e:	4b44      	ldr	r3, [pc, #272]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x194>)
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	3302      	adds	r3, #2
 8003a5a:	607b      	str	r3, [r7, #4]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f04f 0100 	mov.w	r1, #0
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	fb02 f501 	mul.w	r5, r2, r1
 8003a70:	fb00 f403 	mul.w	r4, r0, r3
 8003a74:	192e      	adds	r6, r5, r4
 8003a76:	fba0 4502 	umull	r4, r5, r0, r2
 8003a7a:	1973      	adds	r3, r6, r5
 8003a7c:	461d      	mov	r5, r3
 8003a7e:	4620      	mov	r0, r4
 8003a80:	4629      	mov	r1, r5
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	014b      	lsls	r3, r1, #5
 8003a8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a90:	0142      	lsls	r2, r0, #5
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	1b00      	subs	r0, r0, r4
 8003a98:	eb61 0105 	sbc.w	r1, r1, r5
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	018b      	lsls	r3, r1, #6
 8003aa6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003aaa:	0182      	lsls	r2, r0, #6
 8003aac:	1a12      	subs	r2, r2, r0
 8003aae:	eb63 0301 	sbc.w	r3, r3, r1
 8003ab2:	f04f 0000 	mov.w	r0, #0
 8003ab6:	f04f 0100 	mov.w	r1, #0
 8003aba:	00d9      	lsls	r1, r3, #3
 8003abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ac0:	00d0      	lsls	r0, r2, #3
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	1912      	adds	r2, r2, r4
 8003ac8:	eb45 0303 	adc.w	r3, r5, r3
 8003acc:	f04f 0000 	mov.w	r0, #0
 8003ad0:	f04f 0100 	mov.w	r1, #0
 8003ad4:	0299      	lsls	r1, r3, #10
 8003ad6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ada:	0290      	lsls	r0, r2, #10
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4690      	mov	r8, r2
 8003ae2:	4699      	mov	r9, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	461a      	mov	r2, r3
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	fb02 f501 	mul.w	r5, r2, r1
 8003af8:	fb00 f403 	mul.w	r4, r0, r3
 8003afc:	442c      	add	r4, r5
 8003afe:	fba0 2302 	umull	r2, r3, r0, r2
 8003b02:	18e1      	adds	r1, r4, r3
 8003b04:	460b      	mov	r3, r1
 8003b06:	4640      	mov	r0, r8
 8003b08:	4649      	mov	r1, r9
 8003b0a:	f7fd fb6d 	bl	80011e8 <__aeabi_uldivmod>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4613      	mov	r3, r2
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	e007      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x15c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x198>)
 8003b1c:	fb02 f203 	mul.w	r2, r2, r3
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	61fb      	str	r3, [r7, #28]
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003b28:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x19c>)
 8003b2a:	7b5b      	ldrb	r3, [r3, #13]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d108      	bne.n	8003b46 <HAL_RCC_GetSysClockFreq+0x17a>
        {
          pllclk = pllclk / 2;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	085b      	lsrs	r3, r3, #1
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	e004      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x17a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4a0c      	ldr	r2, [pc, #48]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b40:	fb02 f303 	mul.w	r3, r2, r3
 8003b44:	61fb      	str	r3, [r7, #28]
      }
      sysclockfreq = pllclk;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	61bb      	str	r3, [r7, #24]
      break;
 8003b4a:	e002      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x186>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b4e:	61bb      	str	r3, [r7, #24]
      break;
 8003b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b52:	69bb      	ldr	r3, [r7, #24]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3724      	adds	r7, #36	; 0x24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	00f42400 	.word	0x00f42400
 8003b68:	0800ab80 	.word	0x0800ab80
 8003b6c:	0800ab90 	.word	0x0800ab90
 8003b70:	003d0900 	.word	0x003d0900
 8003b74:	007a1200 	.word	0x007a1200

08003b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b7c:	4b02      	ldr	r3, [pc, #8]	; (8003b88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	20000000 	.word	0x20000000

08003b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b90:	f7ff fff2 	bl	8003b78 <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4903      	ldr	r1, [pc, #12]	; (8003bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	0800ab78 	.word	0x0800ab78

08003bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bb8:	f7ff ffde 	bl	8003b78 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	0adb      	lsrs	r3, r3, #11
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	0800ab78 	.word	0x0800ab78

08003bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <RCC_Delay+0x34>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0a      	ldr	r2, [pc, #40]	; (8003c14 <RCC_Delay+0x38>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	0a5b      	lsrs	r3, r3, #9
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bf8:	bf00      	nop
  }
  while (Delay --);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1e5a      	subs	r2, r3, #1
 8003bfe:	60fa      	str	r2, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f9      	bne.n	8003bf8 <RCC_Delay+0x1c>
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr
 8003c10:	20000000 	.word	0x20000000
 8003c14:	10624dd3 	.word	0x10624dd3

08003c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e076      	b.n	8003d18 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d108      	bne.n	8003c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c3a:	d009      	beq.n	8003c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	61da      	str	r2, [r3, #28]
 8003c42:	e005      	b.n	8003c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fe fa6e 	bl	800214c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	ea42 0103 	orr.w	r1, r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	0c1a      	lsrs	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f002 0204 	and.w	r2, r2, #4
 8003cf6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	; 0x28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d32:	f7fe fe25 	bl	8002980 <HAL_GetTick>
 8003d36:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d3e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003d46:	887b      	ldrh	r3, [r7, #2]
 8003d48:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d4a:	7ffb      	ldrb	r3, [r7, #31]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d00c      	beq.n	8003d6a <HAL_SPI_TransmitReceive+0x4a>
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d56:	d106      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d102      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x46>
 8003d60:	7ffb      	ldrb	r3, [r7, #31]
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d001      	beq.n	8003d6a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
 8003d68:	e17f      	b.n	800406a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_SPI_TransmitReceive+0x5c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_SPI_TransmitReceive+0x5c>
 8003d76:	887b      	ldrh	r3, [r7, #2]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e174      	b.n	800406a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_SPI_TransmitReceive+0x6e>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e16d      	b.n	800406a <HAL_SPI_TransmitReceive+0x34a>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d003      	beq.n	8003daa <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2205      	movs	r2, #5
 8003da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	887a      	ldrh	r2, [r7, #2]
 8003dba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	887a      	ldrh	r2, [r7, #2]
 8003dc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	887a      	ldrh	r2, [r7, #2]
 8003dcc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	887a      	ldrh	r2, [r7, #2]
 8003dd2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dea:	2b40      	cmp	r3, #64	; 0x40
 8003dec:	d007      	beq.n	8003dfe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e06:	d17e      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_SPI_TransmitReceive+0xf6>
 8003e10:	8afb      	ldrh	r3, [r7, #22]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d16c      	bne.n	8003ef0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	881a      	ldrh	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e3a:	e059      	b.n	8003ef0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d11b      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x162>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d016      	beq.n	8003e82 <HAL_SPI_TransmitReceive+0x162>
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d113      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	881a      	ldrh	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	1c9a      	adds	r2, r3, #2
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d119      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x1a4>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d014      	beq.n	8003ec4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	b292      	uxth	r2, r2
 8003ea6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	1c9a      	adds	r2, r3, #2
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ec4:	f7fe fd5c 	bl	8002980 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d80d      	bhi.n	8003ef0 <HAL_SPI_TransmitReceive+0x1d0>
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d009      	beq.n	8003ef0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0bc      	b.n	800406a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1a0      	bne.n	8003e3c <HAL_SPI_TransmitReceive+0x11c>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d19b      	bne.n	8003e3c <HAL_SPI_TransmitReceive+0x11c>
 8003f04:	e082      	b.n	800400c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_SPI_TransmitReceive+0x1f4>
 8003f0e:	8afb      	ldrh	r3, [r7, #22]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d171      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	7812      	ldrb	r2, [r2, #0]
 8003f20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f3a:	e05d      	b.n	8003ff8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d11c      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x264>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d017      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0x264>
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d114      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	7812      	ldrb	r2, [r2, #0]
 8003f66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d119      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x2a6>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d014      	beq.n	8003fc6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fc6:	f7fe fcdb 	bl	8002980 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d803      	bhi.n	8003fde <HAL_SPI_TransmitReceive+0x2be>
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d102      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x2c4>
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d109      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e038      	b.n	800406a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d19c      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x21c>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d197      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800400c:	6a3a      	ldr	r2, [r7, #32]
 800400e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f8b7 	bl	8004184 <SPI_EndRxTxTransaction>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e01d      	b.n	800406a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10a      	bne.n	800404c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004036:	2300      	movs	r3, #0
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004068:	2300      	movs	r3, #0
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	3728      	adds	r7, #40	; 0x28
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004084:	f7fe fc7c 	bl	8002980 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	4413      	add	r3, r2
 8004092:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004094:	f7fe fc74 	bl	8002980 <HAL_GetTick>
 8004098:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800409a:	4b39      	ldr	r3, [pc, #228]	; (8004180 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	015b      	lsls	r3, r3, #5
 80040a0:	0d1b      	lsrs	r3, r3, #20
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	fb02 f303 	mul.w	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040aa:	e054      	b.n	8004156 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d050      	beq.n	8004156 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040b4:	f7fe fc64 	bl	8002980 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d902      	bls.n	80040ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d13d      	bne.n	8004146 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e2:	d111      	bne.n	8004108 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ec:	d004      	beq.n	80040f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f6:	d107      	bne.n	8004108 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004106:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004110:	d10f      	bne.n	8004132 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004130:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e017      	b.n	8004176 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	3b01      	subs	r3, #1
 8004154:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4013      	ands	r3, r2
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	429a      	cmp	r2, r3
 8004164:	bf0c      	ite	eq
 8004166:	2301      	moveq	r3, #1
 8004168:	2300      	movne	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	429a      	cmp	r2, r3
 8004172:	d19b      	bne.n	80040ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000000 	.word	0x20000000

08004184 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2201      	movs	r2, #1
 8004198:	2102      	movs	r1, #2
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f7ff ff6a 	bl	8004074 <SPI_WaitFlagStateUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	f043 0220 	orr.w	r2, r3, #32
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e013      	b.n	80041de <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2200      	movs	r2, #0
 80041be:	2180      	movs	r1, #128	; 0x80
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7ff ff57 	bl	8004074 <SPI_WaitFlagStateUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d0:	f043 0220 	orr.w	r2, r3, #32
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e000      	b.n	80041de <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e041      	b.n	800427c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7fd ffe7 	bl	80021e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2202      	movs	r2, #2
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3304      	adds	r3, #4
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f000 fab5 	bl	8004794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	d001      	beq.n	800429c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e037      	b.n	800430c <HAL_TIM_Base_Start+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1b      	ldr	r2, [pc, #108]	; (8004318 <HAL_TIM_Base_Start+0x94>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_TIM_Base_Start+0x52>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b6:	d00e      	beq.n	80042d6 <HAL_TIM_Base_Start+0x52>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a17      	ldr	r2, [pc, #92]	; (800431c <HAL_TIM_Base_Start+0x98>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d009      	beq.n	80042d6 <HAL_TIM_Base_Start+0x52>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a16      	ldr	r2, [pc, #88]	; (8004320 <HAL_TIM_Base_Start+0x9c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_TIM_Base_Start+0x52>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a14      	ldr	r2, [pc, #80]	; (8004324 <HAL_TIM_Base_Start+0xa0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d111      	bne.n	80042fa <HAL_TIM_Base_Start+0x76>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b06      	cmp	r3, #6
 80042e6:	d010      	beq.n	800430a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f8:	e007      	b.n	800430a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40000c00 	.word	0x40000c00

08004328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	d001      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e03f      	b.n	80043c0 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1b      	ldr	r2, [pc, #108]	; (80043cc <HAL_TIM_Base_Start_IT+0xa4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d013      	beq.n	800438a <HAL_TIM_Base_Start_IT+0x62>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436a:	d00e      	beq.n	800438a <HAL_TIM_Base_Start_IT+0x62>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <HAL_TIM_Base_Start_IT+0xa8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_TIM_Base_Start_IT+0x62>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a16      	ldr	r2, [pc, #88]	; (80043d4 <HAL_TIM_Base_Start_IT+0xac>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_TIM_Base_Start_IT+0x62>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d111      	bne.n	80043ae <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b06      	cmp	r3, #6
 800439a:	d010      	beq.n	80043be <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ac:	e007      	b.n	80043be <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800
 80043d8:	40000c00 	.word	0x40000c00

080043dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d020      	beq.n	8004440 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01b      	beq.n	8004440 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0202 	mvn.w	r2, #2
 8004410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f998 	bl	800475c <HAL_TIM_IC_CaptureCallback>
 800442c:	e005      	b.n	800443a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f98b 	bl	800474a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f99a 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	d020      	beq.n	800448c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01b      	beq.n	800448c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0204 	mvn.w	r2, #4
 800445c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f972 	bl	800475c <HAL_TIM_IC_CaptureCallback>
 8004478:	e005      	b.n	8004486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f965 	bl	800474a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f974 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	d020      	beq.n	80044d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01b      	beq.n	80044d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0208 	mvn.w	r2, #8
 80044a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2204      	movs	r2, #4
 80044ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f94c 	bl	800475c <HAL_TIM_IC_CaptureCallback>
 80044c4:	e005      	b.n	80044d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f93f 	bl	800474a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f94e 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d020      	beq.n	8004524 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0210 	mvn.w	r2, #16
 80044f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2208      	movs	r2, #8
 80044fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f926 	bl	800475c <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f919 	bl	800474a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f928 	bl	800476e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00c      	beq.n	8004548 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0201 	mvn.w	r2, #1
 8004540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fd fc68 	bl	8001e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00c      	beq.n	800456c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fa91 	bl	8004a8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00c      	beq.n	8004590 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f8f8 	bl	8004780 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00c      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0220 	mvn.w	r2, #32
 80045ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa64 	bl	8004a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_TIM_ConfigClockSource+0x1c>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e0b4      	b.n	8004742 <HAL_TIM_ConfigClockSource+0x186>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004610:	d03e      	beq.n	8004690 <HAL_TIM_ConfigClockSource+0xd4>
 8004612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004616:	f200 8087 	bhi.w	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461e:	f000 8086 	beq.w	800472e <HAL_TIM_ConfigClockSource+0x172>
 8004622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004626:	d87f      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004628:	2b70      	cmp	r3, #112	; 0x70
 800462a:	d01a      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0xa6>
 800462c:	2b70      	cmp	r3, #112	; 0x70
 800462e:	d87b      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004630:	2b60      	cmp	r3, #96	; 0x60
 8004632:	d050      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004634:	2b60      	cmp	r3, #96	; 0x60
 8004636:	d877      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004638:	2b50      	cmp	r3, #80	; 0x50
 800463a:	d03c      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0xfa>
 800463c:	2b50      	cmp	r3, #80	; 0x50
 800463e:	d873      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d058      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004644:	2b40      	cmp	r3, #64	; 0x40
 8004646:	d86f      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004648:	2b30      	cmp	r3, #48	; 0x30
 800464a:	d064      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 800464c:	2b30      	cmp	r3, #48	; 0x30
 800464e:	d86b      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004650:	2b20      	cmp	r3, #32
 8004652:	d060      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 8004654:	2b20      	cmp	r3, #32
 8004656:	d867      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d05c      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 800465c:	2b10      	cmp	r3, #16
 800465e:	d05a      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 8004660:	e062      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6899      	ldr	r1, [r3, #8]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f000 f97e 	bl	8004972 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	609a      	str	r2, [r3, #8]
      break;
 800468e:	e04f      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6899      	ldr	r1, [r3, #8]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f000 f967 	bl	8004972 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046b2:	609a      	str	r2, [r3, #8]
      break;
 80046b4:	e03c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6859      	ldr	r1, [r3, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	461a      	mov	r2, r3
 80046c4:	f000 f8de 	bl	8004884 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2150      	movs	r1, #80	; 0x50
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 f935 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80046d4:	e02c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f000 f8fc 	bl	80048e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2160      	movs	r1, #96	; 0x60
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 f925 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80046f4:	e01c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	461a      	mov	r2, r3
 8004704:	f000 f8be 	bl	8004884 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2140      	movs	r1, #64	; 0x40
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f915 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8004714:	e00c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f000 f90c 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 8004726:	e003      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
      break;
 800472c:	e000      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800472e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr

0800475c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr
	...

08004794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a33      	ldr	r2, [pc, #204]	; (8004874 <TIM_Base_SetConfig+0xe0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00f      	beq.n	80047cc <TIM_Base_SetConfig+0x38>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b2:	d00b      	beq.n	80047cc <TIM_Base_SetConfig+0x38>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a30      	ldr	r2, [pc, #192]	; (8004878 <TIM_Base_SetConfig+0xe4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d007      	beq.n	80047cc <TIM_Base_SetConfig+0x38>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a2f      	ldr	r2, [pc, #188]	; (800487c <TIM_Base_SetConfig+0xe8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_Base_SetConfig+0x38>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a2e      	ldr	r2, [pc, #184]	; (8004880 <TIM_Base_SetConfig+0xec>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d108      	bne.n	80047de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a24      	ldr	r2, [pc, #144]	; (8004874 <TIM_Base_SetConfig+0xe0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00f      	beq.n	8004806 <TIM_Base_SetConfig+0x72>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ec:	d00b      	beq.n	8004806 <TIM_Base_SetConfig+0x72>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a21      	ldr	r2, [pc, #132]	; (8004878 <TIM_Base_SetConfig+0xe4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d007      	beq.n	8004806 <TIM_Base_SetConfig+0x72>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a20      	ldr	r2, [pc, #128]	; (800487c <TIM_Base_SetConfig+0xe8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_Base_SetConfig+0x72>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <TIM_Base_SetConfig+0xec>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d108      	bne.n	8004818 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a0d      	ldr	r2, [pc, #52]	; (8004874 <TIM_Base_SetConfig+0xe0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d103      	bne.n	800484c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f023 0201 	bic.w	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	611a      	str	r2, [r3, #16]
  }
}
 800486a:	bf00      	nop
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr
 8004874:	40012c00 	.word	0x40012c00
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800
 8004880:	40000c00 	.word	0x40000c00

08004884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f023 0201 	bic.w	r2, r3, #1
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f023 030a 	bic.w	r3, r3, #10
 80048c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f023 0210 	bic.w	r2, r3, #16
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800490a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	031b      	lsls	r3, r3, #12
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800491c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	621a      	str	r2, [r3, #32]
}
 8004934:	bf00      	nop
 8004936:	371c      	adds	r7, #28
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr

0800493e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	f043 0307 	orr.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr

08004972 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004972:	b480      	push	{r7}
 8004974:	b087      	sub	sp, #28
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800498c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	021a      	lsls	r2, r3, #8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	431a      	orrs	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4313      	orrs	r3, r2
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	609a      	str	r2, [r3, #8]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e04b      	b.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a19      	ldr	r2, [pc, #100]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a14:	d00e      	beq.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a15      	ldr	r2, [pc, #84]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d009      	beq.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d10c      	bne.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40012c00 	.word	0x40012c00
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800
 8004a78:	40000c00 	.word	0x40000c00

08004a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr

08004a8e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e042      	b.n	8004b38 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fd fbca 	bl	8002260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2224      	movs	r2, #36	; 0x24
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fdb7 	bl	8005658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695a      	ldr	r2, [r3, #20]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	; 0x28
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d175      	bne.n	8004c4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_UART_Transmit+0x2c>
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e06e      	b.n	8004c4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2221      	movs	r2, #33	; 0x21
 8004b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b7e:	f7fd feff 	bl	8002980 <HAL_GetTick>
 8004b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	88fa      	ldrh	r2, [r7, #6]
 8004b8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b98:	d108      	bne.n	8004bac <HAL_UART_Transmit+0x6c>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e003      	b.n	8004bb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bb4:	e02e      	b.n	8004c14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2180      	movs	r1, #128	; 0x80
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fb1c 	bl	80051fe <UART_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e03a      	b.n	8004c4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10b      	bne.n	8004bf6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	61bb      	str	r3, [r7, #24]
 8004bf4:	e007      	b.n	8004c06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	3301      	adds	r3, #1
 8004c04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1cb      	bne.n	8004bb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2200      	movs	r2, #0
 8004c26:	2140      	movs	r1, #64	; 0x40
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fae8 	bl	80051fe <UART_WaitOnFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e006      	b.n	8004c4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e000      	b.n	8004c4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c4c:	2302      	movs	r3, #2
  }
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3720      	adds	r7, #32
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	4613      	mov	r3, r2
 8004c62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	d112      	bne.n	8004c96 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <HAL_UART_Receive_IT+0x26>
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e00b      	b.n	8004c98 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fb0f 	bl	80052b0 <UART_Start_Receive_IT>
 8004c92:	4603      	mov	r3, r0
 8004c94:	e000      	b.n	8004c98 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c96:	2302      	movs	r3, #2
  }
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b0ba      	sub	sp, #232	; 0xe8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10f      	bne.n	8004d06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <HAL_UART_IRQHandler+0x66>
 8004cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fbec 	bl	80054dc <UART_Receive_IT>
      return;
 8004d04:	e25b      	b.n	80051be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 80de 	beq.w	8004ecc <HAL_UART_IRQHandler+0x22c>
 8004d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d106      	bne.n	8004d2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80d1 	beq.w	8004ecc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00b      	beq.n	8004d4e <HAL_UART_IRQHandler+0xae>
 8004d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d46:	f043 0201 	orr.w	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <HAL_UART_IRQHandler+0xd2>
 8004d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	f043 0202 	orr.w	r2, r3, #2
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00b      	beq.n	8004d96 <HAL_UART_IRQHandler+0xf6>
 8004d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	f043 0204 	orr.w	r2, r3, #4
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d011      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x126>
 8004da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d105      	bne.n	8004dba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d005      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbe:	f043 0208 	orr.w	r2, r3, #8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 81f2 	beq.w	80051b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd4:	f003 0320 	and.w	r3, r3, #32
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d008      	beq.n	8004dee <HAL_UART_IRQHandler+0x14e>
 8004ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fb77 	bl	80054dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <HAL_UART_IRQHandler+0x17a>
 8004e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d04f      	beq.n	8004eba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fa81 	bl	8005322 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d041      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3314      	adds	r3, #20
 8004e34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3314      	adds	r3, #20
 8004e56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1d9      	bne.n	8004e2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d013      	beq.n	8004eaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e86:	4a7e      	ldr	r2, [pc, #504]	; (8005080 <HAL_UART_IRQHandler+0x3e0>)
 8004e88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fd fec8 	bl	8002c24 <HAL_DMA_Abort_IT>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d016      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	e00e      	b.n	8004ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f993 	bl	80051d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb0:	e00a      	b.n	8004ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f98f 	bl	80051d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb8:	e006      	b.n	8004ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f98b 	bl	80051d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004ec6:	e175      	b.n	80051b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec8:	bf00      	nop
    return;
 8004eca:	e173      	b.n	80051b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	f040 814f 	bne.w	8005174 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 8148 	beq.w	8005174 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8141 	beq.w	8005174 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60bb      	str	r3, [r7, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 80b6 	beq.w	8005084 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 8145 	beq.w	80051b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f36:	429a      	cmp	r2, r3
 8004f38:	f080 813e 	bcs.w	80051b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	f000 8088 	beq.w	8005060 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f7c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1d9      	bne.n	8004f50 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3314      	adds	r3, #20
 8004fa2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004fac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3314      	adds	r3, #20
 8004fbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fc0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e1      	bne.n	8004f9c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3314      	adds	r3, #20
 8004fde:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3314      	adds	r3, #20
 8004ff8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ffc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ffe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005002:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800500a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e3      	bne.n	8004fd8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800502e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005030:	f023 0310 	bic.w	r3, r3, #16
 8005034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	330c      	adds	r3, #12
 800503e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005042:	65ba      	str	r2, [r7, #88]	; 0x58
 8005044:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e3      	bne.n	800501e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	4618      	mov	r0, r3
 800505c:	f7fd fda7 	bl	8002bae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800506e:	b29b      	uxth	r3, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	b29b      	uxth	r3, r3
 8005074:	4619      	mov	r1, r3
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8b6 	bl	80051e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800507c:	e09c      	b.n	80051b8 <HAL_UART_IRQHandler+0x518>
 800507e:	bf00      	nop
 8005080:	080053e7 	.word	0x080053e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800508c:	b29b      	uxth	r3, r3
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 808e 	beq.w	80051bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 8089 	beq.w	80051bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	330c      	adds	r3, #12
 80050b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	330c      	adds	r3, #12
 80050ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050ce:	647a      	str	r2, [r7, #68]	; 0x44
 80050d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e3      	bne.n	80050aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3314      	adds	r3, #20
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	623b      	str	r3, [r7, #32]
   return(result);
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3314      	adds	r3, #20
 8005102:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005106:	633a      	str	r2, [r7, #48]	; 0x30
 8005108:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800510c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e3      	bne.n	80050e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	330c      	adds	r3, #12
 800512e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	e853 3f00 	ldrex	r3, [r3]
 8005136:	60fb      	str	r3, [r7, #12]
   return(result);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0310 	bic.w	r3, r3, #16
 800513e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800514c:	61fa      	str	r2, [r7, #28]
 800514e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	69b9      	ldr	r1, [r7, #24]
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	617b      	str	r3, [r7, #20]
   return(result);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e3      	bne.n	8005128 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005166:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800516a:	4619      	mov	r1, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f83b 	bl	80051e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005172:	e023      	b.n	80051bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <HAL_UART_IRQHandler+0x4f4>
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f93e 	bl	800540e <UART_Transmit_IT>
    return;
 8005192:	e014      	b.n	80051be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00e      	beq.n	80051be <HAL_UART_IRQHandler+0x51e>
 80051a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d008      	beq.n	80051be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f97d 	bl	80054ac <UART_EndTransmit_IT>
    return;
 80051b2:	e004      	b.n	80051be <HAL_UART_IRQHandler+0x51e>
    return;
 80051b4:	bf00      	nop
 80051b6:	e002      	b.n	80051be <HAL_UART_IRQHandler+0x51e>
      return;
 80051b8:	bf00      	nop
 80051ba:	e000      	b.n	80051be <HAL_UART_IRQHandler+0x51e>
      return;
 80051bc:	bf00      	nop
  }
}
 80051be:	37e8      	adds	r7, #232	; 0xe8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr

080051d6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr

080051fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b086      	sub	sp, #24
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	603b      	str	r3, [r7, #0]
 800520a:	4613      	mov	r3, r2
 800520c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520e:	e03b      	b.n	8005288 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005216:	d037      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005218:	f7fd fbb2 	bl	8002980 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	6a3a      	ldr	r2, [r7, #32]
 8005224:	429a      	cmp	r2, r3
 8005226:	d302      	bcc.n	800522e <UART_WaitOnFlagUntilTimeout+0x30>
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e03a      	b.n	80052a8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d023      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b80      	cmp	r3, #128	; 0x80
 8005244:	d020      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b40      	cmp	r3, #64	; 0x40
 800524a:	d01d      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b08      	cmp	r3, #8
 8005258:	d116      	bne.n	8005288 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f856 	bl	8005322 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2208      	movs	r2, #8
 800527a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e00f      	b.n	80052a8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4013      	ands	r3, r2
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	429a      	cmp	r2, r3
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d0b4      	beq.n	8005210 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	88fa      	ldrh	r2, [r7, #6]
 80052c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	88fa      	ldrh	r2, [r7, #6]
 80052ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2222      	movs	r2, #34	; 0x22
 80052da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d007      	beq.n	80052f6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695a      	ldr	r2, [r3, #20]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0220 	orr.w	r2, r2, #32
 8005314:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr

08005322 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005322:	b480      	push	{r7}
 8005324:	b095      	sub	sp, #84	; 0x54
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	330c      	adds	r3, #12
 8005330:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005340:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	330c      	adds	r3, #12
 8005348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800534a:	643a      	str	r2, [r7, #64]	; 0x40
 800534c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e5      	bne.n	800532a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3314      	adds	r3, #20
 8005364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	61fb      	str	r3, [r7, #28]
   return(result);
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	64bb      	str	r3, [r7, #72]	; 0x48
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3314      	adds	r3, #20
 800537c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800537e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005380:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e5      	bne.n	800535e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	2b01      	cmp	r3, #1
 8005398:	d119      	bne.n	80053ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f023 0310 	bic.w	r3, r3, #16
 80053b0:	647b      	str	r3, [r7, #68]	; 0x44
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	330c      	adds	r3, #12
 80053b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ba:	61ba      	str	r2, [r7, #24]
 80053bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	6979      	ldr	r1, [r7, #20]
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	613b      	str	r3, [r7, #16]
   return(result);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e5      	bne.n	800539a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053dc:	bf00      	nop
 80053de:	3754      	adds	r7, #84	; 0x54
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f7ff fee8 	bl	80051d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800540e:	b480      	push	{r7}
 8005410:	b085      	sub	sp, #20
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b21      	cmp	r3, #33	; 0x21
 8005420:	d13e      	bne.n	80054a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542a:	d114      	bne.n	8005456 <UART_Transmit_IT+0x48>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d110      	bne.n	8005456 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005448:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	1c9a      	adds	r2, r3, #2
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	621a      	str	r2, [r3, #32]
 8005454:	e008      	b.n	8005468 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	1c59      	adds	r1, r3, #1
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6211      	str	r1, [r2, #32]
 8005460:	781a      	ldrb	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800546c:	b29b      	uxth	r3, r3
 800546e:	3b01      	subs	r3, #1
 8005470:	b29b      	uxth	r3, r3
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	4619      	mov	r1, r3
 8005476:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10f      	bne.n	800549c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800548a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800549a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	e000      	b.n	80054a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054a0:	2302      	movs	r3, #2
  }
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff fe79 	bl	80051c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08c      	sub	sp, #48	; 0x30
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b22      	cmp	r3, #34	; 0x22
 80054ee:	f040 80ae 	bne.w	800564e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fa:	d117      	bne.n	800552c <UART_Receive_IT+0x50>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d113      	bne.n	800552c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005504:	2300      	movs	r3, #0
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551a:	b29a      	uxth	r2, r3
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	1c9a      	adds	r2, r3, #2
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	629a      	str	r2, [r3, #40]	; 0x28
 800552a:	e026      	b.n	800557a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005532:	2300      	movs	r3, #0
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553e:	d007      	beq.n	8005550 <UART_Receive_IT+0x74>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10a      	bne.n	800555e <UART_Receive_IT+0x82>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d106      	bne.n	800555e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	b2da      	uxtb	r2, r3
 8005558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	e008      	b.n	8005570 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800556a:	b2da      	uxtb	r2, r3
 800556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29b      	uxth	r3, r3
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	4619      	mov	r1, r3
 8005588:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800558a:	2b00      	cmp	r3, #0
 800558c:	d15d      	bne.n	800564a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0220 	bic.w	r2, r2, #32
 800559c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	695a      	ldr	r2, [r3, #20]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0201 	bic.w	r2, r2, #1
 80055bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d135      	bne.n	8005640 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f023 0310 	bic.w	r3, r3, #16
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	330c      	adds	r3, #12
 80055f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fa:	623a      	str	r2, [r7, #32]
 80055fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	69f9      	ldr	r1, [r7, #28]
 8005600:	6a3a      	ldr	r2, [r7, #32]
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	61bb      	str	r3, [r7, #24]
   return(result);
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e5      	bne.n	80055da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b10      	cmp	r3, #16
 800561a:	d10a      	bne.n	8005632 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff fdd5 	bl	80051e8 <HAL_UARTEx_RxEventCallback>
 800563e:	e002      	b.n	8005646 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7fc fc2d 	bl	8001ea0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	e002      	b.n	8005650 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	e000      	b.n	8005650 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800564e:	2302      	movs	r3, #2
  }
}
 8005650:	4618      	mov	r0, r3
 8005652:	3730      	adds	r7, #48	; 0x30
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005692:	f023 030c 	bic.w	r3, r3, #12
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	68b9      	ldr	r1, [r7, #8]
 800569c:	430b      	orrs	r3, r1
 800569e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2c      	ldr	r2, [pc, #176]	; (800576c <UART_SetConfig+0x114>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d103      	bne.n	80056c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80056c0:	f7fe fa78 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	e002      	b.n	80056ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80056c8:	f7fe fa60 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 80056cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	009a      	lsls	r2, r3, #2
 80056d8:	441a      	add	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	4a22      	ldr	r2, [pc, #136]	; (8005770 <UART_SetConfig+0x118>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	0119      	lsls	r1, r3, #4
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	009a      	lsls	r2, r3, #2
 80056f8:	441a      	add	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	fbb2 f2f3 	udiv	r2, r2, r3
 8005704:	4b1a      	ldr	r3, [pc, #104]	; (8005770 <UART_SetConfig+0x118>)
 8005706:	fba3 0302 	umull	r0, r3, r3, r2
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	2064      	movs	r0, #100	; 0x64
 800570e:	fb00 f303 	mul.w	r3, r0, r3
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	3332      	adds	r3, #50	; 0x32
 8005718:	4a15      	ldr	r2, [pc, #84]	; (8005770 <UART_SetConfig+0x118>)
 800571a:	fba2 2303 	umull	r2, r3, r2, r3
 800571e:	095b      	lsrs	r3, r3, #5
 8005720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005724:	4419      	add	r1, r3
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4613      	mov	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	009a      	lsls	r2, r3, #2
 8005730:	441a      	add	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	fbb2 f2f3 	udiv	r2, r2, r3
 800573c:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <UART_SetConfig+0x118>)
 800573e:	fba3 0302 	umull	r0, r3, r3, r2
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	2064      	movs	r0, #100	; 0x64
 8005746:	fb00 f303 	mul.w	r3, r0, r3
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	3332      	adds	r3, #50	; 0x32
 8005750:	4a07      	ldr	r2, [pc, #28]	; (8005770 <UART_SetConfig+0x118>)
 8005752:	fba2 2303 	umull	r2, r3, r2, r3
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	f003 020f 	and.w	r2, r3, #15
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	440a      	add	r2, r1
 8005762:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005764:	bf00      	nop
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40013800 	.word	0x40013800
 8005770:	51eb851f 	.word	0x51eb851f

08005774 <__errno>:
 8005774:	4b01      	ldr	r3, [pc, #4]	; (800577c <__errno+0x8>)
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	2000000c 	.word	0x2000000c

08005780 <__libc_init_array>:
 8005780:	b570      	push	{r4, r5, r6, lr}
 8005782:	2600      	movs	r6, #0
 8005784:	4d0c      	ldr	r5, [pc, #48]	; (80057b8 <__libc_init_array+0x38>)
 8005786:	4c0d      	ldr	r4, [pc, #52]	; (80057bc <__libc_init_array+0x3c>)
 8005788:	1b64      	subs	r4, r4, r5
 800578a:	10a4      	asrs	r4, r4, #2
 800578c:	42a6      	cmp	r6, r4
 800578e:	d109      	bne.n	80057a4 <__libc_init_array+0x24>
 8005790:	f005 f898 	bl	800a8c4 <_init>
 8005794:	2600      	movs	r6, #0
 8005796:	4d0a      	ldr	r5, [pc, #40]	; (80057c0 <__libc_init_array+0x40>)
 8005798:	4c0a      	ldr	r4, [pc, #40]	; (80057c4 <__libc_init_array+0x44>)
 800579a:	1b64      	subs	r4, r4, r5
 800579c:	10a4      	asrs	r4, r4, #2
 800579e:	42a6      	cmp	r6, r4
 80057a0:	d105      	bne.n	80057ae <__libc_init_array+0x2e>
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a8:	4798      	blx	r3
 80057aa:	3601      	adds	r6, #1
 80057ac:	e7ee      	b.n	800578c <__libc_init_array+0xc>
 80057ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b2:	4798      	blx	r3
 80057b4:	3601      	adds	r6, #1
 80057b6:	e7f2      	b.n	800579e <__libc_init_array+0x1e>
 80057b8:	0800b074 	.word	0x0800b074
 80057bc:	0800b074 	.word	0x0800b074
 80057c0:	0800b074 	.word	0x0800b074
 80057c4:	0800b078 	.word	0x0800b078

080057c8 <memset>:
 80057c8:	4603      	mov	r3, r0
 80057ca:	4402      	add	r2, r0
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d100      	bne.n	80057d2 <memset+0xa>
 80057d0:	4770      	bx	lr
 80057d2:	f803 1b01 	strb.w	r1, [r3], #1
 80057d6:	e7f9      	b.n	80057cc <memset+0x4>

080057d8 <__cvt>:
 80057d8:	2b00      	cmp	r3, #0
 80057da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057de:	461f      	mov	r7, r3
 80057e0:	bfbb      	ittet	lt
 80057e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80057e6:	461f      	movlt	r7, r3
 80057e8:	2300      	movge	r3, #0
 80057ea:	232d      	movlt	r3, #45	; 0x2d
 80057ec:	b088      	sub	sp, #32
 80057ee:	4614      	mov	r4, r2
 80057f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80057f4:	7013      	strb	r3, [r2, #0]
 80057f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80057fc:	f023 0820 	bic.w	r8, r3, #32
 8005800:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005804:	d005      	beq.n	8005812 <__cvt+0x3a>
 8005806:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800580a:	d100      	bne.n	800580e <__cvt+0x36>
 800580c:	3501      	adds	r5, #1
 800580e:	2302      	movs	r3, #2
 8005810:	e000      	b.n	8005814 <__cvt+0x3c>
 8005812:	2303      	movs	r3, #3
 8005814:	aa07      	add	r2, sp, #28
 8005816:	9204      	str	r2, [sp, #16]
 8005818:	aa06      	add	r2, sp, #24
 800581a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800581e:	e9cd 3500 	strd	r3, r5, [sp]
 8005822:	4622      	mov	r2, r4
 8005824:	463b      	mov	r3, r7
 8005826:	f001 fe67 	bl	80074f8 <_dtoa_r>
 800582a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800582e:	4606      	mov	r6, r0
 8005830:	d102      	bne.n	8005838 <__cvt+0x60>
 8005832:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005834:	07db      	lsls	r3, r3, #31
 8005836:	d522      	bpl.n	800587e <__cvt+0xa6>
 8005838:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800583c:	eb06 0905 	add.w	r9, r6, r5
 8005840:	d110      	bne.n	8005864 <__cvt+0x8c>
 8005842:	7833      	ldrb	r3, [r6, #0]
 8005844:	2b30      	cmp	r3, #48	; 0x30
 8005846:	d10a      	bne.n	800585e <__cvt+0x86>
 8005848:	2200      	movs	r2, #0
 800584a:	2300      	movs	r3, #0
 800584c:	4620      	mov	r0, r4
 800584e:	4639      	mov	r1, r7
 8005850:	f7fb f916 	bl	8000a80 <__aeabi_dcmpeq>
 8005854:	b918      	cbnz	r0, 800585e <__cvt+0x86>
 8005856:	f1c5 0501 	rsb	r5, r5, #1
 800585a:	f8ca 5000 	str.w	r5, [sl]
 800585e:	f8da 3000 	ldr.w	r3, [sl]
 8005862:	4499      	add	r9, r3
 8005864:	2200      	movs	r2, #0
 8005866:	2300      	movs	r3, #0
 8005868:	4620      	mov	r0, r4
 800586a:	4639      	mov	r1, r7
 800586c:	f7fb f908 	bl	8000a80 <__aeabi_dcmpeq>
 8005870:	b108      	cbz	r0, 8005876 <__cvt+0x9e>
 8005872:	f8cd 901c 	str.w	r9, [sp, #28]
 8005876:	2230      	movs	r2, #48	; 0x30
 8005878:	9b07      	ldr	r3, [sp, #28]
 800587a:	454b      	cmp	r3, r9
 800587c:	d307      	bcc.n	800588e <__cvt+0xb6>
 800587e:	4630      	mov	r0, r6
 8005880:	9b07      	ldr	r3, [sp, #28]
 8005882:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005884:	1b9b      	subs	r3, r3, r6
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	b008      	add	sp, #32
 800588a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588e:	1c59      	adds	r1, r3, #1
 8005890:	9107      	str	r1, [sp, #28]
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	e7f0      	b.n	8005878 <__cvt+0xa0>

08005896 <__exponent>:
 8005896:	4603      	mov	r3, r0
 8005898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800589a:	2900      	cmp	r1, #0
 800589c:	f803 2b02 	strb.w	r2, [r3], #2
 80058a0:	bfb6      	itet	lt
 80058a2:	222d      	movlt	r2, #45	; 0x2d
 80058a4:	222b      	movge	r2, #43	; 0x2b
 80058a6:	4249      	neglt	r1, r1
 80058a8:	2909      	cmp	r1, #9
 80058aa:	7042      	strb	r2, [r0, #1]
 80058ac:	dd2b      	ble.n	8005906 <__exponent+0x70>
 80058ae:	f10d 0407 	add.w	r4, sp, #7
 80058b2:	46a4      	mov	ip, r4
 80058b4:	270a      	movs	r7, #10
 80058b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80058ba:	460a      	mov	r2, r1
 80058bc:	46a6      	mov	lr, r4
 80058be:	fb07 1516 	mls	r5, r7, r6, r1
 80058c2:	2a63      	cmp	r2, #99	; 0x63
 80058c4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80058c8:	4631      	mov	r1, r6
 80058ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80058ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058d2:	dcf0      	bgt.n	80058b6 <__exponent+0x20>
 80058d4:	3130      	adds	r1, #48	; 0x30
 80058d6:	f1ae 0502 	sub.w	r5, lr, #2
 80058da:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058de:	4629      	mov	r1, r5
 80058e0:	1c44      	adds	r4, r0, #1
 80058e2:	4561      	cmp	r1, ip
 80058e4:	d30a      	bcc.n	80058fc <__exponent+0x66>
 80058e6:	f10d 0209 	add.w	r2, sp, #9
 80058ea:	eba2 020e 	sub.w	r2, r2, lr
 80058ee:	4565      	cmp	r5, ip
 80058f0:	bf88      	it	hi
 80058f2:	2200      	movhi	r2, #0
 80058f4:	4413      	add	r3, r2
 80058f6:	1a18      	subs	r0, r3, r0
 80058f8:	b003      	add	sp, #12
 80058fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005900:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005904:	e7ed      	b.n	80058e2 <__exponent+0x4c>
 8005906:	2330      	movs	r3, #48	; 0x30
 8005908:	3130      	adds	r1, #48	; 0x30
 800590a:	7083      	strb	r3, [r0, #2]
 800590c:	70c1      	strb	r1, [r0, #3]
 800590e:	1d03      	adds	r3, r0, #4
 8005910:	e7f1      	b.n	80058f6 <__exponent+0x60>
	...

08005914 <_printf_float>:
 8005914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005918:	b091      	sub	sp, #68	; 0x44
 800591a:	460c      	mov	r4, r1
 800591c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005920:	4616      	mov	r6, r2
 8005922:	461f      	mov	r7, r3
 8005924:	4605      	mov	r5, r0
 8005926:	f002 ff3b 	bl	80087a0 <_localeconv_r>
 800592a:	6803      	ldr	r3, [r0, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	9309      	str	r3, [sp, #36]	; 0x24
 8005930:	f7fa fc7a 	bl	8000228 <strlen>
 8005934:	2300      	movs	r3, #0
 8005936:	930e      	str	r3, [sp, #56]	; 0x38
 8005938:	f8d8 3000 	ldr.w	r3, [r8]
 800593c:	900a      	str	r0, [sp, #40]	; 0x28
 800593e:	3307      	adds	r3, #7
 8005940:	f023 0307 	bic.w	r3, r3, #7
 8005944:	f103 0208 	add.w	r2, r3, #8
 8005948:	f894 9018 	ldrb.w	r9, [r4, #24]
 800594c:	f8d4 b000 	ldr.w	fp, [r4]
 8005950:	f8c8 2000 	str.w	r2, [r8]
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800595c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005960:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005964:	930b      	str	r3, [sp, #44]	; 0x2c
 8005966:	f04f 32ff 	mov.w	r2, #4294967295
 800596a:	4640      	mov	r0, r8
 800596c:	4b9c      	ldr	r3, [pc, #624]	; (8005be0 <_printf_float+0x2cc>)
 800596e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005970:	f7fb f8b8 	bl	8000ae4 <__aeabi_dcmpun>
 8005974:	bb70      	cbnz	r0, 80059d4 <_printf_float+0xc0>
 8005976:	f04f 32ff 	mov.w	r2, #4294967295
 800597a:	4640      	mov	r0, r8
 800597c:	4b98      	ldr	r3, [pc, #608]	; (8005be0 <_printf_float+0x2cc>)
 800597e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005980:	f7fb f892 	bl	8000aa8 <__aeabi_dcmple>
 8005984:	bb30      	cbnz	r0, 80059d4 <_printf_float+0xc0>
 8005986:	2200      	movs	r2, #0
 8005988:	2300      	movs	r3, #0
 800598a:	4640      	mov	r0, r8
 800598c:	4651      	mov	r1, sl
 800598e:	f7fb f881 	bl	8000a94 <__aeabi_dcmplt>
 8005992:	b110      	cbz	r0, 800599a <_printf_float+0x86>
 8005994:	232d      	movs	r3, #45	; 0x2d
 8005996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800599a:	4b92      	ldr	r3, [pc, #584]	; (8005be4 <_printf_float+0x2d0>)
 800599c:	4892      	ldr	r0, [pc, #584]	; (8005be8 <_printf_float+0x2d4>)
 800599e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80059a2:	bf94      	ite	ls
 80059a4:	4698      	movls	r8, r3
 80059a6:	4680      	movhi	r8, r0
 80059a8:	2303      	movs	r3, #3
 80059aa:	f04f 0a00 	mov.w	sl, #0
 80059ae:	6123      	str	r3, [r4, #16]
 80059b0:	f02b 0304 	bic.w	r3, fp, #4
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	4633      	mov	r3, r6
 80059b8:	4621      	mov	r1, r4
 80059ba:	4628      	mov	r0, r5
 80059bc:	9700      	str	r7, [sp, #0]
 80059be:	aa0f      	add	r2, sp, #60	; 0x3c
 80059c0:	f000 f9d4 	bl	8005d6c <_printf_common>
 80059c4:	3001      	adds	r0, #1
 80059c6:	f040 8090 	bne.w	8005aea <_printf_float+0x1d6>
 80059ca:	f04f 30ff 	mov.w	r0, #4294967295
 80059ce:	b011      	add	sp, #68	; 0x44
 80059d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d4:	4642      	mov	r2, r8
 80059d6:	4653      	mov	r3, sl
 80059d8:	4640      	mov	r0, r8
 80059da:	4651      	mov	r1, sl
 80059dc:	f7fb f882 	bl	8000ae4 <__aeabi_dcmpun>
 80059e0:	b148      	cbz	r0, 80059f6 <_printf_float+0xe2>
 80059e2:	f1ba 0f00 	cmp.w	sl, #0
 80059e6:	bfb8      	it	lt
 80059e8:	232d      	movlt	r3, #45	; 0x2d
 80059ea:	4880      	ldr	r0, [pc, #512]	; (8005bec <_printf_float+0x2d8>)
 80059ec:	bfb8      	it	lt
 80059ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059f2:	4b7f      	ldr	r3, [pc, #508]	; (8005bf0 <_printf_float+0x2dc>)
 80059f4:	e7d3      	b.n	800599e <_printf_float+0x8a>
 80059f6:	6863      	ldr	r3, [r4, #4]
 80059f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	d142      	bne.n	8005a86 <_printf_float+0x172>
 8005a00:	2306      	movs	r3, #6
 8005a02:	6063      	str	r3, [r4, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	9206      	str	r2, [sp, #24]
 8005a08:	aa0e      	add	r2, sp, #56	; 0x38
 8005a0a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005a0e:	aa0d      	add	r2, sp, #52	; 0x34
 8005a10:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005a14:	9203      	str	r2, [sp, #12]
 8005a16:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005a1a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005a1e:	6023      	str	r3, [r4, #0]
 8005a20:	6863      	ldr	r3, [r4, #4]
 8005a22:	4642      	mov	r2, r8
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	4628      	mov	r0, r5
 8005a28:	4653      	mov	r3, sl
 8005a2a:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a2c:	f7ff fed4 	bl	80057d8 <__cvt>
 8005a30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a32:	4680      	mov	r8, r0
 8005a34:	2947      	cmp	r1, #71	; 0x47
 8005a36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005a38:	d108      	bne.n	8005a4c <_printf_float+0x138>
 8005a3a:	1cc8      	adds	r0, r1, #3
 8005a3c:	db02      	blt.n	8005a44 <_printf_float+0x130>
 8005a3e:	6863      	ldr	r3, [r4, #4]
 8005a40:	4299      	cmp	r1, r3
 8005a42:	dd40      	ble.n	8005ac6 <_printf_float+0x1b2>
 8005a44:	f1a9 0902 	sub.w	r9, r9, #2
 8005a48:	fa5f f989 	uxtb.w	r9, r9
 8005a4c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a50:	d81f      	bhi.n	8005a92 <_printf_float+0x17e>
 8005a52:	464a      	mov	r2, r9
 8005a54:	3901      	subs	r1, #1
 8005a56:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a5a:	910d      	str	r1, [sp, #52]	; 0x34
 8005a5c:	f7ff ff1b 	bl	8005896 <__exponent>
 8005a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a62:	4682      	mov	sl, r0
 8005a64:	1813      	adds	r3, r2, r0
 8005a66:	2a01      	cmp	r2, #1
 8005a68:	6123      	str	r3, [r4, #16]
 8005a6a:	dc02      	bgt.n	8005a72 <_printf_float+0x15e>
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	07d2      	lsls	r2, r2, #31
 8005a70:	d501      	bpl.n	8005a76 <_printf_float+0x162>
 8005a72:	3301      	adds	r3, #1
 8005a74:	6123      	str	r3, [r4, #16]
 8005a76:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d09b      	beq.n	80059b6 <_printf_float+0xa2>
 8005a7e:	232d      	movs	r3, #45	; 0x2d
 8005a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a84:	e797      	b.n	80059b6 <_printf_float+0xa2>
 8005a86:	2947      	cmp	r1, #71	; 0x47
 8005a88:	d1bc      	bne.n	8005a04 <_printf_float+0xf0>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1ba      	bne.n	8005a04 <_printf_float+0xf0>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e7b7      	b.n	8005a02 <_printf_float+0xee>
 8005a92:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005a96:	d118      	bne.n	8005aca <_printf_float+0x1b6>
 8005a98:	2900      	cmp	r1, #0
 8005a9a:	6863      	ldr	r3, [r4, #4]
 8005a9c:	dd0b      	ble.n	8005ab6 <_printf_float+0x1a2>
 8005a9e:	6121      	str	r1, [r4, #16]
 8005aa0:	b913      	cbnz	r3, 8005aa8 <_printf_float+0x194>
 8005aa2:	6822      	ldr	r2, [r4, #0]
 8005aa4:	07d0      	lsls	r0, r2, #31
 8005aa6:	d502      	bpl.n	8005aae <_printf_float+0x19a>
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	440b      	add	r3, r1
 8005aac:	6123      	str	r3, [r4, #16]
 8005aae:	f04f 0a00 	mov.w	sl, #0
 8005ab2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ab4:	e7df      	b.n	8005a76 <_printf_float+0x162>
 8005ab6:	b913      	cbnz	r3, 8005abe <_printf_float+0x1aa>
 8005ab8:	6822      	ldr	r2, [r4, #0]
 8005aba:	07d2      	lsls	r2, r2, #31
 8005abc:	d501      	bpl.n	8005ac2 <_printf_float+0x1ae>
 8005abe:	3302      	adds	r3, #2
 8005ac0:	e7f4      	b.n	8005aac <_printf_float+0x198>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e7f2      	b.n	8005aac <_printf_float+0x198>
 8005ac6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005acc:	4299      	cmp	r1, r3
 8005ace:	db05      	blt.n	8005adc <_printf_float+0x1c8>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	6121      	str	r1, [r4, #16]
 8005ad4:	07d8      	lsls	r0, r3, #31
 8005ad6:	d5ea      	bpl.n	8005aae <_printf_float+0x19a>
 8005ad8:	1c4b      	adds	r3, r1, #1
 8005ada:	e7e7      	b.n	8005aac <_printf_float+0x198>
 8005adc:	2900      	cmp	r1, #0
 8005ade:	bfcc      	ite	gt
 8005ae0:	2201      	movgt	r2, #1
 8005ae2:	f1c1 0202 	rsble	r2, r1, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	e7e0      	b.n	8005aac <_printf_float+0x198>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	055a      	lsls	r2, r3, #21
 8005aee:	d407      	bmi.n	8005b00 <_printf_float+0x1ec>
 8005af0:	6923      	ldr	r3, [r4, #16]
 8005af2:	4642      	mov	r2, r8
 8005af4:	4631      	mov	r1, r6
 8005af6:	4628      	mov	r0, r5
 8005af8:	47b8      	blx	r7
 8005afa:	3001      	adds	r0, #1
 8005afc:	d12b      	bne.n	8005b56 <_printf_float+0x242>
 8005afe:	e764      	b.n	80059ca <_printf_float+0xb6>
 8005b00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b04:	f240 80dd 	bls.w	8005cc2 <_printf_float+0x3ae>
 8005b08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f7fa ffb6 	bl	8000a80 <__aeabi_dcmpeq>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d033      	beq.n	8005b80 <_printf_float+0x26c>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	4a35      	ldr	r2, [pc, #212]	; (8005bf4 <_printf_float+0x2e0>)
 8005b20:	47b8      	blx	r7
 8005b22:	3001      	adds	r0, #1
 8005b24:	f43f af51 	beq.w	80059ca <_printf_float+0xb6>
 8005b28:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	db02      	blt.n	8005b36 <_printf_float+0x222>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	07d8      	lsls	r0, r3, #31
 8005b34:	d50f      	bpl.n	8005b56 <_printf_float+0x242>
 8005b36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	47b8      	blx	r7
 8005b40:	3001      	adds	r0, #1
 8005b42:	f43f af42 	beq.w	80059ca <_printf_float+0xb6>
 8005b46:	f04f 0800 	mov.w	r8, #0
 8005b4a:	f104 091a 	add.w	r9, r4, #26
 8005b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b50:	3b01      	subs	r3, #1
 8005b52:	4543      	cmp	r3, r8
 8005b54:	dc09      	bgt.n	8005b6a <_printf_float+0x256>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	079b      	lsls	r3, r3, #30
 8005b5a:	f100 8102 	bmi.w	8005d62 <_printf_float+0x44e>
 8005b5e:	68e0      	ldr	r0, [r4, #12]
 8005b60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b62:	4298      	cmp	r0, r3
 8005b64:	bfb8      	it	lt
 8005b66:	4618      	movlt	r0, r3
 8005b68:	e731      	b.n	80059ce <_printf_float+0xba>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	464a      	mov	r2, r9
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b8      	blx	r7
 8005b74:	3001      	adds	r0, #1
 8005b76:	f43f af28 	beq.w	80059ca <_printf_float+0xb6>
 8005b7a:	f108 0801 	add.w	r8, r8, #1
 8005b7e:	e7e6      	b.n	8005b4e <_printf_float+0x23a>
 8005b80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	dc38      	bgt.n	8005bf8 <_printf_float+0x2e4>
 8005b86:	2301      	movs	r3, #1
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <_printf_float+0x2e0>)
 8005b8e:	47b8      	blx	r7
 8005b90:	3001      	adds	r0, #1
 8005b92:	f43f af1a 	beq.w	80059ca <_printf_float+0xb6>
 8005b96:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	d102      	bne.n	8005ba4 <_printf_float+0x290>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	07d9      	lsls	r1, r3, #31
 8005ba2:	d5d8      	bpl.n	8005b56 <_printf_float+0x242>
 8005ba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f43f af0b 	beq.w	80059ca <_printf_float+0xb6>
 8005bb4:	f04f 0900 	mov.w	r9, #0
 8005bb8:	f104 0a1a 	add.w	sl, r4, #26
 8005bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bbe:	425b      	negs	r3, r3
 8005bc0:	454b      	cmp	r3, r9
 8005bc2:	dc01      	bgt.n	8005bc8 <_printf_float+0x2b4>
 8005bc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bc6:	e794      	b.n	8005af2 <_printf_float+0x1de>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4652      	mov	r2, sl
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	f43f aef9 	beq.w	80059ca <_printf_float+0xb6>
 8005bd8:	f109 0901 	add.w	r9, r9, #1
 8005bdc:	e7ee      	b.n	8005bbc <_printf_float+0x2a8>
 8005bde:	bf00      	nop
 8005be0:	7fefffff 	.word	0x7fefffff
 8005be4:	0800aba4 	.word	0x0800aba4
 8005be8:	0800aba8 	.word	0x0800aba8
 8005bec:	0800abb0 	.word	0x0800abb0
 8005bf0:	0800abac 	.word	0x0800abac
 8005bf4:	0800afb9 	.word	0x0800afb9
 8005bf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	bfa8      	it	ge
 8005c00:	461a      	movge	r2, r3
 8005c02:	2a00      	cmp	r2, #0
 8005c04:	4691      	mov	r9, r2
 8005c06:	dc37      	bgt.n	8005c78 <_printf_float+0x364>
 8005c08:	f04f 0b00 	mov.w	fp, #0
 8005c0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c10:	f104 021a 	add.w	r2, r4, #26
 8005c14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005c18:	ebaa 0309 	sub.w	r3, sl, r9
 8005c1c:	455b      	cmp	r3, fp
 8005c1e:	dc33      	bgt.n	8005c88 <_printf_float+0x374>
 8005c20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c24:	429a      	cmp	r2, r3
 8005c26:	db3b      	blt.n	8005ca0 <_printf_float+0x38c>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	07da      	lsls	r2, r3, #31
 8005c2c:	d438      	bmi.n	8005ca0 <_printf_float+0x38c>
 8005c2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c30:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c32:	eba2 030a 	sub.w	r3, r2, sl
 8005c36:	eba2 0901 	sub.w	r9, r2, r1
 8005c3a:	4599      	cmp	r9, r3
 8005c3c:	bfa8      	it	ge
 8005c3e:	4699      	movge	r9, r3
 8005c40:	f1b9 0f00 	cmp.w	r9, #0
 8005c44:	dc34      	bgt.n	8005cb0 <_printf_float+0x39c>
 8005c46:	f04f 0800 	mov.w	r8, #0
 8005c4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c4e:	f104 0a1a 	add.w	sl, r4, #26
 8005c52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	eba3 0309 	sub.w	r3, r3, r9
 8005c5c:	4543      	cmp	r3, r8
 8005c5e:	f77f af7a 	ble.w	8005b56 <_printf_float+0x242>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4652      	mov	r2, sl
 8005c66:	4631      	mov	r1, r6
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b8      	blx	r7
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f43f aeac 	beq.w	80059ca <_printf_float+0xb6>
 8005c72:	f108 0801 	add.w	r8, r8, #1
 8005c76:	e7ec      	b.n	8005c52 <_printf_float+0x33e>
 8005c78:	4613      	mov	r3, r2
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	4628      	mov	r0, r5
 8005c80:	47b8      	blx	r7
 8005c82:	3001      	adds	r0, #1
 8005c84:	d1c0      	bne.n	8005c08 <_printf_float+0x2f4>
 8005c86:	e6a0      	b.n	80059ca <_printf_float+0xb6>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c90:	47b8      	blx	r7
 8005c92:	3001      	adds	r0, #1
 8005c94:	f43f ae99 	beq.w	80059ca <_printf_float+0xb6>
 8005c98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c9a:	f10b 0b01 	add.w	fp, fp, #1
 8005c9e:	e7b9      	b.n	8005c14 <_printf_float+0x300>
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	d1bf      	bne.n	8005c2e <_printf_float+0x31a>
 8005cae:	e68c      	b.n	80059ca <_printf_float+0xb6>
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	eb08 020a 	add.w	r2, r8, sl
 8005cba:	47b8      	blx	r7
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d1c2      	bne.n	8005c46 <_printf_float+0x332>
 8005cc0:	e683      	b.n	80059ca <_printf_float+0xb6>
 8005cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cc4:	2a01      	cmp	r2, #1
 8005cc6:	dc01      	bgt.n	8005ccc <_printf_float+0x3b8>
 8005cc8:	07db      	lsls	r3, r3, #31
 8005cca:	d537      	bpl.n	8005d3c <_printf_float+0x428>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	4642      	mov	r2, r8
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	f43f ae77 	beq.w	80059ca <_printf_float+0xb6>
 8005cdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	47b8      	blx	r7
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	f43f ae6f 	beq.w	80059ca <_printf_float+0xb6>
 8005cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f7fa fec4 	bl	8000a80 <__aeabi_dcmpeq>
 8005cf8:	b9d8      	cbnz	r0, 8005d32 <_printf_float+0x41e>
 8005cfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cfc:	f108 0201 	add.w	r2, r8, #1
 8005d00:	3b01      	subs	r3, #1
 8005d02:	4631      	mov	r1, r6
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b8      	blx	r7
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d10e      	bne.n	8005d2a <_printf_float+0x416>
 8005d0c:	e65d      	b.n	80059ca <_printf_float+0xb6>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	464a      	mov	r2, r9
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	f43f ae56 	beq.w	80059ca <_printf_float+0xb6>
 8005d1e:	f108 0801 	add.w	r8, r8, #1
 8005d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d24:	3b01      	subs	r3, #1
 8005d26:	4543      	cmp	r3, r8
 8005d28:	dcf1      	bgt.n	8005d0e <_printf_float+0x3fa>
 8005d2a:	4653      	mov	r3, sl
 8005d2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d30:	e6e0      	b.n	8005af4 <_printf_float+0x1e0>
 8005d32:	f04f 0800 	mov.w	r8, #0
 8005d36:	f104 091a 	add.w	r9, r4, #26
 8005d3a:	e7f2      	b.n	8005d22 <_printf_float+0x40e>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	4642      	mov	r2, r8
 8005d40:	e7df      	b.n	8005d02 <_printf_float+0x3ee>
 8005d42:	2301      	movs	r3, #1
 8005d44:	464a      	mov	r2, r9
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b8      	blx	r7
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	f43f ae3c 	beq.w	80059ca <_printf_float+0xb6>
 8005d52:	f108 0801 	add.w	r8, r8, #1
 8005d56:	68e3      	ldr	r3, [r4, #12]
 8005d58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d5a:	1a5b      	subs	r3, r3, r1
 8005d5c:	4543      	cmp	r3, r8
 8005d5e:	dcf0      	bgt.n	8005d42 <_printf_float+0x42e>
 8005d60:	e6fd      	b.n	8005b5e <_printf_float+0x24a>
 8005d62:	f04f 0800 	mov.w	r8, #0
 8005d66:	f104 0919 	add.w	r9, r4, #25
 8005d6a:	e7f4      	b.n	8005d56 <_printf_float+0x442>

08005d6c <_printf_common>:
 8005d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	4616      	mov	r6, r2
 8005d72:	4699      	mov	r9, r3
 8005d74:	688a      	ldr	r2, [r1, #8]
 8005d76:	690b      	ldr	r3, [r1, #16]
 8005d78:	4607      	mov	r7, r0
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	bfb8      	it	lt
 8005d7e:	4613      	movlt	r3, r2
 8005d80:	6033      	str	r3, [r6, #0]
 8005d82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d86:	460c      	mov	r4, r1
 8005d88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d8c:	b10a      	cbz	r2, 8005d92 <_printf_common+0x26>
 8005d8e:	3301      	adds	r3, #1
 8005d90:	6033      	str	r3, [r6, #0]
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	0699      	lsls	r1, r3, #26
 8005d96:	bf42      	ittt	mi
 8005d98:	6833      	ldrmi	r3, [r6, #0]
 8005d9a:	3302      	addmi	r3, #2
 8005d9c:	6033      	strmi	r3, [r6, #0]
 8005d9e:	6825      	ldr	r5, [r4, #0]
 8005da0:	f015 0506 	ands.w	r5, r5, #6
 8005da4:	d106      	bne.n	8005db4 <_printf_common+0x48>
 8005da6:	f104 0a19 	add.w	sl, r4, #25
 8005daa:	68e3      	ldr	r3, [r4, #12]
 8005dac:	6832      	ldr	r2, [r6, #0]
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	42ab      	cmp	r3, r5
 8005db2:	dc28      	bgt.n	8005e06 <_printf_common+0x9a>
 8005db4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005db8:	1e13      	subs	r3, r2, #0
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	bf18      	it	ne
 8005dbe:	2301      	movne	r3, #1
 8005dc0:	0692      	lsls	r2, r2, #26
 8005dc2:	d42d      	bmi.n	8005e20 <_printf_common+0xb4>
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dcc:	47c0      	blx	r8
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d020      	beq.n	8005e14 <_printf_common+0xa8>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	68e5      	ldr	r5, [r4, #12]
 8005dd6:	f003 0306 	and.w	r3, r3, #6
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	bf18      	it	ne
 8005dde:	2500      	movne	r5, #0
 8005de0:	6832      	ldr	r2, [r6, #0]
 8005de2:	f04f 0600 	mov.w	r6, #0
 8005de6:	68a3      	ldr	r3, [r4, #8]
 8005de8:	bf08      	it	eq
 8005dea:	1aad      	subeq	r5, r5, r2
 8005dec:	6922      	ldr	r2, [r4, #16]
 8005dee:	bf08      	it	eq
 8005df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df4:	4293      	cmp	r3, r2
 8005df6:	bfc4      	itt	gt
 8005df8:	1a9b      	subgt	r3, r3, r2
 8005dfa:	18ed      	addgt	r5, r5, r3
 8005dfc:	341a      	adds	r4, #26
 8005dfe:	42b5      	cmp	r5, r6
 8005e00:	d11a      	bne.n	8005e38 <_printf_common+0xcc>
 8005e02:	2000      	movs	r0, #0
 8005e04:	e008      	b.n	8005e18 <_printf_common+0xac>
 8005e06:	2301      	movs	r3, #1
 8005e08:	4652      	mov	r2, sl
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	47c0      	blx	r8
 8005e10:	3001      	adds	r0, #1
 8005e12:	d103      	bne.n	8005e1c <_printf_common+0xb0>
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295
 8005e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1c:	3501      	adds	r5, #1
 8005e1e:	e7c4      	b.n	8005daa <_printf_common+0x3e>
 8005e20:	2030      	movs	r0, #48	; 0x30
 8005e22:	18e1      	adds	r1, r4, r3
 8005e24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e2e:	4422      	add	r2, r4
 8005e30:	3302      	adds	r3, #2
 8005e32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e36:	e7c5      	b.n	8005dc4 <_printf_common+0x58>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4638      	mov	r0, r7
 8005e40:	47c0      	blx	r8
 8005e42:	3001      	adds	r0, #1
 8005e44:	d0e6      	beq.n	8005e14 <_printf_common+0xa8>
 8005e46:	3601      	adds	r6, #1
 8005e48:	e7d9      	b.n	8005dfe <_printf_common+0x92>
	...

08005e4c <_printf_i>:
 8005e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e50:	460c      	mov	r4, r1
 8005e52:	7e27      	ldrb	r7, [r4, #24]
 8005e54:	4691      	mov	r9, r2
 8005e56:	2f78      	cmp	r7, #120	; 0x78
 8005e58:	4680      	mov	r8, r0
 8005e5a:	469a      	mov	sl, r3
 8005e5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e62:	d807      	bhi.n	8005e74 <_printf_i+0x28>
 8005e64:	2f62      	cmp	r7, #98	; 0x62
 8005e66:	d80a      	bhi.n	8005e7e <_printf_i+0x32>
 8005e68:	2f00      	cmp	r7, #0
 8005e6a:	f000 80d9 	beq.w	8006020 <_printf_i+0x1d4>
 8005e6e:	2f58      	cmp	r7, #88	; 0x58
 8005e70:	f000 80a4 	beq.w	8005fbc <_printf_i+0x170>
 8005e74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e7c:	e03a      	b.n	8005ef4 <_printf_i+0xa8>
 8005e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e82:	2b15      	cmp	r3, #21
 8005e84:	d8f6      	bhi.n	8005e74 <_printf_i+0x28>
 8005e86:	a001      	add	r0, pc, #4	; (adr r0, 8005e8c <_printf_i+0x40>)
 8005e88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e8c:	08005ee5 	.word	0x08005ee5
 8005e90:	08005ef9 	.word	0x08005ef9
 8005e94:	08005e75 	.word	0x08005e75
 8005e98:	08005e75 	.word	0x08005e75
 8005e9c:	08005e75 	.word	0x08005e75
 8005ea0:	08005e75 	.word	0x08005e75
 8005ea4:	08005ef9 	.word	0x08005ef9
 8005ea8:	08005e75 	.word	0x08005e75
 8005eac:	08005e75 	.word	0x08005e75
 8005eb0:	08005e75 	.word	0x08005e75
 8005eb4:	08005e75 	.word	0x08005e75
 8005eb8:	08006007 	.word	0x08006007
 8005ebc:	08005f29 	.word	0x08005f29
 8005ec0:	08005fe9 	.word	0x08005fe9
 8005ec4:	08005e75 	.word	0x08005e75
 8005ec8:	08005e75 	.word	0x08005e75
 8005ecc:	08006029 	.word	0x08006029
 8005ed0:	08005e75 	.word	0x08005e75
 8005ed4:	08005f29 	.word	0x08005f29
 8005ed8:	08005e75 	.word	0x08005e75
 8005edc:	08005e75 	.word	0x08005e75
 8005ee0:	08005ff1 	.word	0x08005ff1
 8005ee4:	680b      	ldr	r3, [r1, #0]
 8005ee6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005eea:	1d1a      	adds	r2, r3, #4
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	600a      	str	r2, [r1, #0]
 8005ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0a4      	b.n	8006042 <_printf_i+0x1f6>
 8005ef8:	6825      	ldr	r5, [r4, #0]
 8005efa:	6808      	ldr	r0, [r1, #0]
 8005efc:	062e      	lsls	r6, r5, #24
 8005efe:	f100 0304 	add.w	r3, r0, #4
 8005f02:	d50a      	bpl.n	8005f1a <_printf_i+0xce>
 8005f04:	6805      	ldr	r5, [r0, #0]
 8005f06:	600b      	str	r3, [r1, #0]
 8005f08:	2d00      	cmp	r5, #0
 8005f0a:	da03      	bge.n	8005f14 <_printf_i+0xc8>
 8005f0c:	232d      	movs	r3, #45	; 0x2d
 8005f0e:	426d      	negs	r5, r5
 8005f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f14:	230a      	movs	r3, #10
 8005f16:	485e      	ldr	r0, [pc, #376]	; (8006090 <_printf_i+0x244>)
 8005f18:	e019      	b.n	8005f4e <_printf_i+0x102>
 8005f1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f1e:	6805      	ldr	r5, [r0, #0]
 8005f20:	600b      	str	r3, [r1, #0]
 8005f22:	bf18      	it	ne
 8005f24:	b22d      	sxthne	r5, r5
 8005f26:	e7ef      	b.n	8005f08 <_printf_i+0xbc>
 8005f28:	680b      	ldr	r3, [r1, #0]
 8005f2a:	6825      	ldr	r5, [r4, #0]
 8005f2c:	1d18      	adds	r0, r3, #4
 8005f2e:	6008      	str	r0, [r1, #0]
 8005f30:	0628      	lsls	r0, r5, #24
 8005f32:	d501      	bpl.n	8005f38 <_printf_i+0xec>
 8005f34:	681d      	ldr	r5, [r3, #0]
 8005f36:	e002      	b.n	8005f3e <_printf_i+0xf2>
 8005f38:	0669      	lsls	r1, r5, #25
 8005f3a:	d5fb      	bpl.n	8005f34 <_printf_i+0xe8>
 8005f3c:	881d      	ldrh	r5, [r3, #0]
 8005f3e:	2f6f      	cmp	r7, #111	; 0x6f
 8005f40:	bf0c      	ite	eq
 8005f42:	2308      	moveq	r3, #8
 8005f44:	230a      	movne	r3, #10
 8005f46:	4852      	ldr	r0, [pc, #328]	; (8006090 <_printf_i+0x244>)
 8005f48:	2100      	movs	r1, #0
 8005f4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f4e:	6866      	ldr	r6, [r4, #4]
 8005f50:	2e00      	cmp	r6, #0
 8005f52:	bfa8      	it	ge
 8005f54:	6821      	ldrge	r1, [r4, #0]
 8005f56:	60a6      	str	r6, [r4, #8]
 8005f58:	bfa4      	itt	ge
 8005f5a:	f021 0104 	bicge.w	r1, r1, #4
 8005f5e:	6021      	strge	r1, [r4, #0]
 8005f60:	b90d      	cbnz	r5, 8005f66 <_printf_i+0x11a>
 8005f62:	2e00      	cmp	r6, #0
 8005f64:	d04d      	beq.n	8006002 <_printf_i+0x1b6>
 8005f66:	4616      	mov	r6, r2
 8005f68:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f6c:	fb03 5711 	mls	r7, r3, r1, r5
 8005f70:	5dc7      	ldrb	r7, [r0, r7]
 8005f72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f76:	462f      	mov	r7, r5
 8005f78:	42bb      	cmp	r3, r7
 8005f7a:	460d      	mov	r5, r1
 8005f7c:	d9f4      	bls.n	8005f68 <_printf_i+0x11c>
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d10b      	bne.n	8005f9a <_printf_i+0x14e>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	07df      	lsls	r7, r3, #31
 8005f86:	d508      	bpl.n	8005f9a <_printf_i+0x14e>
 8005f88:	6923      	ldr	r3, [r4, #16]
 8005f8a:	6861      	ldr	r1, [r4, #4]
 8005f8c:	4299      	cmp	r1, r3
 8005f8e:	bfde      	ittt	le
 8005f90:	2330      	movle	r3, #48	; 0x30
 8005f92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f9a:	1b92      	subs	r2, r2, r6
 8005f9c:	6122      	str	r2, [r4, #16]
 8005f9e:	464b      	mov	r3, r9
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	f8cd a000 	str.w	sl, [sp]
 8005fa8:	aa03      	add	r2, sp, #12
 8005faa:	f7ff fedf 	bl	8005d6c <_printf_common>
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d14c      	bne.n	800604c <_printf_i+0x200>
 8005fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb6:	b004      	add	sp, #16
 8005fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fbc:	4834      	ldr	r0, [pc, #208]	; (8006090 <_printf_i+0x244>)
 8005fbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fc2:	680e      	ldr	r6, [r1, #0]
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005fca:	061f      	lsls	r7, r3, #24
 8005fcc:	600e      	str	r6, [r1, #0]
 8005fce:	d514      	bpl.n	8005ffa <_printf_i+0x1ae>
 8005fd0:	07d9      	lsls	r1, r3, #31
 8005fd2:	bf44      	itt	mi
 8005fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd8:	6023      	strmi	r3, [r4, #0]
 8005fda:	b91d      	cbnz	r5, 8005fe4 <_printf_i+0x198>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	f023 0320 	bic.w	r3, r3, #32
 8005fe2:	6023      	str	r3, [r4, #0]
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	e7af      	b.n	8005f48 <_printf_i+0xfc>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	f043 0320 	orr.w	r3, r3, #32
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	2378      	movs	r3, #120	; 0x78
 8005ff2:	4828      	ldr	r0, [pc, #160]	; (8006094 <_printf_i+0x248>)
 8005ff4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ff8:	e7e3      	b.n	8005fc2 <_printf_i+0x176>
 8005ffa:	065e      	lsls	r6, r3, #25
 8005ffc:	bf48      	it	mi
 8005ffe:	b2ad      	uxthmi	r5, r5
 8006000:	e7e6      	b.n	8005fd0 <_printf_i+0x184>
 8006002:	4616      	mov	r6, r2
 8006004:	e7bb      	b.n	8005f7e <_printf_i+0x132>
 8006006:	680b      	ldr	r3, [r1, #0]
 8006008:	6826      	ldr	r6, [r4, #0]
 800600a:	1d1d      	adds	r5, r3, #4
 800600c:	6960      	ldr	r0, [r4, #20]
 800600e:	600d      	str	r5, [r1, #0]
 8006010:	0635      	lsls	r5, r6, #24
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	d501      	bpl.n	800601a <_printf_i+0x1ce>
 8006016:	6018      	str	r0, [r3, #0]
 8006018:	e002      	b.n	8006020 <_printf_i+0x1d4>
 800601a:	0671      	lsls	r1, r6, #25
 800601c:	d5fb      	bpl.n	8006016 <_printf_i+0x1ca>
 800601e:	8018      	strh	r0, [r3, #0]
 8006020:	2300      	movs	r3, #0
 8006022:	4616      	mov	r6, r2
 8006024:	6123      	str	r3, [r4, #16]
 8006026:	e7ba      	b.n	8005f9e <_printf_i+0x152>
 8006028:	680b      	ldr	r3, [r1, #0]
 800602a:	1d1a      	adds	r2, r3, #4
 800602c:	600a      	str	r2, [r1, #0]
 800602e:	681e      	ldr	r6, [r3, #0]
 8006030:	2100      	movs	r1, #0
 8006032:	4630      	mov	r0, r6
 8006034:	6862      	ldr	r2, [r4, #4]
 8006036:	f002 fbe3 	bl	8008800 <memchr>
 800603a:	b108      	cbz	r0, 8006040 <_printf_i+0x1f4>
 800603c:	1b80      	subs	r0, r0, r6
 800603e:	6060      	str	r0, [r4, #4]
 8006040:	6863      	ldr	r3, [r4, #4]
 8006042:	6123      	str	r3, [r4, #16]
 8006044:	2300      	movs	r3, #0
 8006046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800604a:	e7a8      	b.n	8005f9e <_printf_i+0x152>
 800604c:	4632      	mov	r2, r6
 800604e:	4649      	mov	r1, r9
 8006050:	4640      	mov	r0, r8
 8006052:	6923      	ldr	r3, [r4, #16]
 8006054:	47d0      	blx	sl
 8006056:	3001      	adds	r0, #1
 8006058:	d0ab      	beq.n	8005fb2 <_printf_i+0x166>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	079b      	lsls	r3, r3, #30
 800605e:	d413      	bmi.n	8006088 <_printf_i+0x23c>
 8006060:	68e0      	ldr	r0, [r4, #12]
 8006062:	9b03      	ldr	r3, [sp, #12]
 8006064:	4298      	cmp	r0, r3
 8006066:	bfb8      	it	lt
 8006068:	4618      	movlt	r0, r3
 800606a:	e7a4      	b.n	8005fb6 <_printf_i+0x16a>
 800606c:	2301      	movs	r3, #1
 800606e:	4632      	mov	r2, r6
 8006070:	4649      	mov	r1, r9
 8006072:	4640      	mov	r0, r8
 8006074:	47d0      	blx	sl
 8006076:	3001      	adds	r0, #1
 8006078:	d09b      	beq.n	8005fb2 <_printf_i+0x166>
 800607a:	3501      	adds	r5, #1
 800607c:	68e3      	ldr	r3, [r4, #12]
 800607e:	9903      	ldr	r1, [sp, #12]
 8006080:	1a5b      	subs	r3, r3, r1
 8006082:	42ab      	cmp	r3, r5
 8006084:	dcf2      	bgt.n	800606c <_printf_i+0x220>
 8006086:	e7eb      	b.n	8006060 <_printf_i+0x214>
 8006088:	2500      	movs	r5, #0
 800608a:	f104 0619 	add.w	r6, r4, #25
 800608e:	e7f5      	b.n	800607c <_printf_i+0x230>
 8006090:	0800abb4 	.word	0x0800abb4
 8006094:	0800abc5 	.word	0x0800abc5

08006098 <_scanf_float>:
 8006098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	b087      	sub	sp, #28
 800609e:	9303      	str	r3, [sp, #12]
 80060a0:	688b      	ldr	r3, [r1, #8]
 80060a2:	4617      	mov	r7, r2
 80060a4:	1e5a      	subs	r2, r3, #1
 80060a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80060aa:	bf85      	ittet	hi
 80060ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80060b0:	195b      	addhi	r3, r3, r5
 80060b2:	2300      	movls	r3, #0
 80060b4:	9302      	strhi	r3, [sp, #8]
 80060b6:	bf88      	it	hi
 80060b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80060bc:	468b      	mov	fp, r1
 80060be:	f04f 0500 	mov.w	r5, #0
 80060c2:	bf8c      	ite	hi
 80060c4:	608b      	strhi	r3, [r1, #8]
 80060c6:	9302      	strls	r3, [sp, #8]
 80060c8:	680b      	ldr	r3, [r1, #0]
 80060ca:	4680      	mov	r8, r0
 80060cc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80060d0:	f84b 3b1c 	str.w	r3, [fp], #28
 80060d4:	460c      	mov	r4, r1
 80060d6:	465e      	mov	r6, fp
 80060d8:	46aa      	mov	sl, r5
 80060da:	46a9      	mov	r9, r5
 80060dc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80060e0:	9501      	str	r5, [sp, #4]
 80060e2:	68a2      	ldr	r2, [r4, #8]
 80060e4:	b152      	cbz	r2, 80060fc <_scanf_float+0x64>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b4e      	cmp	r3, #78	; 0x4e
 80060ec:	d864      	bhi.n	80061b8 <_scanf_float+0x120>
 80060ee:	2b40      	cmp	r3, #64	; 0x40
 80060f0:	d83c      	bhi.n	800616c <_scanf_float+0xd4>
 80060f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80060f6:	b2c8      	uxtb	r0, r1
 80060f8:	280e      	cmp	r0, #14
 80060fa:	d93a      	bls.n	8006172 <_scanf_float+0xda>
 80060fc:	f1b9 0f00 	cmp.w	r9, #0
 8006100:	d003      	beq.n	800610a <_scanf_float+0x72>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800610e:	f1ba 0f01 	cmp.w	sl, #1
 8006112:	f200 8113 	bhi.w	800633c <_scanf_float+0x2a4>
 8006116:	455e      	cmp	r6, fp
 8006118:	f200 8105 	bhi.w	8006326 <_scanf_float+0x28e>
 800611c:	2501      	movs	r5, #1
 800611e:	4628      	mov	r0, r5
 8006120:	b007      	add	sp, #28
 8006122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006126:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800612a:	2a0d      	cmp	r2, #13
 800612c:	d8e6      	bhi.n	80060fc <_scanf_float+0x64>
 800612e:	a101      	add	r1, pc, #4	; (adr r1, 8006134 <_scanf_float+0x9c>)
 8006130:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006134:	08006273 	.word	0x08006273
 8006138:	080060fd 	.word	0x080060fd
 800613c:	080060fd 	.word	0x080060fd
 8006140:	080060fd 	.word	0x080060fd
 8006144:	080062d3 	.word	0x080062d3
 8006148:	080062ab 	.word	0x080062ab
 800614c:	080060fd 	.word	0x080060fd
 8006150:	080060fd 	.word	0x080060fd
 8006154:	08006281 	.word	0x08006281
 8006158:	080060fd 	.word	0x080060fd
 800615c:	080060fd 	.word	0x080060fd
 8006160:	080060fd 	.word	0x080060fd
 8006164:	080060fd 	.word	0x080060fd
 8006168:	08006239 	.word	0x08006239
 800616c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006170:	e7db      	b.n	800612a <_scanf_float+0x92>
 8006172:	290e      	cmp	r1, #14
 8006174:	d8c2      	bhi.n	80060fc <_scanf_float+0x64>
 8006176:	a001      	add	r0, pc, #4	; (adr r0, 800617c <_scanf_float+0xe4>)
 8006178:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800617c:	0800622b 	.word	0x0800622b
 8006180:	080060fd 	.word	0x080060fd
 8006184:	0800622b 	.word	0x0800622b
 8006188:	080062bf 	.word	0x080062bf
 800618c:	080060fd 	.word	0x080060fd
 8006190:	080061d9 	.word	0x080061d9
 8006194:	08006215 	.word	0x08006215
 8006198:	08006215 	.word	0x08006215
 800619c:	08006215 	.word	0x08006215
 80061a0:	08006215 	.word	0x08006215
 80061a4:	08006215 	.word	0x08006215
 80061a8:	08006215 	.word	0x08006215
 80061ac:	08006215 	.word	0x08006215
 80061b0:	08006215 	.word	0x08006215
 80061b4:	08006215 	.word	0x08006215
 80061b8:	2b6e      	cmp	r3, #110	; 0x6e
 80061ba:	d809      	bhi.n	80061d0 <_scanf_float+0x138>
 80061bc:	2b60      	cmp	r3, #96	; 0x60
 80061be:	d8b2      	bhi.n	8006126 <_scanf_float+0x8e>
 80061c0:	2b54      	cmp	r3, #84	; 0x54
 80061c2:	d077      	beq.n	80062b4 <_scanf_float+0x21c>
 80061c4:	2b59      	cmp	r3, #89	; 0x59
 80061c6:	d199      	bne.n	80060fc <_scanf_float+0x64>
 80061c8:	2d07      	cmp	r5, #7
 80061ca:	d197      	bne.n	80060fc <_scanf_float+0x64>
 80061cc:	2508      	movs	r5, #8
 80061ce:	e029      	b.n	8006224 <_scanf_float+0x18c>
 80061d0:	2b74      	cmp	r3, #116	; 0x74
 80061d2:	d06f      	beq.n	80062b4 <_scanf_float+0x21c>
 80061d4:	2b79      	cmp	r3, #121	; 0x79
 80061d6:	e7f6      	b.n	80061c6 <_scanf_float+0x12e>
 80061d8:	6821      	ldr	r1, [r4, #0]
 80061da:	05c8      	lsls	r0, r1, #23
 80061dc:	d51a      	bpl.n	8006214 <_scanf_float+0x17c>
 80061de:	9b02      	ldr	r3, [sp, #8]
 80061e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80061e4:	6021      	str	r1, [r4, #0]
 80061e6:	f109 0901 	add.w	r9, r9, #1
 80061ea:	b11b      	cbz	r3, 80061f4 <_scanf_float+0x15c>
 80061ec:	3b01      	subs	r3, #1
 80061ee:	3201      	adds	r2, #1
 80061f0:	9302      	str	r3, [sp, #8]
 80061f2:	60a2      	str	r2, [r4, #8]
 80061f4:	68a3      	ldr	r3, [r4, #8]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	60a3      	str	r3, [r4, #8]
 80061fa:	6923      	ldr	r3, [r4, #16]
 80061fc:	3301      	adds	r3, #1
 80061fe:	6123      	str	r3, [r4, #16]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3b01      	subs	r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	607b      	str	r3, [r7, #4]
 8006208:	f340 8084 	ble.w	8006314 <_scanf_float+0x27c>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	3301      	adds	r3, #1
 8006210:	603b      	str	r3, [r7, #0]
 8006212:	e766      	b.n	80060e2 <_scanf_float+0x4a>
 8006214:	eb1a 0f05 	cmn.w	sl, r5
 8006218:	f47f af70 	bne.w	80060fc <_scanf_float+0x64>
 800621c:	6822      	ldr	r2, [r4, #0]
 800621e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006222:	6022      	str	r2, [r4, #0]
 8006224:	f806 3b01 	strb.w	r3, [r6], #1
 8006228:	e7e4      	b.n	80061f4 <_scanf_float+0x15c>
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	0610      	lsls	r0, r2, #24
 800622e:	f57f af65 	bpl.w	80060fc <_scanf_float+0x64>
 8006232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006236:	e7f4      	b.n	8006222 <_scanf_float+0x18a>
 8006238:	f1ba 0f00 	cmp.w	sl, #0
 800623c:	d10e      	bne.n	800625c <_scanf_float+0x1c4>
 800623e:	f1b9 0f00 	cmp.w	r9, #0
 8006242:	d10e      	bne.n	8006262 <_scanf_float+0x1ca>
 8006244:	6822      	ldr	r2, [r4, #0]
 8006246:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800624a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800624e:	d108      	bne.n	8006262 <_scanf_float+0x1ca>
 8006250:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006254:	f04f 0a01 	mov.w	sl, #1
 8006258:	6022      	str	r2, [r4, #0]
 800625a:	e7e3      	b.n	8006224 <_scanf_float+0x18c>
 800625c:	f1ba 0f02 	cmp.w	sl, #2
 8006260:	d055      	beq.n	800630e <_scanf_float+0x276>
 8006262:	2d01      	cmp	r5, #1
 8006264:	d002      	beq.n	800626c <_scanf_float+0x1d4>
 8006266:	2d04      	cmp	r5, #4
 8006268:	f47f af48 	bne.w	80060fc <_scanf_float+0x64>
 800626c:	3501      	adds	r5, #1
 800626e:	b2ed      	uxtb	r5, r5
 8006270:	e7d8      	b.n	8006224 <_scanf_float+0x18c>
 8006272:	f1ba 0f01 	cmp.w	sl, #1
 8006276:	f47f af41 	bne.w	80060fc <_scanf_float+0x64>
 800627a:	f04f 0a02 	mov.w	sl, #2
 800627e:	e7d1      	b.n	8006224 <_scanf_float+0x18c>
 8006280:	b97d      	cbnz	r5, 80062a2 <_scanf_float+0x20a>
 8006282:	f1b9 0f00 	cmp.w	r9, #0
 8006286:	f47f af3c 	bne.w	8006102 <_scanf_float+0x6a>
 800628a:	6822      	ldr	r2, [r4, #0]
 800628c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006290:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006294:	f47f af39 	bne.w	800610a <_scanf_float+0x72>
 8006298:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800629c:	2501      	movs	r5, #1
 800629e:	6022      	str	r2, [r4, #0]
 80062a0:	e7c0      	b.n	8006224 <_scanf_float+0x18c>
 80062a2:	2d03      	cmp	r5, #3
 80062a4:	d0e2      	beq.n	800626c <_scanf_float+0x1d4>
 80062a6:	2d05      	cmp	r5, #5
 80062a8:	e7de      	b.n	8006268 <_scanf_float+0x1d0>
 80062aa:	2d02      	cmp	r5, #2
 80062ac:	f47f af26 	bne.w	80060fc <_scanf_float+0x64>
 80062b0:	2503      	movs	r5, #3
 80062b2:	e7b7      	b.n	8006224 <_scanf_float+0x18c>
 80062b4:	2d06      	cmp	r5, #6
 80062b6:	f47f af21 	bne.w	80060fc <_scanf_float+0x64>
 80062ba:	2507      	movs	r5, #7
 80062bc:	e7b2      	b.n	8006224 <_scanf_float+0x18c>
 80062be:	6822      	ldr	r2, [r4, #0]
 80062c0:	0591      	lsls	r1, r2, #22
 80062c2:	f57f af1b 	bpl.w	80060fc <_scanf_float+0x64>
 80062c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80062ca:	6022      	str	r2, [r4, #0]
 80062cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80062d0:	e7a8      	b.n	8006224 <_scanf_float+0x18c>
 80062d2:	6822      	ldr	r2, [r4, #0]
 80062d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80062d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80062dc:	d006      	beq.n	80062ec <_scanf_float+0x254>
 80062de:	0550      	lsls	r0, r2, #21
 80062e0:	f57f af0c 	bpl.w	80060fc <_scanf_float+0x64>
 80062e4:	f1b9 0f00 	cmp.w	r9, #0
 80062e8:	f43f af0f 	beq.w	800610a <_scanf_float+0x72>
 80062ec:	0591      	lsls	r1, r2, #22
 80062ee:	bf58      	it	pl
 80062f0:	9901      	ldrpl	r1, [sp, #4]
 80062f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062f6:	bf58      	it	pl
 80062f8:	eba9 0101 	subpl.w	r1, r9, r1
 80062fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006300:	f04f 0900 	mov.w	r9, #0
 8006304:	bf58      	it	pl
 8006306:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800630a:	6022      	str	r2, [r4, #0]
 800630c:	e78a      	b.n	8006224 <_scanf_float+0x18c>
 800630e:	f04f 0a03 	mov.w	sl, #3
 8006312:	e787      	b.n	8006224 <_scanf_float+0x18c>
 8006314:	4639      	mov	r1, r7
 8006316:	4640      	mov	r0, r8
 8006318:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800631c:	4798      	blx	r3
 800631e:	2800      	cmp	r0, #0
 8006320:	f43f aedf 	beq.w	80060e2 <_scanf_float+0x4a>
 8006324:	e6ea      	b.n	80060fc <_scanf_float+0x64>
 8006326:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800632a:	463a      	mov	r2, r7
 800632c:	4640      	mov	r0, r8
 800632e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006332:	4798      	blx	r3
 8006334:	6923      	ldr	r3, [r4, #16]
 8006336:	3b01      	subs	r3, #1
 8006338:	6123      	str	r3, [r4, #16]
 800633a:	e6ec      	b.n	8006116 <_scanf_float+0x7e>
 800633c:	1e6b      	subs	r3, r5, #1
 800633e:	2b06      	cmp	r3, #6
 8006340:	d825      	bhi.n	800638e <_scanf_float+0x2f6>
 8006342:	2d02      	cmp	r5, #2
 8006344:	d836      	bhi.n	80063b4 <_scanf_float+0x31c>
 8006346:	455e      	cmp	r6, fp
 8006348:	f67f aee8 	bls.w	800611c <_scanf_float+0x84>
 800634c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006350:	463a      	mov	r2, r7
 8006352:	4640      	mov	r0, r8
 8006354:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006358:	4798      	blx	r3
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	3b01      	subs	r3, #1
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	e7f1      	b.n	8006346 <_scanf_float+0x2ae>
 8006362:	9802      	ldr	r0, [sp, #8]
 8006364:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006368:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800636c:	463a      	mov	r2, r7
 800636e:	9002      	str	r0, [sp, #8]
 8006370:	4640      	mov	r0, r8
 8006372:	4798      	blx	r3
 8006374:	6923      	ldr	r3, [r4, #16]
 8006376:	3b01      	subs	r3, #1
 8006378:	6123      	str	r3, [r4, #16]
 800637a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800637e:	fa5f fa8a 	uxtb.w	sl, sl
 8006382:	f1ba 0f02 	cmp.w	sl, #2
 8006386:	d1ec      	bne.n	8006362 <_scanf_float+0x2ca>
 8006388:	3d03      	subs	r5, #3
 800638a:	b2ed      	uxtb	r5, r5
 800638c:	1b76      	subs	r6, r6, r5
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	05da      	lsls	r2, r3, #23
 8006392:	d52f      	bpl.n	80063f4 <_scanf_float+0x35c>
 8006394:	055b      	lsls	r3, r3, #21
 8006396:	d510      	bpl.n	80063ba <_scanf_float+0x322>
 8006398:	455e      	cmp	r6, fp
 800639a:	f67f aebf 	bls.w	800611c <_scanf_float+0x84>
 800639e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063a2:	463a      	mov	r2, r7
 80063a4:	4640      	mov	r0, r8
 80063a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063aa:	4798      	blx	r3
 80063ac:	6923      	ldr	r3, [r4, #16]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	6123      	str	r3, [r4, #16]
 80063b2:	e7f1      	b.n	8006398 <_scanf_float+0x300>
 80063b4:	46aa      	mov	sl, r5
 80063b6:	9602      	str	r6, [sp, #8]
 80063b8:	e7df      	b.n	800637a <_scanf_float+0x2e2>
 80063ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	2965      	cmp	r1, #101	; 0x65
 80063c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80063c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80063ca:	6123      	str	r3, [r4, #16]
 80063cc:	d00c      	beq.n	80063e8 <_scanf_float+0x350>
 80063ce:	2945      	cmp	r1, #69	; 0x45
 80063d0:	d00a      	beq.n	80063e8 <_scanf_float+0x350>
 80063d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063d6:	463a      	mov	r2, r7
 80063d8:	4640      	mov	r0, r8
 80063da:	4798      	blx	r3
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	1eb5      	subs	r5, r6, #2
 80063e6:	6123      	str	r3, [r4, #16]
 80063e8:	463a      	mov	r2, r7
 80063ea:	4640      	mov	r0, r8
 80063ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063f0:	4798      	blx	r3
 80063f2:	462e      	mov	r6, r5
 80063f4:	6825      	ldr	r5, [r4, #0]
 80063f6:	f015 0510 	ands.w	r5, r5, #16
 80063fa:	d159      	bne.n	80064b0 <_scanf_float+0x418>
 80063fc:	7035      	strb	r5, [r6, #0]
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006408:	d11c      	bne.n	8006444 <_scanf_float+0x3ac>
 800640a:	9b01      	ldr	r3, [sp, #4]
 800640c:	454b      	cmp	r3, r9
 800640e:	eba3 0209 	sub.w	r2, r3, r9
 8006412:	d124      	bne.n	800645e <_scanf_float+0x3c6>
 8006414:	2200      	movs	r2, #0
 8006416:	4659      	mov	r1, fp
 8006418:	4640      	mov	r0, r8
 800641a:	f000 ff2d 	bl	8007278 <_strtod_r>
 800641e:	f8d4 c000 	ldr.w	ip, [r4]
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	f01c 0f02 	tst.w	ip, #2
 8006428:	4606      	mov	r6, r0
 800642a:	460f      	mov	r7, r1
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	d021      	beq.n	8006474 <_scanf_float+0x3dc>
 8006430:	9903      	ldr	r1, [sp, #12]
 8006432:	1d1a      	adds	r2, r3, #4
 8006434:	600a      	str	r2, [r1, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	e9c3 6700 	strd	r6, r7, [r3]
 800643c:	68e3      	ldr	r3, [r4, #12]
 800643e:	3301      	adds	r3, #1
 8006440:	60e3      	str	r3, [r4, #12]
 8006442:	e66c      	b.n	800611e <_scanf_float+0x86>
 8006444:	9b04      	ldr	r3, [sp, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0e4      	beq.n	8006414 <_scanf_float+0x37c>
 800644a:	9905      	ldr	r1, [sp, #20]
 800644c:	230a      	movs	r3, #10
 800644e:	462a      	mov	r2, r5
 8006450:	4640      	mov	r0, r8
 8006452:	3101      	adds	r1, #1
 8006454:	f000 ff9c 	bl	8007390 <_strtol_r>
 8006458:	9b04      	ldr	r3, [sp, #16]
 800645a:	9e05      	ldr	r6, [sp, #20]
 800645c:	1ac2      	subs	r2, r0, r3
 800645e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006462:	429e      	cmp	r6, r3
 8006464:	bf28      	it	cs
 8006466:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800646a:	4630      	mov	r0, r6
 800646c:	4911      	ldr	r1, [pc, #68]	; (80064b4 <_scanf_float+0x41c>)
 800646e:	f000 f85d 	bl	800652c <siprintf>
 8006472:	e7cf      	b.n	8006414 <_scanf_float+0x37c>
 8006474:	f01c 0f04 	tst.w	ip, #4
 8006478:	f103 0e04 	add.w	lr, r3, #4
 800647c:	d003      	beq.n	8006486 <_scanf_float+0x3ee>
 800647e:	9903      	ldr	r1, [sp, #12]
 8006480:	f8c1 e000 	str.w	lr, [r1]
 8006484:	e7d7      	b.n	8006436 <_scanf_float+0x39e>
 8006486:	9a03      	ldr	r2, [sp, #12]
 8006488:	f8c2 e000 	str.w	lr, [r2]
 800648c:	f8d3 8000 	ldr.w	r8, [r3]
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	f7fa fb26 	bl	8000ae4 <__aeabi_dcmpun>
 8006498:	b128      	cbz	r0, 80064a6 <_scanf_float+0x40e>
 800649a:	4807      	ldr	r0, [pc, #28]	; (80064b8 <_scanf_float+0x420>)
 800649c:	f000 f80e 	bl	80064bc <nanf>
 80064a0:	f8c8 0000 	str.w	r0, [r8]
 80064a4:	e7ca      	b.n	800643c <_scanf_float+0x3a4>
 80064a6:	4630      	mov	r0, r6
 80064a8:	4639      	mov	r1, r7
 80064aa:	f7fa fb79 	bl	8000ba0 <__aeabi_d2f>
 80064ae:	e7f7      	b.n	80064a0 <_scanf_float+0x408>
 80064b0:	2500      	movs	r5, #0
 80064b2:	e634      	b.n	800611e <_scanf_float+0x86>
 80064b4:	0800abd6 	.word	0x0800abd6
 80064b8:	0800b00b 	.word	0x0800b00b

080064bc <nanf>:
 80064bc:	4800      	ldr	r0, [pc, #0]	; (80064c0 <nanf+0x4>)
 80064be:	4770      	bx	lr
 80064c0:	7fc00000 	.word	0x7fc00000

080064c4 <sniprintf>:
 80064c4:	b40c      	push	{r2, r3}
 80064c6:	b530      	push	{r4, r5, lr}
 80064c8:	4b17      	ldr	r3, [pc, #92]	; (8006528 <sniprintf+0x64>)
 80064ca:	1e0c      	subs	r4, r1, #0
 80064cc:	681d      	ldr	r5, [r3, #0]
 80064ce:	b09d      	sub	sp, #116	; 0x74
 80064d0:	da08      	bge.n	80064e4 <sniprintf+0x20>
 80064d2:	238b      	movs	r3, #139	; 0x8b
 80064d4:	f04f 30ff 	mov.w	r0, #4294967295
 80064d8:	602b      	str	r3, [r5, #0]
 80064da:	b01d      	add	sp, #116	; 0x74
 80064dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064e0:	b002      	add	sp, #8
 80064e2:	4770      	bx	lr
 80064e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80064e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80064ec:	bf0c      	ite	eq
 80064ee:	4623      	moveq	r3, r4
 80064f0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80064f4:	9304      	str	r3, [sp, #16]
 80064f6:	9307      	str	r3, [sp, #28]
 80064f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064fc:	9002      	str	r0, [sp, #8]
 80064fe:	9006      	str	r0, [sp, #24]
 8006500:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006504:	4628      	mov	r0, r5
 8006506:	ab21      	add	r3, sp, #132	; 0x84
 8006508:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800650a:	a902      	add	r1, sp, #8
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	f002 ff5b 	bl	80093c8 <_svfiprintf_r>
 8006512:	1c43      	adds	r3, r0, #1
 8006514:	bfbc      	itt	lt
 8006516:	238b      	movlt	r3, #139	; 0x8b
 8006518:	602b      	strlt	r3, [r5, #0]
 800651a:	2c00      	cmp	r4, #0
 800651c:	d0dd      	beq.n	80064da <sniprintf+0x16>
 800651e:	2200      	movs	r2, #0
 8006520:	9b02      	ldr	r3, [sp, #8]
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	e7d9      	b.n	80064da <sniprintf+0x16>
 8006526:	bf00      	nop
 8006528:	2000000c 	.word	0x2000000c

0800652c <siprintf>:
 800652c:	b40e      	push	{r1, r2, r3}
 800652e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006532:	b500      	push	{lr}
 8006534:	b09c      	sub	sp, #112	; 0x70
 8006536:	ab1d      	add	r3, sp, #116	; 0x74
 8006538:	9002      	str	r0, [sp, #8]
 800653a:	9006      	str	r0, [sp, #24]
 800653c:	9107      	str	r1, [sp, #28]
 800653e:	9104      	str	r1, [sp, #16]
 8006540:	4808      	ldr	r0, [pc, #32]	; (8006564 <siprintf+0x38>)
 8006542:	4909      	ldr	r1, [pc, #36]	; (8006568 <siprintf+0x3c>)
 8006544:	f853 2b04 	ldr.w	r2, [r3], #4
 8006548:	9105      	str	r1, [sp, #20]
 800654a:	6800      	ldr	r0, [r0, #0]
 800654c:	a902      	add	r1, sp, #8
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	f002 ff3a 	bl	80093c8 <_svfiprintf_r>
 8006554:	2200      	movs	r2, #0
 8006556:	9b02      	ldr	r3, [sp, #8]
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	b01c      	add	sp, #112	; 0x70
 800655c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006560:	b003      	add	sp, #12
 8006562:	4770      	bx	lr
 8006564:	2000000c 	.word	0x2000000c
 8006568:	ffff0208 	.word	0xffff0208

0800656c <siscanf>:
 800656c:	b40e      	push	{r1, r2, r3}
 800656e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006572:	b530      	push	{r4, r5, lr}
 8006574:	b09c      	sub	sp, #112	; 0x70
 8006576:	ac1f      	add	r4, sp, #124	; 0x7c
 8006578:	f854 5b04 	ldr.w	r5, [r4], #4
 800657c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006580:	9002      	str	r0, [sp, #8]
 8006582:	9006      	str	r0, [sp, #24]
 8006584:	f7f9 fe50 	bl	8000228 <strlen>
 8006588:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <siscanf+0x4c>)
 800658a:	9003      	str	r0, [sp, #12]
 800658c:	930b      	str	r3, [sp, #44]	; 0x2c
 800658e:	2300      	movs	r3, #0
 8006590:	930f      	str	r3, [sp, #60]	; 0x3c
 8006592:	9314      	str	r3, [sp, #80]	; 0x50
 8006594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006598:	9007      	str	r0, [sp, #28]
 800659a:	4808      	ldr	r0, [pc, #32]	; (80065bc <siscanf+0x50>)
 800659c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80065a0:	462a      	mov	r2, r5
 80065a2:	4623      	mov	r3, r4
 80065a4:	a902      	add	r1, sp, #8
 80065a6:	6800      	ldr	r0, [r0, #0]
 80065a8:	9401      	str	r4, [sp, #4]
 80065aa:	f003 f867 	bl	800967c <__ssvfiscanf_r>
 80065ae:	b01c      	add	sp, #112	; 0x70
 80065b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065b4:	b003      	add	sp, #12
 80065b6:	4770      	bx	lr
 80065b8:	080065e3 	.word	0x080065e3
 80065bc:	2000000c 	.word	0x2000000c

080065c0 <__sread>:
 80065c0:	b510      	push	{r4, lr}
 80065c2:	460c      	mov	r4, r1
 80065c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c8:	f003 fb1c 	bl	8009c04 <_read_r>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	bfab      	itete	ge
 80065d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065d2:	89a3      	ldrhlt	r3, [r4, #12]
 80065d4:	181b      	addge	r3, r3, r0
 80065d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065da:	bfac      	ite	ge
 80065dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80065de:	81a3      	strhlt	r3, [r4, #12]
 80065e0:	bd10      	pop	{r4, pc}

080065e2 <__seofread>:
 80065e2:	2000      	movs	r0, #0
 80065e4:	4770      	bx	lr

080065e6 <__swrite>:
 80065e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ea:	461f      	mov	r7, r3
 80065ec:	898b      	ldrh	r3, [r1, #12]
 80065ee:	4605      	mov	r5, r0
 80065f0:	05db      	lsls	r3, r3, #23
 80065f2:	460c      	mov	r4, r1
 80065f4:	4616      	mov	r6, r2
 80065f6:	d505      	bpl.n	8006604 <__swrite+0x1e>
 80065f8:	2302      	movs	r3, #2
 80065fa:	2200      	movs	r2, #0
 80065fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006600:	f002 f8d2 	bl	80087a8 <_lseek_r>
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	4632      	mov	r2, r6
 8006608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	4628      	mov	r0, r5
 8006610:	463b      	mov	r3, r7
 8006612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800661a:	f000 bebb 	b.w	8007394 <_write_r>

0800661e <__sseek>:
 800661e:	b510      	push	{r4, lr}
 8006620:	460c      	mov	r4, r1
 8006622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006626:	f002 f8bf 	bl	80087a8 <_lseek_r>
 800662a:	1c43      	adds	r3, r0, #1
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	bf15      	itete	ne
 8006630:	6560      	strne	r0, [r4, #84]	; 0x54
 8006632:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006636:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800663a:	81a3      	strheq	r3, [r4, #12]
 800663c:	bf18      	it	ne
 800663e:	81a3      	strhne	r3, [r4, #12]
 8006640:	bd10      	pop	{r4, pc}

08006642 <__sclose>:
 8006642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006646:	f000 beb7 	b.w	80073b8 <_close_r>

0800664a <sulp>:
 800664a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664e:	460f      	mov	r7, r1
 8006650:	4690      	mov	r8, r2
 8006652:	f002 fc61 	bl	8008f18 <__ulp>
 8006656:	4604      	mov	r4, r0
 8006658:	460d      	mov	r5, r1
 800665a:	f1b8 0f00 	cmp.w	r8, #0
 800665e:	d011      	beq.n	8006684 <sulp+0x3a>
 8006660:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006664:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006668:	2b00      	cmp	r3, #0
 800666a:	dd0b      	ble.n	8006684 <sulp+0x3a>
 800666c:	2400      	movs	r4, #0
 800666e:	051b      	lsls	r3, r3, #20
 8006670:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006674:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006678:	4622      	mov	r2, r4
 800667a:	462b      	mov	r3, r5
 800667c:	f7f9 ff98 	bl	80005b0 <__aeabi_dmul>
 8006680:	4604      	mov	r4, r0
 8006682:	460d      	mov	r5, r1
 8006684:	4620      	mov	r0, r4
 8006686:	4629      	mov	r1, r5
 8006688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800668c:	0000      	movs	r0, r0
	...

08006690 <_strtod_l>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	469b      	mov	fp, r3
 8006696:	2300      	movs	r3, #0
 8006698:	b0a1      	sub	sp, #132	; 0x84
 800669a:	931c      	str	r3, [sp, #112]	; 0x70
 800669c:	4ba1      	ldr	r3, [pc, #644]	; (8006924 <_strtod_l+0x294>)
 800669e:	4682      	mov	sl, r0
 80066a0:	681f      	ldr	r7, [r3, #0]
 80066a2:	460e      	mov	r6, r1
 80066a4:	4638      	mov	r0, r7
 80066a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80066a8:	f7f9 fdbe 	bl	8000228 <strlen>
 80066ac:	f04f 0800 	mov.w	r8, #0
 80066b0:	4604      	mov	r4, r0
 80066b2:	f04f 0900 	mov.w	r9, #0
 80066b6:	961b      	str	r6, [sp, #108]	; 0x6c
 80066b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066ba:	781a      	ldrb	r2, [r3, #0]
 80066bc:	2a2b      	cmp	r2, #43	; 0x2b
 80066be:	d04c      	beq.n	800675a <_strtod_l+0xca>
 80066c0:	d83a      	bhi.n	8006738 <_strtod_l+0xa8>
 80066c2:	2a0d      	cmp	r2, #13
 80066c4:	d833      	bhi.n	800672e <_strtod_l+0x9e>
 80066c6:	2a08      	cmp	r2, #8
 80066c8:	d833      	bhi.n	8006732 <_strtod_l+0xa2>
 80066ca:	2a00      	cmp	r2, #0
 80066cc:	d03d      	beq.n	800674a <_strtod_l+0xba>
 80066ce:	2300      	movs	r3, #0
 80066d0:	930c      	str	r3, [sp, #48]	; 0x30
 80066d2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80066d4:	782b      	ldrb	r3, [r5, #0]
 80066d6:	2b30      	cmp	r3, #48	; 0x30
 80066d8:	f040 80af 	bne.w	800683a <_strtod_l+0x1aa>
 80066dc:	786b      	ldrb	r3, [r5, #1]
 80066de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80066e2:	2b58      	cmp	r3, #88	; 0x58
 80066e4:	d16c      	bne.n	80067c0 <_strtod_l+0x130>
 80066e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066e8:	4650      	mov	r0, sl
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	ab1c      	add	r3, sp, #112	; 0x70
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	4a8d      	ldr	r2, [pc, #564]	; (8006928 <_strtod_l+0x298>)
 80066f2:	f8cd b008 	str.w	fp, [sp, #8]
 80066f6:	ab1d      	add	r3, sp, #116	; 0x74
 80066f8:	a91b      	add	r1, sp, #108	; 0x6c
 80066fa:	f001 fd53 	bl	80081a4 <__gethex>
 80066fe:	f010 0607 	ands.w	r6, r0, #7
 8006702:	4604      	mov	r4, r0
 8006704:	d005      	beq.n	8006712 <_strtod_l+0x82>
 8006706:	2e06      	cmp	r6, #6
 8006708:	d129      	bne.n	800675e <_strtod_l+0xce>
 800670a:	2300      	movs	r3, #0
 800670c:	3501      	adds	r5, #1
 800670e:	951b      	str	r5, [sp, #108]	; 0x6c
 8006710:	930c      	str	r3, [sp, #48]	; 0x30
 8006712:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006714:	2b00      	cmp	r3, #0
 8006716:	f040 8596 	bne.w	8007246 <_strtod_l+0xbb6>
 800671a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800671c:	b1d3      	cbz	r3, 8006754 <_strtod_l+0xc4>
 800671e:	4642      	mov	r2, r8
 8006720:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006724:	4610      	mov	r0, r2
 8006726:	4619      	mov	r1, r3
 8006728:	b021      	add	sp, #132	; 0x84
 800672a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672e:	2a20      	cmp	r2, #32
 8006730:	d1cd      	bne.n	80066ce <_strtod_l+0x3e>
 8006732:	3301      	adds	r3, #1
 8006734:	931b      	str	r3, [sp, #108]	; 0x6c
 8006736:	e7bf      	b.n	80066b8 <_strtod_l+0x28>
 8006738:	2a2d      	cmp	r2, #45	; 0x2d
 800673a:	d1c8      	bne.n	80066ce <_strtod_l+0x3e>
 800673c:	2201      	movs	r2, #1
 800673e:	920c      	str	r2, [sp, #48]	; 0x30
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	921b      	str	r2, [sp, #108]	; 0x6c
 8006744:	785b      	ldrb	r3, [r3, #1]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1c3      	bne.n	80066d2 <_strtod_l+0x42>
 800674a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800674c:	961b      	str	r6, [sp, #108]	; 0x6c
 800674e:	2b00      	cmp	r3, #0
 8006750:	f040 8577 	bne.w	8007242 <_strtod_l+0xbb2>
 8006754:	4642      	mov	r2, r8
 8006756:	464b      	mov	r3, r9
 8006758:	e7e4      	b.n	8006724 <_strtod_l+0x94>
 800675a:	2200      	movs	r2, #0
 800675c:	e7ef      	b.n	800673e <_strtod_l+0xae>
 800675e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006760:	b13a      	cbz	r2, 8006772 <_strtod_l+0xe2>
 8006762:	2135      	movs	r1, #53	; 0x35
 8006764:	a81e      	add	r0, sp, #120	; 0x78
 8006766:	f002 fcdb 	bl	8009120 <__copybits>
 800676a:	4650      	mov	r0, sl
 800676c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800676e:	f002 f8a3 	bl	80088b8 <_Bfree>
 8006772:	3e01      	subs	r6, #1
 8006774:	2e05      	cmp	r6, #5
 8006776:	d807      	bhi.n	8006788 <_strtod_l+0xf8>
 8006778:	e8df f006 	tbb	[pc, r6]
 800677c:	1d180b0e 	.word	0x1d180b0e
 8006780:	030e      	.short	0x030e
 8006782:	f04f 0900 	mov.w	r9, #0
 8006786:	46c8      	mov	r8, r9
 8006788:	0721      	lsls	r1, r4, #28
 800678a:	d5c2      	bpl.n	8006712 <_strtod_l+0x82>
 800678c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006790:	e7bf      	b.n	8006712 <_strtod_l+0x82>
 8006792:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8006796:	e7f7      	b.n	8006788 <_strtod_l+0xf8>
 8006798:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800679a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800679e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80067a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80067a6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80067aa:	e7ed      	b.n	8006788 <_strtod_l+0xf8>
 80067ac:	f04f 0800 	mov.w	r8, #0
 80067b0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800692c <_strtod_l+0x29c>
 80067b4:	e7e8      	b.n	8006788 <_strtod_l+0xf8>
 80067b6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80067ba:	f04f 38ff 	mov.w	r8, #4294967295
 80067be:	e7e3      	b.n	8006788 <_strtod_l+0xf8>
 80067c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	921b      	str	r2, [sp, #108]	; 0x6c
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b30      	cmp	r3, #48	; 0x30
 80067ca:	d0f9      	beq.n	80067c0 <_strtod_l+0x130>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0a0      	beq.n	8006712 <_strtod_l+0x82>
 80067d0:	2301      	movs	r3, #1
 80067d2:	9307      	str	r3, [sp, #28]
 80067d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067d6:	220a      	movs	r2, #10
 80067d8:	9308      	str	r3, [sp, #32]
 80067da:	2300      	movs	r3, #0
 80067dc:	469b      	mov	fp, r3
 80067de:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80067e2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80067e4:	7805      	ldrb	r5, [r0, #0]
 80067e6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80067ea:	b2d9      	uxtb	r1, r3
 80067ec:	2909      	cmp	r1, #9
 80067ee:	d926      	bls.n	800683e <_strtod_l+0x1ae>
 80067f0:	4622      	mov	r2, r4
 80067f2:	4639      	mov	r1, r7
 80067f4:	f003 fa68 	bl	8009cc8 <strncmp>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d032      	beq.n	8006862 <_strtod_l+0x1d2>
 80067fc:	2000      	movs	r0, #0
 80067fe:	462b      	mov	r3, r5
 8006800:	465c      	mov	r4, fp
 8006802:	4602      	mov	r2, r0
 8006804:	9004      	str	r0, [sp, #16]
 8006806:	2b65      	cmp	r3, #101	; 0x65
 8006808:	d001      	beq.n	800680e <_strtod_l+0x17e>
 800680a:	2b45      	cmp	r3, #69	; 0x45
 800680c:	d113      	bne.n	8006836 <_strtod_l+0x1a6>
 800680e:	b91c      	cbnz	r4, 8006818 <_strtod_l+0x188>
 8006810:	9b07      	ldr	r3, [sp, #28]
 8006812:	4303      	orrs	r3, r0
 8006814:	d099      	beq.n	800674a <_strtod_l+0xba>
 8006816:	2400      	movs	r4, #0
 8006818:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800681a:	1c73      	adds	r3, r6, #1
 800681c:	931b      	str	r3, [sp, #108]	; 0x6c
 800681e:	7873      	ldrb	r3, [r6, #1]
 8006820:	2b2b      	cmp	r3, #43	; 0x2b
 8006822:	d078      	beq.n	8006916 <_strtod_l+0x286>
 8006824:	2b2d      	cmp	r3, #45	; 0x2d
 8006826:	d07b      	beq.n	8006920 <_strtod_l+0x290>
 8006828:	2700      	movs	r7, #0
 800682a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800682e:	2909      	cmp	r1, #9
 8006830:	f240 8082 	bls.w	8006938 <_strtod_l+0x2a8>
 8006834:	961b      	str	r6, [sp, #108]	; 0x6c
 8006836:	2500      	movs	r5, #0
 8006838:	e09e      	b.n	8006978 <_strtod_l+0x2e8>
 800683a:	2300      	movs	r3, #0
 800683c:	e7c9      	b.n	80067d2 <_strtod_l+0x142>
 800683e:	f1bb 0f08 	cmp.w	fp, #8
 8006842:	bfd5      	itete	le
 8006844:	9906      	ldrle	r1, [sp, #24]
 8006846:	9905      	ldrgt	r1, [sp, #20]
 8006848:	fb02 3301 	mlale	r3, r2, r1, r3
 800684c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006850:	f100 0001 	add.w	r0, r0, #1
 8006854:	bfd4      	ite	le
 8006856:	9306      	strle	r3, [sp, #24]
 8006858:	9305      	strgt	r3, [sp, #20]
 800685a:	f10b 0b01 	add.w	fp, fp, #1
 800685e:	901b      	str	r0, [sp, #108]	; 0x6c
 8006860:	e7bf      	b.n	80067e2 <_strtod_l+0x152>
 8006862:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006864:	191a      	adds	r2, r3, r4
 8006866:	921b      	str	r2, [sp, #108]	; 0x6c
 8006868:	5d1b      	ldrb	r3, [r3, r4]
 800686a:	f1bb 0f00 	cmp.w	fp, #0
 800686e:	d036      	beq.n	80068de <_strtod_l+0x24e>
 8006870:	465c      	mov	r4, fp
 8006872:	9004      	str	r0, [sp, #16]
 8006874:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006878:	2a09      	cmp	r2, #9
 800687a:	d912      	bls.n	80068a2 <_strtod_l+0x212>
 800687c:	2201      	movs	r2, #1
 800687e:	e7c2      	b.n	8006806 <_strtod_l+0x176>
 8006880:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006882:	3001      	adds	r0, #1
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	921b      	str	r2, [sp, #108]	; 0x6c
 8006888:	785b      	ldrb	r3, [r3, #1]
 800688a:	2b30      	cmp	r3, #48	; 0x30
 800688c:	d0f8      	beq.n	8006880 <_strtod_l+0x1f0>
 800688e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006892:	2a08      	cmp	r2, #8
 8006894:	f200 84dc 	bhi.w	8007250 <_strtod_l+0xbc0>
 8006898:	9004      	str	r0, [sp, #16]
 800689a:	2000      	movs	r0, #0
 800689c:	4604      	mov	r4, r0
 800689e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80068a0:	9208      	str	r2, [sp, #32]
 80068a2:	3b30      	subs	r3, #48	; 0x30
 80068a4:	f100 0201 	add.w	r2, r0, #1
 80068a8:	d013      	beq.n	80068d2 <_strtod_l+0x242>
 80068aa:	9904      	ldr	r1, [sp, #16]
 80068ac:	1905      	adds	r5, r0, r4
 80068ae:	4411      	add	r1, r2
 80068b0:	9104      	str	r1, [sp, #16]
 80068b2:	4622      	mov	r2, r4
 80068b4:	210a      	movs	r1, #10
 80068b6:	42aa      	cmp	r2, r5
 80068b8:	d113      	bne.n	80068e2 <_strtod_l+0x252>
 80068ba:	1822      	adds	r2, r4, r0
 80068bc:	2a08      	cmp	r2, #8
 80068be:	f104 0401 	add.w	r4, r4, #1
 80068c2:	4404      	add	r4, r0
 80068c4:	dc1b      	bgt.n	80068fe <_strtod_l+0x26e>
 80068c6:	220a      	movs	r2, #10
 80068c8:	9906      	ldr	r1, [sp, #24]
 80068ca:	fb02 3301 	mla	r3, r2, r1, r3
 80068ce:	9306      	str	r3, [sp, #24]
 80068d0:	2200      	movs	r2, #0
 80068d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068d4:	4610      	mov	r0, r2
 80068d6:	1c59      	adds	r1, r3, #1
 80068d8:	911b      	str	r1, [sp, #108]	; 0x6c
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	e7ca      	b.n	8006874 <_strtod_l+0x1e4>
 80068de:	4658      	mov	r0, fp
 80068e0:	e7d3      	b.n	800688a <_strtod_l+0x1fa>
 80068e2:	2a08      	cmp	r2, #8
 80068e4:	dc04      	bgt.n	80068f0 <_strtod_l+0x260>
 80068e6:	9f06      	ldr	r7, [sp, #24]
 80068e8:	434f      	muls	r7, r1
 80068ea:	9706      	str	r7, [sp, #24]
 80068ec:	3201      	adds	r2, #1
 80068ee:	e7e2      	b.n	80068b6 <_strtod_l+0x226>
 80068f0:	1c57      	adds	r7, r2, #1
 80068f2:	2f10      	cmp	r7, #16
 80068f4:	bfde      	ittt	le
 80068f6:	9f05      	ldrle	r7, [sp, #20]
 80068f8:	434f      	mulle	r7, r1
 80068fa:	9705      	strle	r7, [sp, #20]
 80068fc:	e7f6      	b.n	80068ec <_strtod_l+0x25c>
 80068fe:	2c10      	cmp	r4, #16
 8006900:	bfdf      	itttt	le
 8006902:	220a      	movle	r2, #10
 8006904:	9905      	ldrle	r1, [sp, #20]
 8006906:	fb02 3301 	mlale	r3, r2, r1, r3
 800690a:	9305      	strle	r3, [sp, #20]
 800690c:	e7e0      	b.n	80068d0 <_strtod_l+0x240>
 800690e:	2300      	movs	r3, #0
 8006910:	2201      	movs	r2, #1
 8006912:	9304      	str	r3, [sp, #16]
 8006914:	e77c      	b.n	8006810 <_strtod_l+0x180>
 8006916:	2700      	movs	r7, #0
 8006918:	1cb3      	adds	r3, r6, #2
 800691a:	931b      	str	r3, [sp, #108]	; 0x6c
 800691c:	78b3      	ldrb	r3, [r6, #2]
 800691e:	e784      	b.n	800682a <_strtod_l+0x19a>
 8006920:	2701      	movs	r7, #1
 8006922:	e7f9      	b.n	8006918 <_strtod_l+0x288>
 8006924:	0800ae30 	.word	0x0800ae30
 8006928:	0800abdc 	.word	0x0800abdc
 800692c:	7ff00000 	.word	0x7ff00000
 8006930:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006932:	1c59      	adds	r1, r3, #1
 8006934:	911b      	str	r1, [sp, #108]	; 0x6c
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	2b30      	cmp	r3, #48	; 0x30
 800693a:	d0f9      	beq.n	8006930 <_strtod_l+0x2a0>
 800693c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006940:	2908      	cmp	r1, #8
 8006942:	f63f af78 	bhi.w	8006836 <_strtod_l+0x1a6>
 8006946:	f04f 0e0a 	mov.w	lr, #10
 800694a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800694e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006950:	9309      	str	r3, [sp, #36]	; 0x24
 8006952:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006954:	1c59      	adds	r1, r3, #1
 8006956:	911b      	str	r1, [sp, #108]	; 0x6c
 8006958:	785b      	ldrb	r3, [r3, #1]
 800695a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800695e:	2d09      	cmp	r5, #9
 8006960:	d935      	bls.n	80069ce <_strtod_l+0x33e>
 8006962:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006964:	1b49      	subs	r1, r1, r5
 8006966:	2908      	cmp	r1, #8
 8006968:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800696c:	dc02      	bgt.n	8006974 <_strtod_l+0x2e4>
 800696e:	4565      	cmp	r5, ip
 8006970:	bfa8      	it	ge
 8006972:	4665      	movge	r5, ip
 8006974:	b107      	cbz	r7, 8006978 <_strtod_l+0x2e8>
 8006976:	426d      	negs	r5, r5
 8006978:	2c00      	cmp	r4, #0
 800697a:	d14c      	bne.n	8006a16 <_strtod_l+0x386>
 800697c:	9907      	ldr	r1, [sp, #28]
 800697e:	4301      	orrs	r1, r0
 8006980:	f47f aec7 	bne.w	8006712 <_strtod_l+0x82>
 8006984:	2a00      	cmp	r2, #0
 8006986:	f47f aee0 	bne.w	800674a <_strtod_l+0xba>
 800698a:	2b69      	cmp	r3, #105	; 0x69
 800698c:	d026      	beq.n	80069dc <_strtod_l+0x34c>
 800698e:	dc23      	bgt.n	80069d8 <_strtod_l+0x348>
 8006990:	2b49      	cmp	r3, #73	; 0x49
 8006992:	d023      	beq.n	80069dc <_strtod_l+0x34c>
 8006994:	2b4e      	cmp	r3, #78	; 0x4e
 8006996:	f47f aed8 	bne.w	800674a <_strtod_l+0xba>
 800699a:	499c      	ldr	r1, [pc, #624]	; (8006c0c <_strtod_l+0x57c>)
 800699c:	a81b      	add	r0, sp, #108	; 0x6c
 800699e:	f001 fe4f 	bl	8008640 <__match>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f43f aed1 	beq.w	800674a <_strtod_l+0xba>
 80069a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b28      	cmp	r3, #40	; 0x28
 80069ae:	d12c      	bne.n	8006a0a <_strtod_l+0x37a>
 80069b0:	4997      	ldr	r1, [pc, #604]	; (8006c10 <_strtod_l+0x580>)
 80069b2:	aa1e      	add	r2, sp, #120	; 0x78
 80069b4:	a81b      	add	r0, sp, #108	; 0x6c
 80069b6:	f001 fe57 	bl	8008668 <__hexnan>
 80069ba:	2805      	cmp	r0, #5
 80069bc:	d125      	bne.n	8006a0a <_strtod_l+0x37a>
 80069be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80069c0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80069c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80069c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80069cc:	e6a1      	b.n	8006712 <_strtod_l+0x82>
 80069ce:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80069d2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80069d6:	e7bc      	b.n	8006952 <_strtod_l+0x2c2>
 80069d8:	2b6e      	cmp	r3, #110	; 0x6e
 80069da:	e7dc      	b.n	8006996 <_strtod_l+0x306>
 80069dc:	498d      	ldr	r1, [pc, #564]	; (8006c14 <_strtod_l+0x584>)
 80069de:	a81b      	add	r0, sp, #108	; 0x6c
 80069e0:	f001 fe2e 	bl	8008640 <__match>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f43f aeb0 	beq.w	800674a <_strtod_l+0xba>
 80069ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069ec:	498a      	ldr	r1, [pc, #552]	; (8006c18 <_strtod_l+0x588>)
 80069ee:	3b01      	subs	r3, #1
 80069f0:	a81b      	add	r0, sp, #108	; 0x6c
 80069f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80069f4:	f001 fe24 	bl	8008640 <__match>
 80069f8:	b910      	cbnz	r0, 8006a00 <_strtod_l+0x370>
 80069fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069fc:	3301      	adds	r3, #1
 80069fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8006a00:	f04f 0800 	mov.w	r8, #0
 8006a04:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8006c28 <_strtod_l+0x598>
 8006a08:	e683      	b.n	8006712 <_strtod_l+0x82>
 8006a0a:	4884      	ldr	r0, [pc, #528]	; (8006c1c <_strtod_l+0x58c>)
 8006a0c:	f003 f90c 	bl	8009c28 <nan>
 8006a10:	4680      	mov	r8, r0
 8006a12:	4689      	mov	r9, r1
 8006a14:	e67d      	b.n	8006712 <_strtod_l+0x82>
 8006a16:	9b04      	ldr	r3, [sp, #16]
 8006a18:	f1bb 0f00 	cmp.w	fp, #0
 8006a1c:	bf08      	it	eq
 8006a1e:	46a3      	moveq	fp, r4
 8006a20:	1aeb      	subs	r3, r5, r3
 8006a22:	2c10      	cmp	r4, #16
 8006a24:	9806      	ldr	r0, [sp, #24]
 8006a26:	4626      	mov	r6, r4
 8006a28:	9307      	str	r3, [sp, #28]
 8006a2a:	bfa8      	it	ge
 8006a2c:	2610      	movge	r6, #16
 8006a2e:	f7f9 fd45 	bl	80004bc <__aeabi_ui2d>
 8006a32:	2c09      	cmp	r4, #9
 8006a34:	4680      	mov	r8, r0
 8006a36:	4689      	mov	r9, r1
 8006a38:	dd13      	ble.n	8006a62 <_strtod_l+0x3d2>
 8006a3a:	4b79      	ldr	r3, [pc, #484]	; (8006c20 <_strtod_l+0x590>)
 8006a3c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a40:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006a44:	f7f9 fdb4 	bl	80005b0 <__aeabi_dmul>
 8006a48:	4680      	mov	r8, r0
 8006a4a:	9805      	ldr	r0, [sp, #20]
 8006a4c:	4689      	mov	r9, r1
 8006a4e:	f7f9 fd35 	bl	80004bc <__aeabi_ui2d>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4640      	mov	r0, r8
 8006a58:	4649      	mov	r1, r9
 8006a5a:	f7f9 fbf3 	bl	8000244 <__adddf3>
 8006a5e:	4680      	mov	r8, r0
 8006a60:	4689      	mov	r9, r1
 8006a62:	2c0f      	cmp	r4, #15
 8006a64:	dc36      	bgt.n	8006ad4 <_strtod_l+0x444>
 8006a66:	9b07      	ldr	r3, [sp, #28]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f43f ae52 	beq.w	8006712 <_strtod_l+0x82>
 8006a6e:	dd22      	ble.n	8006ab6 <_strtod_l+0x426>
 8006a70:	2b16      	cmp	r3, #22
 8006a72:	dc09      	bgt.n	8006a88 <_strtod_l+0x3f8>
 8006a74:	4c6a      	ldr	r4, [pc, #424]	; (8006c20 <_strtod_l+0x590>)
 8006a76:	4642      	mov	r2, r8
 8006a78:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8006a7c:	464b      	mov	r3, r9
 8006a7e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006a82:	f7f9 fd95 	bl	80005b0 <__aeabi_dmul>
 8006a86:	e7c3      	b.n	8006a10 <_strtod_l+0x380>
 8006a88:	9a07      	ldr	r2, [sp, #28]
 8006a8a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	db20      	blt.n	8006ad4 <_strtod_l+0x444>
 8006a92:	4d63      	ldr	r5, [pc, #396]	; (8006c20 <_strtod_l+0x590>)
 8006a94:	f1c4 040f 	rsb	r4, r4, #15
 8006a98:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006a9c:	4642      	mov	r2, r8
 8006a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	f7f9 fd84 	bl	80005b0 <__aeabi_dmul>
 8006aa8:	9b07      	ldr	r3, [sp, #28]
 8006aaa:	1b1c      	subs	r4, r3, r4
 8006aac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006ab0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ab4:	e7e5      	b.n	8006a82 <_strtod_l+0x3f2>
 8006ab6:	9b07      	ldr	r3, [sp, #28]
 8006ab8:	3316      	adds	r3, #22
 8006aba:	db0b      	blt.n	8006ad4 <_strtod_l+0x444>
 8006abc:	9b04      	ldr	r3, [sp, #16]
 8006abe:	4a58      	ldr	r2, [pc, #352]	; (8006c20 <_strtod_l+0x590>)
 8006ac0:	1b5d      	subs	r5, r3, r5
 8006ac2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006acc:	4649      	mov	r1, r9
 8006ace:	f7f9 fe99 	bl	8000804 <__aeabi_ddiv>
 8006ad2:	e79d      	b.n	8006a10 <_strtod_l+0x380>
 8006ad4:	9b07      	ldr	r3, [sp, #28]
 8006ad6:	1ba6      	subs	r6, r4, r6
 8006ad8:	441e      	add	r6, r3
 8006ada:	2e00      	cmp	r6, #0
 8006adc:	dd71      	ble.n	8006bc2 <_strtod_l+0x532>
 8006ade:	f016 030f 	ands.w	r3, r6, #15
 8006ae2:	d00a      	beq.n	8006afa <_strtod_l+0x46a>
 8006ae4:	494e      	ldr	r1, [pc, #312]	; (8006c20 <_strtod_l+0x590>)
 8006ae6:	4642      	mov	r2, r8
 8006ae8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006aec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006af0:	464b      	mov	r3, r9
 8006af2:	f7f9 fd5d 	bl	80005b0 <__aeabi_dmul>
 8006af6:	4680      	mov	r8, r0
 8006af8:	4689      	mov	r9, r1
 8006afa:	f036 060f 	bics.w	r6, r6, #15
 8006afe:	d050      	beq.n	8006ba2 <_strtod_l+0x512>
 8006b00:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006b04:	dd27      	ble.n	8006b56 <_strtod_l+0x4c6>
 8006b06:	f04f 0b00 	mov.w	fp, #0
 8006b0a:	f8cd b010 	str.w	fp, [sp, #16]
 8006b0e:	f8cd b020 	str.w	fp, [sp, #32]
 8006b12:	f8cd b018 	str.w	fp, [sp, #24]
 8006b16:	2322      	movs	r3, #34	; 0x22
 8006b18:	f04f 0800 	mov.w	r8, #0
 8006b1c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006c28 <_strtod_l+0x598>
 8006b20:	f8ca 3000 	str.w	r3, [sl]
 8006b24:	9b08      	ldr	r3, [sp, #32]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f43f adf3 	beq.w	8006712 <_strtod_l+0x82>
 8006b2c:	4650      	mov	r0, sl
 8006b2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006b30:	f001 fec2 	bl	80088b8 <_Bfree>
 8006b34:	4650      	mov	r0, sl
 8006b36:	9906      	ldr	r1, [sp, #24]
 8006b38:	f001 febe 	bl	80088b8 <_Bfree>
 8006b3c:	4650      	mov	r0, sl
 8006b3e:	9904      	ldr	r1, [sp, #16]
 8006b40:	f001 feba 	bl	80088b8 <_Bfree>
 8006b44:	4650      	mov	r0, sl
 8006b46:	9908      	ldr	r1, [sp, #32]
 8006b48:	f001 feb6 	bl	80088b8 <_Bfree>
 8006b4c:	4659      	mov	r1, fp
 8006b4e:	4650      	mov	r0, sl
 8006b50:	f001 feb2 	bl	80088b8 <_Bfree>
 8006b54:	e5dd      	b.n	8006712 <_strtod_l+0x82>
 8006b56:	2300      	movs	r3, #0
 8006b58:	4640      	mov	r0, r8
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	461f      	mov	r7, r3
 8006b5e:	1136      	asrs	r6, r6, #4
 8006b60:	2e01      	cmp	r6, #1
 8006b62:	dc21      	bgt.n	8006ba8 <_strtod_l+0x518>
 8006b64:	b10b      	cbz	r3, 8006b6a <_strtod_l+0x4da>
 8006b66:	4680      	mov	r8, r0
 8006b68:	4689      	mov	r9, r1
 8006b6a:	4b2e      	ldr	r3, [pc, #184]	; (8006c24 <_strtod_l+0x594>)
 8006b6c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006b70:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006b74:	4642      	mov	r2, r8
 8006b76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	f7f9 fd18 	bl	80005b0 <__aeabi_dmul>
 8006b80:	4b29      	ldr	r3, [pc, #164]	; (8006c28 <_strtod_l+0x598>)
 8006b82:	460a      	mov	r2, r1
 8006b84:	400b      	ands	r3, r1
 8006b86:	4929      	ldr	r1, [pc, #164]	; (8006c2c <_strtod_l+0x59c>)
 8006b88:	4680      	mov	r8, r0
 8006b8a:	428b      	cmp	r3, r1
 8006b8c:	d8bb      	bhi.n	8006b06 <_strtod_l+0x476>
 8006b8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006b92:	428b      	cmp	r3, r1
 8006b94:	bf86      	itte	hi
 8006b96:	f04f 38ff 	movhi.w	r8, #4294967295
 8006b9a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006c30 <_strtod_l+0x5a0>
 8006b9e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	9305      	str	r3, [sp, #20]
 8006ba6:	e07e      	b.n	8006ca6 <_strtod_l+0x616>
 8006ba8:	07f2      	lsls	r2, r6, #31
 8006baa:	d507      	bpl.n	8006bbc <_strtod_l+0x52c>
 8006bac:	4b1d      	ldr	r3, [pc, #116]	; (8006c24 <_strtod_l+0x594>)
 8006bae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	f7f9 fcfb 	bl	80005b0 <__aeabi_dmul>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	3701      	adds	r7, #1
 8006bbe:	1076      	asrs	r6, r6, #1
 8006bc0:	e7ce      	b.n	8006b60 <_strtod_l+0x4d0>
 8006bc2:	d0ee      	beq.n	8006ba2 <_strtod_l+0x512>
 8006bc4:	4276      	negs	r6, r6
 8006bc6:	f016 020f 	ands.w	r2, r6, #15
 8006bca:	d00a      	beq.n	8006be2 <_strtod_l+0x552>
 8006bcc:	4b14      	ldr	r3, [pc, #80]	; (8006c20 <_strtod_l+0x590>)
 8006bce:	4640      	mov	r0, r8
 8006bd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bda:	f7f9 fe13 	bl	8000804 <__aeabi_ddiv>
 8006bde:	4680      	mov	r8, r0
 8006be0:	4689      	mov	r9, r1
 8006be2:	1136      	asrs	r6, r6, #4
 8006be4:	d0dd      	beq.n	8006ba2 <_strtod_l+0x512>
 8006be6:	2e1f      	cmp	r6, #31
 8006be8:	dd24      	ble.n	8006c34 <_strtod_l+0x5a4>
 8006bea:	f04f 0b00 	mov.w	fp, #0
 8006bee:	f8cd b010 	str.w	fp, [sp, #16]
 8006bf2:	f8cd b020 	str.w	fp, [sp, #32]
 8006bf6:	f8cd b018 	str.w	fp, [sp, #24]
 8006bfa:	2322      	movs	r3, #34	; 0x22
 8006bfc:	f04f 0800 	mov.w	r8, #0
 8006c00:	f04f 0900 	mov.w	r9, #0
 8006c04:	f8ca 3000 	str.w	r3, [sl]
 8006c08:	e78c      	b.n	8006b24 <_strtod_l+0x494>
 8006c0a:	bf00      	nop
 8006c0c:	0800abb1 	.word	0x0800abb1
 8006c10:	0800abf0 	.word	0x0800abf0
 8006c14:	0800aba9 	.word	0x0800aba9
 8006c18:	0800ad34 	.word	0x0800ad34
 8006c1c:	0800b00b 	.word	0x0800b00b
 8006c20:	0800aed0 	.word	0x0800aed0
 8006c24:	0800aea8 	.word	0x0800aea8
 8006c28:	7ff00000 	.word	0x7ff00000
 8006c2c:	7ca00000 	.word	0x7ca00000
 8006c30:	7fefffff 	.word	0x7fefffff
 8006c34:	f016 0310 	ands.w	r3, r6, #16
 8006c38:	bf18      	it	ne
 8006c3a:	236a      	movne	r3, #106	; 0x6a
 8006c3c:	4640      	mov	r0, r8
 8006c3e:	9305      	str	r3, [sp, #20]
 8006c40:	4649      	mov	r1, r9
 8006c42:	2300      	movs	r3, #0
 8006c44:	4fb2      	ldr	r7, [pc, #712]	; (8006f10 <_strtod_l+0x880>)
 8006c46:	07f2      	lsls	r2, r6, #31
 8006c48:	d504      	bpl.n	8006c54 <_strtod_l+0x5c4>
 8006c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c4e:	f7f9 fcaf 	bl	80005b0 <__aeabi_dmul>
 8006c52:	2301      	movs	r3, #1
 8006c54:	1076      	asrs	r6, r6, #1
 8006c56:	f107 0708 	add.w	r7, r7, #8
 8006c5a:	d1f4      	bne.n	8006c46 <_strtod_l+0x5b6>
 8006c5c:	b10b      	cbz	r3, 8006c62 <_strtod_l+0x5d2>
 8006c5e:	4680      	mov	r8, r0
 8006c60:	4689      	mov	r9, r1
 8006c62:	9b05      	ldr	r3, [sp, #20]
 8006c64:	b1bb      	cbz	r3, 8006c96 <_strtod_l+0x606>
 8006c66:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8006c6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	4649      	mov	r1, r9
 8006c72:	dd10      	ble.n	8006c96 <_strtod_l+0x606>
 8006c74:	2b1f      	cmp	r3, #31
 8006c76:	f340 812b 	ble.w	8006ed0 <_strtod_l+0x840>
 8006c7a:	2b34      	cmp	r3, #52	; 0x34
 8006c7c:	bfd8      	it	le
 8006c7e:	f04f 32ff 	movle.w	r2, #4294967295
 8006c82:	f04f 0800 	mov.w	r8, #0
 8006c86:	bfcf      	iteee	gt
 8006c88:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006c8c:	3b20      	suble	r3, #32
 8006c8e:	fa02 f303 	lslle.w	r3, r2, r3
 8006c92:	ea03 0901 	andle.w	r9, r3, r1
 8006c96:	2200      	movs	r2, #0
 8006c98:	2300      	movs	r3, #0
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	f7f9 feef 	bl	8000a80 <__aeabi_dcmpeq>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d1a1      	bne.n	8006bea <_strtod_l+0x55a>
 8006ca6:	9b06      	ldr	r3, [sp, #24]
 8006ca8:	465a      	mov	r2, fp
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	4650      	mov	r0, sl
 8006cae:	4623      	mov	r3, r4
 8006cb0:	9908      	ldr	r1, [sp, #32]
 8006cb2:	f001 fe6d 	bl	8008990 <__s2b>
 8006cb6:	9008      	str	r0, [sp, #32]
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	f43f af24 	beq.w	8006b06 <_strtod_l+0x476>
 8006cbe:	9b04      	ldr	r3, [sp, #16]
 8006cc0:	f04f 0b00 	mov.w	fp, #0
 8006cc4:	1b5d      	subs	r5, r3, r5
 8006cc6:	9b07      	ldr	r3, [sp, #28]
 8006cc8:	f8cd b010 	str.w	fp, [sp, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	bfb4      	ite	lt
 8006cd0:	462b      	movlt	r3, r5
 8006cd2:	2300      	movge	r3, #0
 8006cd4:	930e      	str	r3, [sp, #56]	; 0x38
 8006cd6:	9b07      	ldr	r3, [sp, #28]
 8006cd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006cdc:	9316      	str	r3, [sp, #88]	; 0x58
 8006cde:	9b08      	ldr	r3, [sp, #32]
 8006ce0:	4650      	mov	r0, sl
 8006ce2:	6859      	ldr	r1, [r3, #4]
 8006ce4:	f001 fda8 	bl	8008838 <_Balloc>
 8006ce8:	9006      	str	r0, [sp, #24]
 8006cea:	2800      	cmp	r0, #0
 8006cec:	f43f af13 	beq.w	8006b16 <_strtod_l+0x486>
 8006cf0:	9b08      	ldr	r3, [sp, #32]
 8006cf2:	300c      	adds	r0, #12
 8006cf4:	691a      	ldr	r2, [r3, #16]
 8006cf6:	f103 010c 	add.w	r1, r3, #12
 8006cfa:	3202      	adds	r2, #2
 8006cfc:	0092      	lsls	r2, r2, #2
 8006cfe:	f001 fd8d 	bl	800881c <memcpy>
 8006d02:	ab1e      	add	r3, sp, #120	; 0x78
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	ab1d      	add	r3, sp, #116	; 0x74
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	4642      	mov	r2, r8
 8006d0c:	464b      	mov	r3, r9
 8006d0e:	4650      	mov	r0, sl
 8006d10:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8006d14:	f002 f97a 	bl	800900c <__d2b>
 8006d18:	901c      	str	r0, [sp, #112]	; 0x70
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	f43f aefb 	beq.w	8006b16 <_strtod_l+0x486>
 8006d20:	2101      	movs	r1, #1
 8006d22:	4650      	mov	r0, sl
 8006d24:	f001 fecc 	bl	8008ac0 <__i2b>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	9004      	str	r0, [sp, #16]
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	f43f aef2 	beq.w	8006b16 <_strtod_l+0x486>
 8006d32:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006d34:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d36:	2d00      	cmp	r5, #0
 8006d38:	bfab      	itete	ge
 8006d3a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006d3c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006d3e:	18ee      	addge	r6, r5, r3
 8006d40:	1b5c      	sublt	r4, r3, r5
 8006d42:	9b05      	ldr	r3, [sp, #20]
 8006d44:	bfa8      	it	ge
 8006d46:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006d48:	eba5 0503 	sub.w	r5, r5, r3
 8006d4c:	4415      	add	r5, r2
 8006d4e:	4b71      	ldr	r3, [pc, #452]	; (8006f14 <_strtod_l+0x884>)
 8006d50:	f105 35ff 	add.w	r5, r5, #4294967295
 8006d54:	bfb8      	it	lt
 8006d56:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006d58:	429d      	cmp	r5, r3
 8006d5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006d5e:	f280 80c9 	bge.w	8006ef4 <_strtod_l+0x864>
 8006d62:	1b5b      	subs	r3, r3, r5
 8006d64:	2b1f      	cmp	r3, #31
 8006d66:	f04f 0701 	mov.w	r7, #1
 8006d6a:	eba2 0203 	sub.w	r2, r2, r3
 8006d6e:	f300 80b6 	bgt.w	8006ede <_strtod_l+0x84e>
 8006d72:	2500      	movs	r5, #0
 8006d74:	fa07 f303 	lsl.w	r3, r7, r3
 8006d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d7a:	18b7      	adds	r7, r6, r2
 8006d7c:	9b05      	ldr	r3, [sp, #20]
 8006d7e:	42be      	cmp	r6, r7
 8006d80:	4414      	add	r4, r2
 8006d82:	441c      	add	r4, r3
 8006d84:	4633      	mov	r3, r6
 8006d86:	bfa8      	it	ge
 8006d88:	463b      	movge	r3, r7
 8006d8a:	42a3      	cmp	r3, r4
 8006d8c:	bfa8      	it	ge
 8006d8e:	4623      	movge	r3, r4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	bfc2      	ittt	gt
 8006d94:	1aff      	subgt	r7, r7, r3
 8006d96:	1ae4      	subgt	r4, r4, r3
 8006d98:	1af6      	subgt	r6, r6, r3
 8006d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dd17      	ble.n	8006dd0 <_strtod_l+0x740>
 8006da0:	461a      	mov	r2, r3
 8006da2:	4650      	mov	r0, sl
 8006da4:	9904      	ldr	r1, [sp, #16]
 8006da6:	f001 ff45 	bl	8008c34 <__pow5mult>
 8006daa:	9004      	str	r0, [sp, #16]
 8006dac:	2800      	cmp	r0, #0
 8006dae:	f43f aeb2 	beq.w	8006b16 <_strtod_l+0x486>
 8006db2:	4601      	mov	r1, r0
 8006db4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006db6:	4650      	mov	r0, sl
 8006db8:	f001 fe98 	bl	8008aec <__multiply>
 8006dbc:	9009      	str	r0, [sp, #36]	; 0x24
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	f43f aea9 	beq.w	8006b16 <_strtod_l+0x486>
 8006dc4:	4650      	mov	r0, sl
 8006dc6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006dc8:	f001 fd76 	bl	80088b8 <_Bfree>
 8006dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dce:	931c      	str	r3, [sp, #112]	; 0x70
 8006dd0:	2f00      	cmp	r7, #0
 8006dd2:	f300 8093 	bgt.w	8006efc <_strtod_l+0x86c>
 8006dd6:	9b07      	ldr	r3, [sp, #28]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	dd08      	ble.n	8006dee <_strtod_l+0x75e>
 8006ddc:	4650      	mov	r0, sl
 8006dde:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006de0:	9906      	ldr	r1, [sp, #24]
 8006de2:	f001 ff27 	bl	8008c34 <__pow5mult>
 8006de6:	9006      	str	r0, [sp, #24]
 8006de8:	2800      	cmp	r0, #0
 8006dea:	f43f ae94 	beq.w	8006b16 <_strtod_l+0x486>
 8006dee:	2c00      	cmp	r4, #0
 8006df0:	dd08      	ble.n	8006e04 <_strtod_l+0x774>
 8006df2:	4622      	mov	r2, r4
 8006df4:	4650      	mov	r0, sl
 8006df6:	9906      	ldr	r1, [sp, #24]
 8006df8:	f001 ff76 	bl	8008ce8 <__lshift>
 8006dfc:	9006      	str	r0, [sp, #24]
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	f43f ae89 	beq.w	8006b16 <_strtod_l+0x486>
 8006e04:	2e00      	cmp	r6, #0
 8006e06:	dd08      	ble.n	8006e1a <_strtod_l+0x78a>
 8006e08:	4632      	mov	r2, r6
 8006e0a:	4650      	mov	r0, sl
 8006e0c:	9904      	ldr	r1, [sp, #16]
 8006e0e:	f001 ff6b 	bl	8008ce8 <__lshift>
 8006e12:	9004      	str	r0, [sp, #16]
 8006e14:	2800      	cmp	r0, #0
 8006e16:	f43f ae7e 	beq.w	8006b16 <_strtod_l+0x486>
 8006e1a:	4650      	mov	r0, sl
 8006e1c:	9a06      	ldr	r2, [sp, #24]
 8006e1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006e20:	f001 ffea 	bl	8008df8 <__mdiff>
 8006e24:	4683      	mov	fp, r0
 8006e26:	2800      	cmp	r0, #0
 8006e28:	f43f ae75 	beq.w	8006b16 <_strtod_l+0x486>
 8006e2c:	2400      	movs	r4, #0
 8006e2e:	68c3      	ldr	r3, [r0, #12]
 8006e30:	9904      	ldr	r1, [sp, #16]
 8006e32:	60c4      	str	r4, [r0, #12]
 8006e34:	930d      	str	r3, [sp, #52]	; 0x34
 8006e36:	f001 ffc3 	bl	8008dc0 <__mcmp>
 8006e3a:	42a0      	cmp	r0, r4
 8006e3c:	da70      	bge.n	8006f20 <_strtod_l+0x890>
 8006e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e40:	ea53 0308 	orrs.w	r3, r3, r8
 8006e44:	f040 8096 	bne.w	8006f74 <_strtod_l+0x8e4>
 8006e48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f040 8091 	bne.w	8006f74 <_strtod_l+0x8e4>
 8006e52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e56:	0d1b      	lsrs	r3, r3, #20
 8006e58:	051b      	lsls	r3, r3, #20
 8006e5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006e5e:	f240 8089 	bls.w	8006f74 <_strtod_l+0x8e4>
 8006e62:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006e66:	b923      	cbnz	r3, 8006e72 <_strtod_l+0x7e2>
 8006e68:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	f340 8081 	ble.w	8006f74 <_strtod_l+0x8e4>
 8006e72:	4659      	mov	r1, fp
 8006e74:	2201      	movs	r2, #1
 8006e76:	4650      	mov	r0, sl
 8006e78:	f001 ff36 	bl	8008ce8 <__lshift>
 8006e7c:	9904      	ldr	r1, [sp, #16]
 8006e7e:	4683      	mov	fp, r0
 8006e80:	f001 ff9e 	bl	8008dc0 <__mcmp>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	dd75      	ble.n	8006f74 <_strtod_l+0x8e4>
 8006e88:	9905      	ldr	r1, [sp, #20]
 8006e8a:	464b      	mov	r3, r9
 8006e8c:	4a22      	ldr	r2, [pc, #136]	; (8006f18 <_strtod_l+0x888>)
 8006e8e:	2900      	cmp	r1, #0
 8006e90:	f000 8091 	beq.w	8006fb6 <_strtod_l+0x926>
 8006e94:	ea02 0109 	and.w	r1, r2, r9
 8006e98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006e9c:	f300 808b 	bgt.w	8006fb6 <_strtod_l+0x926>
 8006ea0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006ea4:	f77f aea9 	ble.w	8006bfa <_strtod_l+0x56a>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4a1c      	ldr	r2, [pc, #112]	; (8006f1c <_strtod_l+0x88c>)
 8006eac:	4640      	mov	r0, r8
 8006eae:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006eb8:	f7f9 fb7a 	bl	80005b0 <__aeabi_dmul>
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4303      	orrs	r3, r0
 8006ec0:	bf08      	it	eq
 8006ec2:	2322      	moveq	r3, #34	; 0x22
 8006ec4:	4680      	mov	r8, r0
 8006ec6:	4689      	mov	r9, r1
 8006ec8:	bf08      	it	eq
 8006eca:	f8ca 3000 	streq.w	r3, [sl]
 8006ece:	e62d      	b.n	8006b2c <_strtod_l+0x49c>
 8006ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed8:	ea03 0808 	and.w	r8, r3, r8
 8006edc:	e6db      	b.n	8006c96 <_strtod_l+0x606>
 8006ede:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006ee2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006ee6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006eea:	35e2      	adds	r5, #226	; 0xe2
 8006eec:	fa07 f505 	lsl.w	r5, r7, r5
 8006ef0:	970f      	str	r7, [sp, #60]	; 0x3c
 8006ef2:	e742      	b.n	8006d7a <_strtod_l+0x6ea>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	2500      	movs	r5, #0
 8006ef8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006efa:	e73e      	b.n	8006d7a <_strtod_l+0x6ea>
 8006efc:	463a      	mov	r2, r7
 8006efe:	4650      	mov	r0, sl
 8006f00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006f02:	f001 fef1 	bl	8008ce8 <__lshift>
 8006f06:	901c      	str	r0, [sp, #112]	; 0x70
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	f47f af64 	bne.w	8006dd6 <_strtod_l+0x746>
 8006f0e:	e602      	b.n	8006b16 <_strtod_l+0x486>
 8006f10:	0800ac08 	.word	0x0800ac08
 8006f14:	fffffc02 	.word	0xfffffc02
 8006f18:	7ff00000 	.word	0x7ff00000
 8006f1c:	39500000 	.word	0x39500000
 8006f20:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006f24:	d166      	bne.n	8006ff4 <_strtod_l+0x964>
 8006f26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f2c:	b35a      	cbz	r2, 8006f86 <_strtod_l+0x8f6>
 8006f2e:	4a9c      	ldr	r2, [pc, #624]	; (80071a0 <_strtod_l+0xb10>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d12c      	bne.n	8006f8e <_strtod_l+0x8fe>
 8006f34:	9b05      	ldr	r3, [sp, #20]
 8006f36:	4640      	mov	r0, r8
 8006f38:	b303      	cbz	r3, 8006f7c <_strtod_l+0x8ec>
 8006f3a:	464b      	mov	r3, r9
 8006f3c:	4a99      	ldr	r2, [pc, #612]	; (80071a4 <_strtod_l+0xb14>)
 8006f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8006f42:	401a      	ands	r2, r3
 8006f44:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006f48:	d81b      	bhi.n	8006f82 <_strtod_l+0x8f2>
 8006f4a:	0d12      	lsrs	r2, r2, #20
 8006f4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006f50:	fa01 f303 	lsl.w	r3, r1, r3
 8006f54:	4298      	cmp	r0, r3
 8006f56:	d11a      	bne.n	8006f8e <_strtod_l+0x8fe>
 8006f58:	4b93      	ldr	r3, [pc, #588]	; (80071a8 <_strtod_l+0xb18>)
 8006f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d102      	bne.n	8006f66 <_strtod_l+0x8d6>
 8006f60:	3001      	adds	r0, #1
 8006f62:	f43f add8 	beq.w	8006b16 <_strtod_l+0x486>
 8006f66:	f04f 0800 	mov.w	r8, #0
 8006f6a:	4b8e      	ldr	r3, [pc, #568]	; (80071a4 <_strtod_l+0xb14>)
 8006f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f6e:	401a      	ands	r2, r3
 8006f70:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006f74:	9b05      	ldr	r3, [sp, #20]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d196      	bne.n	8006ea8 <_strtod_l+0x818>
 8006f7a:	e5d7      	b.n	8006b2c <_strtod_l+0x49c>
 8006f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f80:	e7e8      	b.n	8006f54 <_strtod_l+0x8c4>
 8006f82:	460b      	mov	r3, r1
 8006f84:	e7e6      	b.n	8006f54 <_strtod_l+0x8c4>
 8006f86:	ea53 0308 	orrs.w	r3, r3, r8
 8006f8a:	f43f af7d 	beq.w	8006e88 <_strtod_l+0x7f8>
 8006f8e:	b1e5      	cbz	r5, 8006fca <_strtod_l+0x93a>
 8006f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f92:	421d      	tst	r5, r3
 8006f94:	d0ee      	beq.n	8006f74 <_strtod_l+0x8e4>
 8006f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f98:	4640      	mov	r0, r8
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	9a05      	ldr	r2, [sp, #20]
 8006f9e:	b1c3      	cbz	r3, 8006fd2 <_strtod_l+0x942>
 8006fa0:	f7ff fb53 	bl	800664a <sulp>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006fac:	f7f9 f94a 	bl	8000244 <__adddf3>
 8006fb0:	4680      	mov	r8, r0
 8006fb2:	4689      	mov	r9, r1
 8006fb4:	e7de      	b.n	8006f74 <_strtod_l+0x8e4>
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006fbc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006fc0:	f04f 38ff 	mov.w	r8, #4294967295
 8006fc4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006fc8:	e7d4      	b.n	8006f74 <_strtod_l+0x8e4>
 8006fca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fcc:	ea13 0f08 	tst.w	r3, r8
 8006fd0:	e7e0      	b.n	8006f94 <_strtod_l+0x904>
 8006fd2:	f7ff fb3a 	bl	800664a <sulp>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006fde:	f7f9 f92f 	bl	8000240 <__aeabi_dsub>
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	4680      	mov	r8, r0
 8006fe8:	4689      	mov	r9, r1
 8006fea:	f7f9 fd49 	bl	8000a80 <__aeabi_dcmpeq>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d0c0      	beq.n	8006f74 <_strtod_l+0x8e4>
 8006ff2:	e602      	b.n	8006bfa <_strtod_l+0x56a>
 8006ff4:	4658      	mov	r0, fp
 8006ff6:	9904      	ldr	r1, [sp, #16]
 8006ff8:	f002 f864 	bl	80090c4 <__ratio>
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007002:	4606      	mov	r6, r0
 8007004:	460f      	mov	r7, r1
 8007006:	f7f9 fd4f 	bl	8000aa8 <__aeabi_dcmple>
 800700a:	2800      	cmp	r0, #0
 800700c:	d075      	beq.n	80070fa <_strtod_l+0xa6a>
 800700e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007010:	2b00      	cmp	r3, #0
 8007012:	d047      	beq.n	80070a4 <_strtod_l+0xa14>
 8007014:	2600      	movs	r6, #0
 8007016:	4f65      	ldr	r7, [pc, #404]	; (80071ac <_strtod_l+0xb1c>)
 8007018:	4d64      	ldr	r5, [pc, #400]	; (80071ac <_strtod_l+0xb1c>)
 800701a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007020:	0d1b      	lsrs	r3, r3, #20
 8007022:	051b      	lsls	r3, r3, #20
 8007024:	930f      	str	r3, [sp, #60]	; 0x3c
 8007026:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007028:	4b61      	ldr	r3, [pc, #388]	; (80071b0 <_strtod_l+0xb20>)
 800702a:	429a      	cmp	r2, r3
 800702c:	f040 80c8 	bne.w	80071c0 <_strtod_l+0xb30>
 8007030:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007034:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800703a:	4640      	mov	r0, r8
 800703c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007040:	4649      	mov	r1, r9
 8007042:	f001 ff69 	bl	8008f18 <__ulp>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4630      	mov	r0, r6
 800704c:	4639      	mov	r1, r7
 800704e:	f7f9 faaf 	bl	80005b0 <__aeabi_dmul>
 8007052:	4642      	mov	r2, r8
 8007054:	464b      	mov	r3, r9
 8007056:	f7f9 f8f5 	bl	8000244 <__adddf3>
 800705a:	460b      	mov	r3, r1
 800705c:	4951      	ldr	r1, [pc, #324]	; (80071a4 <_strtod_l+0xb14>)
 800705e:	4a55      	ldr	r2, [pc, #340]	; (80071b4 <_strtod_l+0xb24>)
 8007060:	4019      	ands	r1, r3
 8007062:	4291      	cmp	r1, r2
 8007064:	4680      	mov	r8, r0
 8007066:	d95e      	bls.n	8007126 <_strtod_l+0xa96>
 8007068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800706a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800706e:	4293      	cmp	r3, r2
 8007070:	d103      	bne.n	800707a <_strtod_l+0x9ea>
 8007072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007074:	3301      	adds	r3, #1
 8007076:	f43f ad4e 	beq.w	8006b16 <_strtod_l+0x486>
 800707a:	f04f 38ff 	mov.w	r8, #4294967295
 800707e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80071a8 <_strtod_l+0xb18>
 8007082:	4650      	mov	r0, sl
 8007084:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007086:	f001 fc17 	bl	80088b8 <_Bfree>
 800708a:	4650      	mov	r0, sl
 800708c:	9906      	ldr	r1, [sp, #24]
 800708e:	f001 fc13 	bl	80088b8 <_Bfree>
 8007092:	4650      	mov	r0, sl
 8007094:	9904      	ldr	r1, [sp, #16]
 8007096:	f001 fc0f 	bl	80088b8 <_Bfree>
 800709a:	4659      	mov	r1, fp
 800709c:	4650      	mov	r0, sl
 800709e:	f001 fc0b 	bl	80088b8 <_Bfree>
 80070a2:	e61c      	b.n	8006cde <_strtod_l+0x64e>
 80070a4:	f1b8 0f00 	cmp.w	r8, #0
 80070a8:	d119      	bne.n	80070de <_strtod_l+0xa4e>
 80070aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070b0:	b9e3      	cbnz	r3, 80070ec <_strtod_l+0xa5c>
 80070b2:	2200      	movs	r2, #0
 80070b4:	4630      	mov	r0, r6
 80070b6:	4639      	mov	r1, r7
 80070b8:	4b3c      	ldr	r3, [pc, #240]	; (80071ac <_strtod_l+0xb1c>)
 80070ba:	f7f9 fceb 	bl	8000a94 <__aeabi_dcmplt>
 80070be:	b9c8      	cbnz	r0, 80070f4 <_strtod_l+0xa64>
 80070c0:	2200      	movs	r2, #0
 80070c2:	4630      	mov	r0, r6
 80070c4:	4639      	mov	r1, r7
 80070c6:	4b3c      	ldr	r3, [pc, #240]	; (80071b8 <_strtod_l+0xb28>)
 80070c8:	f7f9 fa72 	bl	80005b0 <__aeabi_dmul>
 80070cc:	4604      	mov	r4, r0
 80070ce:	460d      	mov	r5, r1
 80070d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80070d4:	9418      	str	r4, [sp, #96]	; 0x60
 80070d6:	9319      	str	r3, [sp, #100]	; 0x64
 80070d8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80070dc:	e79d      	b.n	800701a <_strtod_l+0x98a>
 80070de:	f1b8 0f01 	cmp.w	r8, #1
 80070e2:	d103      	bne.n	80070ec <_strtod_l+0xa5c>
 80070e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f43f ad87 	beq.w	8006bfa <_strtod_l+0x56a>
 80070ec:	2600      	movs	r6, #0
 80070ee:	2400      	movs	r4, #0
 80070f0:	4f32      	ldr	r7, [pc, #200]	; (80071bc <_strtod_l+0xb2c>)
 80070f2:	e791      	b.n	8007018 <_strtod_l+0x988>
 80070f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80070f6:	4d30      	ldr	r5, [pc, #192]	; (80071b8 <_strtod_l+0xb28>)
 80070f8:	e7ea      	b.n	80070d0 <_strtod_l+0xa40>
 80070fa:	4b2f      	ldr	r3, [pc, #188]	; (80071b8 <_strtod_l+0xb28>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	4630      	mov	r0, r6
 8007100:	4639      	mov	r1, r7
 8007102:	f7f9 fa55 	bl	80005b0 <__aeabi_dmul>
 8007106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007108:	4604      	mov	r4, r0
 800710a:	460d      	mov	r5, r1
 800710c:	b933      	cbnz	r3, 800711c <_strtod_l+0xa8c>
 800710e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007112:	9010      	str	r0, [sp, #64]	; 0x40
 8007114:	9311      	str	r3, [sp, #68]	; 0x44
 8007116:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800711a:	e77e      	b.n	800701a <_strtod_l+0x98a>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007124:	e7f7      	b.n	8007116 <_strtod_l+0xa86>
 8007126:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800712a:	9b05      	ldr	r3, [sp, #20]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1a8      	bne.n	8007082 <_strtod_l+0x9f2>
 8007130:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007134:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007136:	0d1b      	lsrs	r3, r3, #20
 8007138:	051b      	lsls	r3, r3, #20
 800713a:	429a      	cmp	r2, r3
 800713c:	d1a1      	bne.n	8007082 <_strtod_l+0x9f2>
 800713e:	4620      	mov	r0, r4
 8007140:	4629      	mov	r1, r5
 8007142:	f7fa f869 	bl	8001218 <__aeabi_d2lz>
 8007146:	f7f9 fa05 	bl	8000554 <__aeabi_l2d>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4620      	mov	r0, r4
 8007150:	4629      	mov	r1, r5
 8007152:	f7f9 f875 	bl	8000240 <__aeabi_dsub>
 8007156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800715c:	ea43 0308 	orr.w	r3, r3, r8
 8007160:	4313      	orrs	r3, r2
 8007162:	4604      	mov	r4, r0
 8007164:	460d      	mov	r5, r1
 8007166:	d066      	beq.n	8007236 <_strtod_l+0xba6>
 8007168:	a309      	add	r3, pc, #36	; (adr r3, 8007190 <_strtod_l+0xb00>)
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	f7f9 fc91 	bl	8000a94 <__aeabi_dcmplt>
 8007172:	2800      	cmp	r0, #0
 8007174:	f47f acda 	bne.w	8006b2c <_strtod_l+0x49c>
 8007178:	a307      	add	r3, pc, #28	; (adr r3, 8007198 <_strtod_l+0xb08>)
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717e:	4620      	mov	r0, r4
 8007180:	4629      	mov	r1, r5
 8007182:	f7f9 fca5 	bl	8000ad0 <__aeabi_dcmpgt>
 8007186:	2800      	cmp	r0, #0
 8007188:	f43f af7b 	beq.w	8007082 <_strtod_l+0x9f2>
 800718c:	e4ce      	b.n	8006b2c <_strtod_l+0x49c>
 800718e:	bf00      	nop
 8007190:	94a03595 	.word	0x94a03595
 8007194:	3fdfffff 	.word	0x3fdfffff
 8007198:	35afe535 	.word	0x35afe535
 800719c:	3fe00000 	.word	0x3fe00000
 80071a0:	000fffff 	.word	0x000fffff
 80071a4:	7ff00000 	.word	0x7ff00000
 80071a8:	7fefffff 	.word	0x7fefffff
 80071ac:	3ff00000 	.word	0x3ff00000
 80071b0:	7fe00000 	.word	0x7fe00000
 80071b4:	7c9fffff 	.word	0x7c9fffff
 80071b8:	3fe00000 	.word	0x3fe00000
 80071bc:	bff00000 	.word	0xbff00000
 80071c0:	9b05      	ldr	r3, [sp, #20]
 80071c2:	b313      	cbz	r3, 800720a <_strtod_l+0xb7a>
 80071c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80071ca:	d81e      	bhi.n	800720a <_strtod_l+0xb7a>
 80071cc:	a326      	add	r3, pc, #152	; (adr r3, 8007268 <_strtod_l+0xbd8>)
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	4620      	mov	r0, r4
 80071d4:	4629      	mov	r1, r5
 80071d6:	f7f9 fc67 	bl	8000aa8 <__aeabi_dcmple>
 80071da:	b190      	cbz	r0, 8007202 <_strtod_l+0xb72>
 80071dc:	4629      	mov	r1, r5
 80071de:	4620      	mov	r0, r4
 80071e0:	f7f9 fcbe 	bl	8000b60 <__aeabi_d2uiz>
 80071e4:	2801      	cmp	r0, #1
 80071e6:	bf38      	it	cc
 80071e8:	2001      	movcc	r0, #1
 80071ea:	f7f9 f967 	bl	80004bc <__aeabi_ui2d>
 80071ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071f0:	4604      	mov	r4, r0
 80071f2:	460d      	mov	r5, r1
 80071f4:	b9d3      	cbnz	r3, 800722c <_strtod_l+0xb9c>
 80071f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071fa:	9012      	str	r0, [sp, #72]	; 0x48
 80071fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80071fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007202:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007204:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007208:	1a9f      	subs	r7, r3, r2
 800720a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800720e:	f001 fe83 	bl	8008f18 <__ulp>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4630      	mov	r0, r6
 8007218:	4639      	mov	r1, r7
 800721a:	f7f9 f9c9 	bl	80005b0 <__aeabi_dmul>
 800721e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007222:	f7f9 f80f 	bl	8000244 <__adddf3>
 8007226:	4680      	mov	r8, r0
 8007228:	4689      	mov	r9, r1
 800722a:	e77e      	b.n	800712a <_strtod_l+0xa9a>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007234:	e7e3      	b.n	80071fe <_strtod_l+0xb6e>
 8007236:	a30e      	add	r3, pc, #56	; (adr r3, 8007270 <_strtod_l+0xbe0>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f7f9 fc2a 	bl	8000a94 <__aeabi_dcmplt>
 8007240:	e7a1      	b.n	8007186 <_strtod_l+0xaf6>
 8007242:	2300      	movs	r3, #0
 8007244:	930c      	str	r3, [sp, #48]	; 0x30
 8007246:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007248:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	f7ff ba65 	b.w	800671a <_strtod_l+0x8a>
 8007250:	2b65      	cmp	r3, #101	; 0x65
 8007252:	f43f ab5c 	beq.w	800690e <_strtod_l+0x27e>
 8007256:	2b45      	cmp	r3, #69	; 0x45
 8007258:	f43f ab59 	beq.w	800690e <_strtod_l+0x27e>
 800725c:	2201      	movs	r2, #1
 800725e:	f7ff bb8d 	b.w	800697c <_strtod_l+0x2ec>
 8007262:	bf00      	nop
 8007264:	f3af 8000 	nop.w
 8007268:	ffc00000 	.word	0xffc00000
 800726c:	41dfffff 	.word	0x41dfffff
 8007270:	94a03595 	.word	0x94a03595
 8007274:	3fcfffff 	.word	0x3fcfffff

08007278 <_strtod_r>:
 8007278:	4b01      	ldr	r3, [pc, #4]	; (8007280 <_strtod_r+0x8>)
 800727a:	f7ff ba09 	b.w	8006690 <_strtod_l>
 800727e:	bf00      	nop
 8007280:	20000074 	.word	0x20000074

08007284 <_strtol_l.isra.0>:
 8007284:	2b01      	cmp	r3, #1
 8007286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800728a:	4686      	mov	lr, r0
 800728c:	d001      	beq.n	8007292 <_strtol_l.isra.0+0xe>
 800728e:	2b24      	cmp	r3, #36	; 0x24
 8007290:	d906      	bls.n	80072a0 <_strtol_l.isra.0+0x1c>
 8007292:	f7fe fa6f 	bl	8005774 <__errno>
 8007296:	2316      	movs	r3, #22
 8007298:	6003      	str	r3, [r0, #0]
 800729a:	2000      	movs	r0, #0
 800729c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a0:	468c      	mov	ip, r1
 80072a2:	4e3a      	ldr	r6, [pc, #232]	; (800738c <_strtol_l.isra.0+0x108>)
 80072a4:	4660      	mov	r0, ip
 80072a6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80072aa:	5da5      	ldrb	r5, [r4, r6]
 80072ac:	f015 0508 	ands.w	r5, r5, #8
 80072b0:	d1f8      	bne.n	80072a4 <_strtol_l.isra.0+0x20>
 80072b2:	2c2d      	cmp	r4, #45	; 0x2d
 80072b4:	d133      	bne.n	800731e <_strtol_l.isra.0+0x9a>
 80072b6:	f04f 0801 	mov.w	r8, #1
 80072ba:	f89c 4000 	ldrb.w	r4, [ip]
 80072be:	f100 0c02 	add.w	ip, r0, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d05d      	beq.n	8007382 <_strtol_l.isra.0+0xfe>
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	d10c      	bne.n	80072e4 <_strtol_l.isra.0+0x60>
 80072ca:	2c30      	cmp	r4, #48	; 0x30
 80072cc:	d10a      	bne.n	80072e4 <_strtol_l.isra.0+0x60>
 80072ce:	f89c 0000 	ldrb.w	r0, [ip]
 80072d2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80072d6:	2858      	cmp	r0, #88	; 0x58
 80072d8:	d14e      	bne.n	8007378 <_strtol_l.isra.0+0xf4>
 80072da:	2310      	movs	r3, #16
 80072dc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80072e0:	f10c 0c02 	add.w	ip, ip, #2
 80072e4:	2500      	movs	r5, #0
 80072e6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80072ea:	3f01      	subs	r7, #1
 80072ec:	fbb7 f9f3 	udiv	r9, r7, r3
 80072f0:	4628      	mov	r0, r5
 80072f2:	fb03 7a19 	mls	sl, r3, r9, r7
 80072f6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80072fa:	2e09      	cmp	r6, #9
 80072fc:	d818      	bhi.n	8007330 <_strtol_l.isra.0+0xac>
 80072fe:	4634      	mov	r4, r6
 8007300:	42a3      	cmp	r3, r4
 8007302:	dd24      	ble.n	800734e <_strtol_l.isra.0+0xca>
 8007304:	2d00      	cmp	r5, #0
 8007306:	db1f      	blt.n	8007348 <_strtol_l.isra.0+0xc4>
 8007308:	4581      	cmp	r9, r0
 800730a:	d31d      	bcc.n	8007348 <_strtol_l.isra.0+0xc4>
 800730c:	d101      	bne.n	8007312 <_strtol_l.isra.0+0x8e>
 800730e:	45a2      	cmp	sl, r4
 8007310:	db1a      	blt.n	8007348 <_strtol_l.isra.0+0xc4>
 8007312:	2501      	movs	r5, #1
 8007314:	fb00 4003 	mla	r0, r0, r3, r4
 8007318:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800731c:	e7eb      	b.n	80072f6 <_strtol_l.isra.0+0x72>
 800731e:	2c2b      	cmp	r4, #43	; 0x2b
 8007320:	bf08      	it	eq
 8007322:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007326:	46a8      	mov	r8, r5
 8007328:	bf08      	it	eq
 800732a:	f100 0c02 	addeq.w	ip, r0, #2
 800732e:	e7c8      	b.n	80072c2 <_strtol_l.isra.0+0x3e>
 8007330:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007334:	2e19      	cmp	r6, #25
 8007336:	d801      	bhi.n	800733c <_strtol_l.isra.0+0xb8>
 8007338:	3c37      	subs	r4, #55	; 0x37
 800733a:	e7e1      	b.n	8007300 <_strtol_l.isra.0+0x7c>
 800733c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007340:	2e19      	cmp	r6, #25
 8007342:	d804      	bhi.n	800734e <_strtol_l.isra.0+0xca>
 8007344:	3c57      	subs	r4, #87	; 0x57
 8007346:	e7db      	b.n	8007300 <_strtol_l.isra.0+0x7c>
 8007348:	f04f 35ff 	mov.w	r5, #4294967295
 800734c:	e7e4      	b.n	8007318 <_strtol_l.isra.0+0x94>
 800734e:	2d00      	cmp	r5, #0
 8007350:	da08      	bge.n	8007364 <_strtol_l.isra.0+0xe0>
 8007352:	2322      	movs	r3, #34	; 0x22
 8007354:	4638      	mov	r0, r7
 8007356:	f8ce 3000 	str.w	r3, [lr]
 800735a:	2a00      	cmp	r2, #0
 800735c:	d09e      	beq.n	800729c <_strtol_l.isra.0+0x18>
 800735e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007362:	e007      	b.n	8007374 <_strtol_l.isra.0+0xf0>
 8007364:	f1b8 0f00 	cmp.w	r8, #0
 8007368:	d000      	beq.n	800736c <_strtol_l.isra.0+0xe8>
 800736a:	4240      	negs	r0, r0
 800736c:	2a00      	cmp	r2, #0
 800736e:	d095      	beq.n	800729c <_strtol_l.isra.0+0x18>
 8007370:	2d00      	cmp	r5, #0
 8007372:	d1f4      	bne.n	800735e <_strtol_l.isra.0+0xda>
 8007374:	6011      	str	r1, [r2, #0]
 8007376:	e791      	b.n	800729c <_strtol_l.isra.0+0x18>
 8007378:	2430      	movs	r4, #48	; 0x30
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1b2      	bne.n	80072e4 <_strtol_l.isra.0+0x60>
 800737e:	2308      	movs	r3, #8
 8007380:	e7b0      	b.n	80072e4 <_strtol_l.isra.0+0x60>
 8007382:	2c30      	cmp	r4, #48	; 0x30
 8007384:	d0a3      	beq.n	80072ce <_strtol_l.isra.0+0x4a>
 8007386:	230a      	movs	r3, #10
 8007388:	e7ac      	b.n	80072e4 <_strtol_l.isra.0+0x60>
 800738a:	bf00      	nop
 800738c:	0800ac31 	.word	0x0800ac31

08007390 <_strtol_r>:
 8007390:	f7ff bf78 	b.w	8007284 <_strtol_l.isra.0>

08007394 <_write_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4604      	mov	r4, r0
 8007398:	4608      	mov	r0, r1
 800739a:	4611      	mov	r1, r2
 800739c:	2200      	movs	r2, #0
 800739e:	4d05      	ldr	r5, [pc, #20]	; (80073b4 <_write_r+0x20>)
 80073a0:	602a      	str	r2, [r5, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	f7fb f834 	bl	8002410 <_write>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d102      	bne.n	80073b2 <_write_r+0x1e>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b103      	cbz	r3, 80073b2 <_write_r+0x1e>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	200003a0 	.word	0x200003a0

080073b8 <_close_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	2300      	movs	r3, #0
 80073bc:	4d05      	ldr	r5, [pc, #20]	; (80073d4 <_close_r+0x1c>)
 80073be:	4604      	mov	r4, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	602b      	str	r3, [r5, #0]
 80073c4:	f7fb f840 	bl	8002448 <_close>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d102      	bne.n	80073d2 <_close_r+0x1a>
 80073cc:	682b      	ldr	r3, [r5, #0]
 80073ce:	b103      	cbz	r3, 80073d2 <_close_r+0x1a>
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	200003a0 	.word	0x200003a0

080073d8 <quorem>:
 80073d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	6903      	ldr	r3, [r0, #16]
 80073de:	690c      	ldr	r4, [r1, #16]
 80073e0:	4607      	mov	r7, r0
 80073e2:	42a3      	cmp	r3, r4
 80073e4:	f2c0 8083 	blt.w	80074ee <quorem+0x116>
 80073e8:	3c01      	subs	r4, #1
 80073ea:	f100 0514 	add.w	r5, r0, #20
 80073ee:	f101 0814 	add.w	r8, r1, #20
 80073f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007400:	3301      	adds	r3, #1
 8007402:	429a      	cmp	r2, r3
 8007404:	fbb2 f6f3 	udiv	r6, r2, r3
 8007408:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800740c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007410:	d332      	bcc.n	8007478 <quorem+0xa0>
 8007412:	f04f 0e00 	mov.w	lr, #0
 8007416:	4640      	mov	r0, r8
 8007418:	46ac      	mov	ip, r5
 800741a:	46f2      	mov	sl, lr
 800741c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007420:	b293      	uxth	r3, r2
 8007422:	fb06 e303 	mla	r3, r6, r3, lr
 8007426:	0c12      	lsrs	r2, r2, #16
 8007428:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800742c:	fb06 e202 	mla	r2, r6, r2, lr
 8007430:	b29b      	uxth	r3, r3
 8007432:	ebaa 0303 	sub.w	r3, sl, r3
 8007436:	f8dc a000 	ldr.w	sl, [ip]
 800743a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800743e:	fa1f fa8a 	uxth.w	sl, sl
 8007442:	4453      	add	r3, sl
 8007444:	fa1f fa82 	uxth.w	sl, r2
 8007448:	f8dc 2000 	ldr.w	r2, [ip]
 800744c:	4581      	cmp	r9, r0
 800744e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007452:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007456:	b29b      	uxth	r3, r3
 8007458:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800745c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007460:	f84c 3b04 	str.w	r3, [ip], #4
 8007464:	d2da      	bcs.n	800741c <quorem+0x44>
 8007466:	f855 300b 	ldr.w	r3, [r5, fp]
 800746a:	b92b      	cbnz	r3, 8007478 <quorem+0xa0>
 800746c:	9b01      	ldr	r3, [sp, #4]
 800746e:	3b04      	subs	r3, #4
 8007470:	429d      	cmp	r5, r3
 8007472:	461a      	mov	r2, r3
 8007474:	d32f      	bcc.n	80074d6 <quorem+0xfe>
 8007476:	613c      	str	r4, [r7, #16]
 8007478:	4638      	mov	r0, r7
 800747a:	f001 fca1 	bl	8008dc0 <__mcmp>
 800747e:	2800      	cmp	r0, #0
 8007480:	db25      	blt.n	80074ce <quorem+0xf6>
 8007482:	4628      	mov	r0, r5
 8007484:	f04f 0c00 	mov.w	ip, #0
 8007488:	3601      	adds	r6, #1
 800748a:	f858 1b04 	ldr.w	r1, [r8], #4
 800748e:	f8d0 e000 	ldr.w	lr, [r0]
 8007492:	b28b      	uxth	r3, r1
 8007494:	ebac 0303 	sub.w	r3, ip, r3
 8007498:	fa1f f28e 	uxth.w	r2, lr
 800749c:	4413      	add	r3, r2
 800749e:	0c0a      	lsrs	r2, r1, #16
 80074a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074ae:	45c1      	cmp	r9, r8
 80074b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074b4:	f840 3b04 	str.w	r3, [r0], #4
 80074b8:	d2e7      	bcs.n	800748a <quorem+0xb2>
 80074ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074c2:	b922      	cbnz	r2, 80074ce <quorem+0xf6>
 80074c4:	3b04      	subs	r3, #4
 80074c6:	429d      	cmp	r5, r3
 80074c8:	461a      	mov	r2, r3
 80074ca:	d30a      	bcc.n	80074e2 <quorem+0x10a>
 80074cc:	613c      	str	r4, [r7, #16]
 80074ce:	4630      	mov	r0, r6
 80074d0:	b003      	add	sp, #12
 80074d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d6:	6812      	ldr	r2, [r2, #0]
 80074d8:	3b04      	subs	r3, #4
 80074da:	2a00      	cmp	r2, #0
 80074dc:	d1cb      	bne.n	8007476 <quorem+0x9e>
 80074de:	3c01      	subs	r4, #1
 80074e0:	e7c6      	b.n	8007470 <quorem+0x98>
 80074e2:	6812      	ldr	r2, [r2, #0]
 80074e4:	3b04      	subs	r3, #4
 80074e6:	2a00      	cmp	r2, #0
 80074e8:	d1f0      	bne.n	80074cc <quorem+0xf4>
 80074ea:	3c01      	subs	r4, #1
 80074ec:	e7eb      	b.n	80074c6 <quorem+0xee>
 80074ee:	2000      	movs	r0, #0
 80074f0:	e7ee      	b.n	80074d0 <quorem+0xf8>
 80074f2:	0000      	movs	r0, r0
 80074f4:	0000      	movs	r0, r0
	...

080074f8 <_dtoa_r>:
 80074f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	4616      	mov	r6, r2
 80074fe:	461f      	mov	r7, r3
 8007500:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007502:	b099      	sub	sp, #100	; 0x64
 8007504:	4605      	mov	r5, r0
 8007506:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800750a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800750e:	b974      	cbnz	r4, 800752e <_dtoa_r+0x36>
 8007510:	2010      	movs	r0, #16
 8007512:	f001 f95b 	bl	80087cc <malloc>
 8007516:	4602      	mov	r2, r0
 8007518:	6268      	str	r0, [r5, #36]	; 0x24
 800751a:	b920      	cbnz	r0, 8007526 <_dtoa_r+0x2e>
 800751c:	21ea      	movs	r1, #234	; 0xea
 800751e:	4bae      	ldr	r3, [pc, #696]	; (80077d8 <_dtoa_r+0x2e0>)
 8007520:	48ae      	ldr	r0, [pc, #696]	; (80077dc <_dtoa_r+0x2e4>)
 8007522:	f002 fca7 	bl	8009e74 <__assert_func>
 8007526:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800752a:	6004      	str	r4, [r0, #0]
 800752c:	60c4      	str	r4, [r0, #12]
 800752e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007530:	6819      	ldr	r1, [r3, #0]
 8007532:	b151      	cbz	r1, 800754a <_dtoa_r+0x52>
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	2301      	movs	r3, #1
 8007538:	4093      	lsls	r3, r2
 800753a:	604a      	str	r2, [r1, #4]
 800753c:	608b      	str	r3, [r1, #8]
 800753e:	4628      	mov	r0, r5
 8007540:	f001 f9ba 	bl	80088b8 <_Bfree>
 8007544:	2200      	movs	r2, #0
 8007546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	1e3b      	subs	r3, r7, #0
 800754c:	bfaf      	iteee	ge
 800754e:	2300      	movge	r3, #0
 8007550:	2201      	movlt	r2, #1
 8007552:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007556:	9305      	strlt	r3, [sp, #20]
 8007558:	bfa8      	it	ge
 800755a:	f8c8 3000 	strge.w	r3, [r8]
 800755e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007562:	4b9f      	ldr	r3, [pc, #636]	; (80077e0 <_dtoa_r+0x2e8>)
 8007564:	bfb8      	it	lt
 8007566:	f8c8 2000 	strlt.w	r2, [r8]
 800756a:	ea33 0309 	bics.w	r3, r3, r9
 800756e:	d119      	bne.n	80075a4 <_dtoa_r+0xac>
 8007570:	f242 730f 	movw	r3, #9999	; 0x270f
 8007574:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800757c:	4333      	orrs	r3, r6
 800757e:	f000 8580 	beq.w	8008082 <_dtoa_r+0xb8a>
 8007582:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007584:	b953      	cbnz	r3, 800759c <_dtoa_r+0xa4>
 8007586:	4b97      	ldr	r3, [pc, #604]	; (80077e4 <_dtoa_r+0x2ec>)
 8007588:	e022      	b.n	80075d0 <_dtoa_r+0xd8>
 800758a:	4b97      	ldr	r3, [pc, #604]	; (80077e8 <_dtoa_r+0x2f0>)
 800758c:	9308      	str	r3, [sp, #32]
 800758e:	3308      	adds	r3, #8
 8007590:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	9808      	ldr	r0, [sp, #32]
 8007596:	b019      	add	sp, #100	; 0x64
 8007598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759c:	4b91      	ldr	r3, [pc, #580]	; (80077e4 <_dtoa_r+0x2ec>)
 800759e:	9308      	str	r3, [sp, #32]
 80075a0:	3303      	adds	r3, #3
 80075a2:	e7f5      	b.n	8007590 <_dtoa_r+0x98>
 80075a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80075a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80075ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075b0:	2200      	movs	r2, #0
 80075b2:	2300      	movs	r3, #0
 80075b4:	f7f9 fa64 	bl	8000a80 <__aeabi_dcmpeq>
 80075b8:	4680      	mov	r8, r0
 80075ba:	b158      	cbz	r0, 80075d4 <_dtoa_r+0xdc>
 80075bc:	2301      	movs	r3, #1
 80075be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 8559 	beq.w	800807c <_dtoa_r+0xb84>
 80075ca:	4888      	ldr	r0, [pc, #544]	; (80077ec <_dtoa_r+0x2f4>)
 80075cc:	6018      	str	r0, [r3, #0]
 80075ce:	1e43      	subs	r3, r0, #1
 80075d0:	9308      	str	r3, [sp, #32]
 80075d2:	e7df      	b.n	8007594 <_dtoa_r+0x9c>
 80075d4:	ab16      	add	r3, sp, #88	; 0x58
 80075d6:	9301      	str	r3, [sp, #4]
 80075d8:	ab17      	add	r3, sp, #92	; 0x5c
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	4628      	mov	r0, r5
 80075de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80075e2:	f001 fd13 	bl	800900c <__d2b>
 80075e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80075ea:	4682      	mov	sl, r0
 80075ec:	2c00      	cmp	r4, #0
 80075ee:	d07e      	beq.n	80076ee <_dtoa_r+0x1f6>
 80075f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80075fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007602:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007606:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800760a:	2200      	movs	r2, #0
 800760c:	4b78      	ldr	r3, [pc, #480]	; (80077f0 <_dtoa_r+0x2f8>)
 800760e:	f7f8 fe17 	bl	8000240 <__aeabi_dsub>
 8007612:	a36b      	add	r3, pc, #428	; (adr r3, 80077c0 <_dtoa_r+0x2c8>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	f7f8 ffca 	bl	80005b0 <__aeabi_dmul>
 800761c:	a36a      	add	r3, pc, #424	; (adr r3, 80077c8 <_dtoa_r+0x2d0>)
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	f7f8 fe0f 	bl	8000244 <__adddf3>
 8007626:	4606      	mov	r6, r0
 8007628:	4620      	mov	r0, r4
 800762a:	460f      	mov	r7, r1
 800762c:	f7f8 ff56 	bl	80004dc <__aeabi_i2d>
 8007630:	a367      	add	r3, pc, #412	; (adr r3, 80077d0 <_dtoa_r+0x2d8>)
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	f7f8 ffbb 	bl	80005b0 <__aeabi_dmul>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	f7f8 fdff 	bl	8000244 <__adddf3>
 8007646:	4606      	mov	r6, r0
 8007648:	460f      	mov	r7, r1
 800764a:	f7f9 fa61 	bl	8000b10 <__aeabi_d2iz>
 800764e:	2200      	movs	r2, #0
 8007650:	4681      	mov	r9, r0
 8007652:	2300      	movs	r3, #0
 8007654:	4630      	mov	r0, r6
 8007656:	4639      	mov	r1, r7
 8007658:	f7f9 fa1c 	bl	8000a94 <__aeabi_dcmplt>
 800765c:	b148      	cbz	r0, 8007672 <_dtoa_r+0x17a>
 800765e:	4648      	mov	r0, r9
 8007660:	f7f8 ff3c 	bl	80004dc <__aeabi_i2d>
 8007664:	4632      	mov	r2, r6
 8007666:	463b      	mov	r3, r7
 8007668:	f7f9 fa0a 	bl	8000a80 <__aeabi_dcmpeq>
 800766c:	b908      	cbnz	r0, 8007672 <_dtoa_r+0x17a>
 800766e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007672:	f1b9 0f16 	cmp.w	r9, #22
 8007676:	d857      	bhi.n	8007728 <_dtoa_r+0x230>
 8007678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800767c:	4b5d      	ldr	r3, [pc, #372]	; (80077f4 <_dtoa_r+0x2fc>)
 800767e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	f7f9 fa05 	bl	8000a94 <__aeabi_dcmplt>
 800768a:	2800      	cmp	r0, #0
 800768c:	d04e      	beq.n	800772c <_dtoa_r+0x234>
 800768e:	2300      	movs	r3, #0
 8007690:	f109 39ff 	add.w	r9, r9, #4294967295
 8007694:	930f      	str	r3, [sp, #60]	; 0x3c
 8007696:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007698:	1b1c      	subs	r4, r3, r4
 800769a:	1e63      	subs	r3, r4, #1
 800769c:	9309      	str	r3, [sp, #36]	; 0x24
 800769e:	bf49      	itett	mi
 80076a0:	f1c4 0301 	rsbmi	r3, r4, #1
 80076a4:	2300      	movpl	r3, #0
 80076a6:	9306      	strmi	r3, [sp, #24]
 80076a8:	2300      	movmi	r3, #0
 80076aa:	bf54      	ite	pl
 80076ac:	9306      	strpl	r3, [sp, #24]
 80076ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 80076b0:	f1b9 0f00 	cmp.w	r9, #0
 80076b4:	db3c      	blt.n	8007730 <_dtoa_r+0x238>
 80076b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80076bc:	444b      	add	r3, r9
 80076be:	9309      	str	r3, [sp, #36]	; 0x24
 80076c0:	2300      	movs	r3, #0
 80076c2:	930a      	str	r3, [sp, #40]	; 0x28
 80076c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076c6:	2b09      	cmp	r3, #9
 80076c8:	d86c      	bhi.n	80077a4 <_dtoa_r+0x2ac>
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	bfc4      	itt	gt
 80076ce:	3b04      	subgt	r3, #4
 80076d0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80076d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076d4:	bfc8      	it	gt
 80076d6:	2400      	movgt	r4, #0
 80076d8:	f1a3 0302 	sub.w	r3, r3, #2
 80076dc:	bfd8      	it	le
 80076de:	2401      	movle	r4, #1
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	f200 808b 	bhi.w	80077fc <_dtoa_r+0x304>
 80076e6:	e8df f003 	tbb	[pc, r3]
 80076ea:	4f2d      	.short	0x4f2d
 80076ec:	5b4d      	.short	0x5b4d
 80076ee:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80076f2:	441c      	add	r4, r3
 80076f4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	bfc3      	ittte	gt
 80076fc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007700:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007704:	fa09 f303 	lslgt.w	r3, r9, r3
 8007708:	f1c3 0320 	rsble	r3, r3, #32
 800770c:	bfc6      	itte	gt
 800770e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007712:	4318      	orrgt	r0, r3
 8007714:	fa06 f003 	lslle.w	r0, r6, r3
 8007718:	f7f8 fed0 	bl	80004bc <__aeabi_ui2d>
 800771c:	2301      	movs	r3, #1
 800771e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007722:	3c01      	subs	r4, #1
 8007724:	9313      	str	r3, [sp, #76]	; 0x4c
 8007726:	e770      	b.n	800760a <_dtoa_r+0x112>
 8007728:	2301      	movs	r3, #1
 800772a:	e7b3      	b.n	8007694 <_dtoa_r+0x19c>
 800772c:	900f      	str	r0, [sp, #60]	; 0x3c
 800772e:	e7b2      	b.n	8007696 <_dtoa_r+0x19e>
 8007730:	9b06      	ldr	r3, [sp, #24]
 8007732:	eba3 0309 	sub.w	r3, r3, r9
 8007736:	9306      	str	r3, [sp, #24]
 8007738:	f1c9 0300 	rsb	r3, r9, #0
 800773c:	930a      	str	r3, [sp, #40]	; 0x28
 800773e:	2300      	movs	r3, #0
 8007740:	930e      	str	r3, [sp, #56]	; 0x38
 8007742:	e7bf      	b.n	80076c4 <_dtoa_r+0x1cc>
 8007744:	2300      	movs	r3, #0
 8007746:	930b      	str	r3, [sp, #44]	; 0x2c
 8007748:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800774a:	2b00      	cmp	r3, #0
 800774c:	dc59      	bgt.n	8007802 <_dtoa_r+0x30a>
 800774e:	f04f 0b01 	mov.w	fp, #1
 8007752:	465b      	mov	r3, fp
 8007754:	f8cd b008 	str.w	fp, [sp, #8]
 8007758:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800775c:	2200      	movs	r2, #0
 800775e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007760:	6042      	str	r2, [r0, #4]
 8007762:	2204      	movs	r2, #4
 8007764:	f102 0614 	add.w	r6, r2, #20
 8007768:	429e      	cmp	r6, r3
 800776a:	6841      	ldr	r1, [r0, #4]
 800776c:	d94f      	bls.n	800780e <_dtoa_r+0x316>
 800776e:	4628      	mov	r0, r5
 8007770:	f001 f862 	bl	8008838 <_Balloc>
 8007774:	9008      	str	r0, [sp, #32]
 8007776:	2800      	cmp	r0, #0
 8007778:	d14d      	bne.n	8007816 <_dtoa_r+0x31e>
 800777a:	4602      	mov	r2, r0
 800777c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007780:	4b1d      	ldr	r3, [pc, #116]	; (80077f8 <_dtoa_r+0x300>)
 8007782:	e6cd      	b.n	8007520 <_dtoa_r+0x28>
 8007784:	2301      	movs	r3, #1
 8007786:	e7de      	b.n	8007746 <_dtoa_r+0x24e>
 8007788:	2300      	movs	r3, #0
 800778a:	930b      	str	r3, [sp, #44]	; 0x2c
 800778c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800778e:	eb09 0b03 	add.w	fp, r9, r3
 8007792:	f10b 0301 	add.w	r3, fp, #1
 8007796:	2b01      	cmp	r3, #1
 8007798:	9302      	str	r3, [sp, #8]
 800779a:	bfb8      	it	lt
 800779c:	2301      	movlt	r3, #1
 800779e:	e7dd      	b.n	800775c <_dtoa_r+0x264>
 80077a0:	2301      	movs	r3, #1
 80077a2:	e7f2      	b.n	800778a <_dtoa_r+0x292>
 80077a4:	2401      	movs	r4, #1
 80077a6:	2300      	movs	r3, #0
 80077a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80077aa:	9322      	str	r3, [sp, #136]	; 0x88
 80077ac:	f04f 3bff 	mov.w	fp, #4294967295
 80077b0:	2200      	movs	r2, #0
 80077b2:	2312      	movs	r3, #18
 80077b4:	f8cd b008 	str.w	fp, [sp, #8]
 80077b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80077ba:	e7cf      	b.n	800775c <_dtoa_r+0x264>
 80077bc:	f3af 8000 	nop.w
 80077c0:	636f4361 	.word	0x636f4361
 80077c4:	3fd287a7 	.word	0x3fd287a7
 80077c8:	8b60c8b3 	.word	0x8b60c8b3
 80077cc:	3fc68a28 	.word	0x3fc68a28
 80077d0:	509f79fb 	.word	0x509f79fb
 80077d4:	3fd34413 	.word	0x3fd34413
 80077d8:	0800ad3e 	.word	0x0800ad3e
 80077dc:	0800ad55 	.word	0x0800ad55
 80077e0:	7ff00000 	.word	0x7ff00000
 80077e4:	0800ad3a 	.word	0x0800ad3a
 80077e8:	0800ad31 	.word	0x0800ad31
 80077ec:	0800afba 	.word	0x0800afba
 80077f0:	3ff80000 	.word	0x3ff80000
 80077f4:	0800aed0 	.word	0x0800aed0
 80077f8:	0800adb4 	.word	0x0800adb4
 80077fc:	2301      	movs	r3, #1
 80077fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007800:	e7d4      	b.n	80077ac <_dtoa_r+0x2b4>
 8007802:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007806:	465b      	mov	r3, fp
 8007808:	f8cd b008 	str.w	fp, [sp, #8]
 800780c:	e7a6      	b.n	800775c <_dtoa_r+0x264>
 800780e:	3101      	adds	r1, #1
 8007810:	6041      	str	r1, [r0, #4]
 8007812:	0052      	lsls	r2, r2, #1
 8007814:	e7a6      	b.n	8007764 <_dtoa_r+0x26c>
 8007816:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007818:	9a08      	ldr	r2, [sp, #32]
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	9b02      	ldr	r3, [sp, #8]
 800781e:	2b0e      	cmp	r3, #14
 8007820:	f200 80a8 	bhi.w	8007974 <_dtoa_r+0x47c>
 8007824:	2c00      	cmp	r4, #0
 8007826:	f000 80a5 	beq.w	8007974 <_dtoa_r+0x47c>
 800782a:	f1b9 0f00 	cmp.w	r9, #0
 800782e:	dd34      	ble.n	800789a <_dtoa_r+0x3a2>
 8007830:	4a9a      	ldr	r2, [pc, #616]	; (8007a9c <_dtoa_r+0x5a4>)
 8007832:	f009 030f 	and.w	r3, r9, #15
 8007836:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800783a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800783e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007842:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007846:	ea4f 1429 	mov.w	r4, r9, asr #4
 800784a:	d016      	beq.n	800787a <_dtoa_r+0x382>
 800784c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007850:	4b93      	ldr	r3, [pc, #588]	; (8007aa0 <_dtoa_r+0x5a8>)
 8007852:	2703      	movs	r7, #3
 8007854:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007858:	f7f8 ffd4 	bl	8000804 <__aeabi_ddiv>
 800785c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007860:	f004 040f 	and.w	r4, r4, #15
 8007864:	4e8e      	ldr	r6, [pc, #568]	; (8007aa0 <_dtoa_r+0x5a8>)
 8007866:	b954      	cbnz	r4, 800787e <_dtoa_r+0x386>
 8007868:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800786c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007870:	f7f8 ffc8 	bl	8000804 <__aeabi_ddiv>
 8007874:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007878:	e029      	b.n	80078ce <_dtoa_r+0x3d6>
 800787a:	2702      	movs	r7, #2
 800787c:	e7f2      	b.n	8007864 <_dtoa_r+0x36c>
 800787e:	07e1      	lsls	r1, r4, #31
 8007880:	d508      	bpl.n	8007894 <_dtoa_r+0x39c>
 8007882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007886:	e9d6 2300 	ldrd	r2, r3, [r6]
 800788a:	f7f8 fe91 	bl	80005b0 <__aeabi_dmul>
 800788e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007892:	3701      	adds	r7, #1
 8007894:	1064      	asrs	r4, r4, #1
 8007896:	3608      	adds	r6, #8
 8007898:	e7e5      	b.n	8007866 <_dtoa_r+0x36e>
 800789a:	f000 80a5 	beq.w	80079e8 <_dtoa_r+0x4f0>
 800789e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078a2:	f1c9 0400 	rsb	r4, r9, #0
 80078a6:	4b7d      	ldr	r3, [pc, #500]	; (8007a9c <_dtoa_r+0x5a4>)
 80078a8:	f004 020f 	and.w	r2, r4, #15
 80078ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f7f8 fe7c 	bl	80005b0 <__aeabi_dmul>
 80078b8:	2702      	movs	r7, #2
 80078ba:	2300      	movs	r3, #0
 80078bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078c0:	4e77      	ldr	r6, [pc, #476]	; (8007aa0 <_dtoa_r+0x5a8>)
 80078c2:	1124      	asrs	r4, r4, #4
 80078c4:	2c00      	cmp	r4, #0
 80078c6:	f040 8084 	bne.w	80079d2 <_dtoa_r+0x4da>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1d2      	bne.n	8007874 <_dtoa_r+0x37c>
 80078ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 808b 	beq.w	80079ec <_dtoa_r+0x4f4>
 80078d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80078da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80078de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078e2:	2200      	movs	r2, #0
 80078e4:	4b6f      	ldr	r3, [pc, #444]	; (8007aa4 <_dtoa_r+0x5ac>)
 80078e6:	f7f9 f8d5 	bl	8000a94 <__aeabi_dcmplt>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d07e      	beq.n	80079ec <_dtoa_r+0x4f4>
 80078ee:	9b02      	ldr	r3, [sp, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d07b      	beq.n	80079ec <_dtoa_r+0x4f4>
 80078f4:	f1bb 0f00 	cmp.w	fp, #0
 80078f8:	dd38      	ble.n	800796c <_dtoa_r+0x474>
 80078fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078fe:	2200      	movs	r2, #0
 8007900:	4b69      	ldr	r3, [pc, #420]	; (8007aa8 <_dtoa_r+0x5b0>)
 8007902:	f7f8 fe55 	bl	80005b0 <__aeabi_dmul>
 8007906:	465c      	mov	r4, fp
 8007908:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800790c:	f109 38ff 	add.w	r8, r9, #4294967295
 8007910:	3701      	adds	r7, #1
 8007912:	4638      	mov	r0, r7
 8007914:	f7f8 fde2 	bl	80004dc <__aeabi_i2d>
 8007918:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800791c:	f7f8 fe48 	bl	80005b0 <__aeabi_dmul>
 8007920:	2200      	movs	r2, #0
 8007922:	4b62      	ldr	r3, [pc, #392]	; (8007aac <_dtoa_r+0x5b4>)
 8007924:	f7f8 fc8e 	bl	8000244 <__adddf3>
 8007928:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800792c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007930:	9611      	str	r6, [sp, #68]	; 0x44
 8007932:	2c00      	cmp	r4, #0
 8007934:	d15d      	bne.n	80079f2 <_dtoa_r+0x4fa>
 8007936:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800793a:	2200      	movs	r2, #0
 800793c:	4b5c      	ldr	r3, [pc, #368]	; (8007ab0 <_dtoa_r+0x5b8>)
 800793e:	f7f8 fc7f 	bl	8000240 <__aeabi_dsub>
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800794a:	4633      	mov	r3, r6
 800794c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800794e:	f7f9 f8bf 	bl	8000ad0 <__aeabi_dcmpgt>
 8007952:	2800      	cmp	r0, #0
 8007954:	f040 829e 	bne.w	8007e94 <_dtoa_r+0x99c>
 8007958:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800795c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800795e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007962:	f7f9 f897 	bl	8000a94 <__aeabi_dcmplt>
 8007966:	2800      	cmp	r0, #0
 8007968:	f040 8292 	bne.w	8007e90 <_dtoa_r+0x998>
 800796c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007970:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007976:	2b00      	cmp	r3, #0
 8007978:	f2c0 8153 	blt.w	8007c22 <_dtoa_r+0x72a>
 800797c:	f1b9 0f0e 	cmp.w	r9, #14
 8007980:	f300 814f 	bgt.w	8007c22 <_dtoa_r+0x72a>
 8007984:	4b45      	ldr	r3, [pc, #276]	; (8007a9c <_dtoa_r+0x5a4>)
 8007986:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800798a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800798e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007992:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007994:	2b00      	cmp	r3, #0
 8007996:	f280 80db 	bge.w	8007b50 <_dtoa_r+0x658>
 800799a:	9b02      	ldr	r3, [sp, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	f300 80d7 	bgt.w	8007b50 <_dtoa_r+0x658>
 80079a2:	f040 8274 	bne.w	8007e8e <_dtoa_r+0x996>
 80079a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079aa:	2200      	movs	r2, #0
 80079ac:	4b40      	ldr	r3, [pc, #256]	; (8007ab0 <_dtoa_r+0x5b8>)
 80079ae:	f7f8 fdff 	bl	80005b0 <__aeabi_dmul>
 80079b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079b6:	f7f9 f881 	bl	8000abc <__aeabi_dcmpge>
 80079ba:	9c02      	ldr	r4, [sp, #8]
 80079bc:	4626      	mov	r6, r4
 80079be:	2800      	cmp	r0, #0
 80079c0:	f040 824a 	bne.w	8007e58 <_dtoa_r+0x960>
 80079c4:	2331      	movs	r3, #49	; 0x31
 80079c6:	9f08      	ldr	r7, [sp, #32]
 80079c8:	f109 0901 	add.w	r9, r9, #1
 80079cc:	f807 3b01 	strb.w	r3, [r7], #1
 80079d0:	e246      	b.n	8007e60 <_dtoa_r+0x968>
 80079d2:	07e2      	lsls	r2, r4, #31
 80079d4:	d505      	bpl.n	80079e2 <_dtoa_r+0x4ea>
 80079d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079da:	f7f8 fde9 	bl	80005b0 <__aeabi_dmul>
 80079de:	2301      	movs	r3, #1
 80079e0:	3701      	adds	r7, #1
 80079e2:	1064      	asrs	r4, r4, #1
 80079e4:	3608      	adds	r6, #8
 80079e6:	e76d      	b.n	80078c4 <_dtoa_r+0x3cc>
 80079e8:	2702      	movs	r7, #2
 80079ea:	e770      	b.n	80078ce <_dtoa_r+0x3d6>
 80079ec:	46c8      	mov	r8, r9
 80079ee:	9c02      	ldr	r4, [sp, #8]
 80079f0:	e78f      	b.n	8007912 <_dtoa_r+0x41a>
 80079f2:	9908      	ldr	r1, [sp, #32]
 80079f4:	4b29      	ldr	r3, [pc, #164]	; (8007a9c <_dtoa_r+0x5a4>)
 80079f6:	4421      	add	r1, r4
 80079f8:	9112      	str	r1, [sp, #72]	; 0x48
 80079fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a00:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007a04:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a08:	2900      	cmp	r1, #0
 8007a0a:	d055      	beq.n	8007ab8 <_dtoa_r+0x5c0>
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	4929      	ldr	r1, [pc, #164]	; (8007ab4 <_dtoa_r+0x5bc>)
 8007a10:	f7f8 fef8 	bl	8000804 <__aeabi_ddiv>
 8007a14:	463b      	mov	r3, r7
 8007a16:	4632      	mov	r2, r6
 8007a18:	f7f8 fc12 	bl	8000240 <__aeabi_dsub>
 8007a1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a20:	9f08      	ldr	r7, [sp, #32]
 8007a22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a26:	f7f9 f873 	bl	8000b10 <__aeabi_d2iz>
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	f7f8 fd56 	bl	80004dc <__aeabi_i2d>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a38:	f7f8 fc02 	bl	8000240 <__aeabi_dsub>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	3430      	adds	r4, #48	; 0x30
 8007a42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a4a:	f807 4b01 	strb.w	r4, [r7], #1
 8007a4e:	f7f9 f821 	bl	8000a94 <__aeabi_dcmplt>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d174      	bne.n	8007b40 <_dtoa_r+0x648>
 8007a56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	4911      	ldr	r1, [pc, #68]	; (8007aa4 <_dtoa_r+0x5ac>)
 8007a5e:	f7f8 fbef 	bl	8000240 <__aeabi_dsub>
 8007a62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a66:	f7f9 f815 	bl	8000a94 <__aeabi_dcmplt>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	f040 80b6 	bne.w	8007bdc <_dtoa_r+0x6e4>
 8007a70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a72:	429f      	cmp	r7, r3
 8007a74:	f43f af7a 	beq.w	800796c <_dtoa_r+0x474>
 8007a78:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <_dtoa_r+0x5b0>)
 8007a80:	f7f8 fd96 	bl	80005b0 <__aeabi_dmul>
 8007a84:	2200      	movs	r2, #0
 8007a86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a8e:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <_dtoa_r+0x5b0>)
 8007a90:	f7f8 fd8e 	bl	80005b0 <__aeabi_dmul>
 8007a94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a98:	e7c3      	b.n	8007a22 <_dtoa_r+0x52a>
 8007a9a:	bf00      	nop
 8007a9c:	0800aed0 	.word	0x0800aed0
 8007aa0:	0800aea8 	.word	0x0800aea8
 8007aa4:	3ff00000 	.word	0x3ff00000
 8007aa8:	40240000 	.word	0x40240000
 8007aac:	401c0000 	.word	0x401c0000
 8007ab0:	40140000 	.word	0x40140000
 8007ab4:	3fe00000 	.word	0x3fe00000
 8007ab8:	4630      	mov	r0, r6
 8007aba:	4639      	mov	r1, r7
 8007abc:	f7f8 fd78 	bl	80005b0 <__aeabi_dmul>
 8007ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ac2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ac6:	9c08      	ldr	r4, [sp, #32]
 8007ac8:	9314      	str	r3, [sp, #80]	; 0x50
 8007aca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ace:	f7f9 f81f 	bl	8000b10 <__aeabi_d2iz>
 8007ad2:	9015      	str	r0, [sp, #84]	; 0x54
 8007ad4:	f7f8 fd02 	bl	80004dc <__aeabi_i2d>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ae0:	f7f8 fbae 	bl	8000240 <__aeabi_dsub>
 8007ae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	3330      	adds	r3, #48	; 0x30
 8007aea:	f804 3b01 	strb.w	r3, [r4], #1
 8007aee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007af0:	460f      	mov	r7, r1
 8007af2:	429c      	cmp	r4, r3
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	d124      	bne.n	8007b44 <_dtoa_r+0x64c>
 8007afa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007afe:	4bb3      	ldr	r3, [pc, #716]	; (8007dcc <_dtoa_r+0x8d4>)
 8007b00:	f7f8 fba0 	bl	8000244 <__adddf3>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4630      	mov	r0, r6
 8007b0a:	4639      	mov	r1, r7
 8007b0c:	f7f8 ffe0 	bl	8000ad0 <__aeabi_dcmpgt>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d162      	bne.n	8007bda <_dtoa_r+0x6e2>
 8007b14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b18:	2000      	movs	r0, #0
 8007b1a:	49ac      	ldr	r1, [pc, #688]	; (8007dcc <_dtoa_r+0x8d4>)
 8007b1c:	f7f8 fb90 	bl	8000240 <__aeabi_dsub>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4630      	mov	r0, r6
 8007b26:	4639      	mov	r1, r7
 8007b28:	f7f8 ffb4 	bl	8000a94 <__aeabi_dcmplt>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	f43f af1d 	beq.w	800796c <_dtoa_r+0x474>
 8007b32:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007b34:	1e7b      	subs	r3, r7, #1
 8007b36:	9314      	str	r3, [sp, #80]	; 0x50
 8007b38:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007b3c:	2b30      	cmp	r3, #48	; 0x30
 8007b3e:	d0f8      	beq.n	8007b32 <_dtoa_r+0x63a>
 8007b40:	46c1      	mov	r9, r8
 8007b42:	e03a      	b.n	8007bba <_dtoa_r+0x6c2>
 8007b44:	4ba2      	ldr	r3, [pc, #648]	; (8007dd0 <_dtoa_r+0x8d8>)
 8007b46:	f7f8 fd33 	bl	80005b0 <__aeabi_dmul>
 8007b4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b4e:	e7bc      	b.n	8007aca <_dtoa_r+0x5d2>
 8007b50:	9f08      	ldr	r7, [sp, #32]
 8007b52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b5a:	f7f8 fe53 	bl	8000804 <__aeabi_ddiv>
 8007b5e:	f7f8 ffd7 	bl	8000b10 <__aeabi_d2iz>
 8007b62:	4604      	mov	r4, r0
 8007b64:	f7f8 fcba 	bl	80004dc <__aeabi_i2d>
 8007b68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b6c:	f7f8 fd20 	bl	80005b0 <__aeabi_dmul>
 8007b70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007b74:	460b      	mov	r3, r1
 8007b76:	4602      	mov	r2, r0
 8007b78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b7c:	f7f8 fb60 	bl	8000240 <__aeabi_dsub>
 8007b80:	f807 6b01 	strb.w	r6, [r7], #1
 8007b84:	9e08      	ldr	r6, [sp, #32]
 8007b86:	9b02      	ldr	r3, [sp, #8]
 8007b88:	1bbe      	subs	r6, r7, r6
 8007b8a:	42b3      	cmp	r3, r6
 8007b8c:	d13a      	bne.n	8007c04 <_dtoa_r+0x70c>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	f7f8 fb57 	bl	8000244 <__adddf3>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ba2:	f7f8 ff95 	bl	8000ad0 <__aeabi_dcmpgt>
 8007ba6:	bb58      	cbnz	r0, 8007c00 <_dtoa_r+0x708>
 8007ba8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bb0:	f7f8 ff66 	bl	8000a80 <__aeabi_dcmpeq>
 8007bb4:	b108      	cbz	r0, 8007bba <_dtoa_r+0x6c2>
 8007bb6:	07e1      	lsls	r1, r4, #31
 8007bb8:	d422      	bmi.n	8007c00 <_dtoa_r+0x708>
 8007bba:	4628      	mov	r0, r5
 8007bbc:	4651      	mov	r1, sl
 8007bbe:	f000 fe7b 	bl	80088b8 <_Bfree>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	703b      	strb	r3, [r7, #0]
 8007bc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007bc8:	f109 0001 	add.w	r0, r9, #1
 8007bcc:	6018      	str	r0, [r3, #0]
 8007bce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f43f acdf 	beq.w	8007594 <_dtoa_r+0x9c>
 8007bd6:	601f      	str	r7, [r3, #0]
 8007bd8:	e4dc      	b.n	8007594 <_dtoa_r+0x9c>
 8007bda:	4627      	mov	r7, r4
 8007bdc:	463b      	mov	r3, r7
 8007bde:	461f      	mov	r7, r3
 8007be0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007be4:	2a39      	cmp	r2, #57	; 0x39
 8007be6:	d107      	bne.n	8007bf8 <_dtoa_r+0x700>
 8007be8:	9a08      	ldr	r2, [sp, #32]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d1f7      	bne.n	8007bde <_dtoa_r+0x6e6>
 8007bee:	2230      	movs	r2, #48	; 0x30
 8007bf0:	9908      	ldr	r1, [sp, #32]
 8007bf2:	f108 0801 	add.w	r8, r8, #1
 8007bf6:	700a      	strb	r2, [r1, #0]
 8007bf8:	781a      	ldrb	r2, [r3, #0]
 8007bfa:	3201      	adds	r2, #1
 8007bfc:	701a      	strb	r2, [r3, #0]
 8007bfe:	e79f      	b.n	8007b40 <_dtoa_r+0x648>
 8007c00:	46c8      	mov	r8, r9
 8007c02:	e7eb      	b.n	8007bdc <_dtoa_r+0x6e4>
 8007c04:	2200      	movs	r2, #0
 8007c06:	4b72      	ldr	r3, [pc, #456]	; (8007dd0 <_dtoa_r+0x8d8>)
 8007c08:	f7f8 fcd2 	bl	80005b0 <__aeabi_dmul>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c14:	2200      	movs	r2, #0
 8007c16:	2300      	movs	r3, #0
 8007c18:	f7f8 ff32 	bl	8000a80 <__aeabi_dcmpeq>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d098      	beq.n	8007b52 <_dtoa_r+0x65a>
 8007c20:	e7cb      	b.n	8007bba <_dtoa_r+0x6c2>
 8007c22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c24:	2a00      	cmp	r2, #0
 8007c26:	f000 80cd 	beq.w	8007dc4 <_dtoa_r+0x8cc>
 8007c2a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007c2c:	2a01      	cmp	r2, #1
 8007c2e:	f300 80af 	bgt.w	8007d90 <_dtoa_r+0x898>
 8007c32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c34:	2a00      	cmp	r2, #0
 8007c36:	f000 80a7 	beq.w	8007d88 <_dtoa_r+0x890>
 8007c3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c40:	9f06      	ldr	r7, [sp, #24]
 8007c42:	9a06      	ldr	r2, [sp, #24]
 8007c44:	2101      	movs	r1, #1
 8007c46:	441a      	add	r2, r3
 8007c48:	9206      	str	r2, [sp, #24]
 8007c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	441a      	add	r2, r3
 8007c50:	9209      	str	r2, [sp, #36]	; 0x24
 8007c52:	f000 ff35 	bl	8008ac0 <__i2b>
 8007c56:	4606      	mov	r6, r0
 8007c58:	2f00      	cmp	r7, #0
 8007c5a:	dd0c      	ble.n	8007c76 <_dtoa_r+0x77e>
 8007c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	dd09      	ble.n	8007c76 <_dtoa_r+0x77e>
 8007c62:	42bb      	cmp	r3, r7
 8007c64:	bfa8      	it	ge
 8007c66:	463b      	movge	r3, r7
 8007c68:	9a06      	ldr	r2, [sp, #24]
 8007c6a:	1aff      	subs	r7, r7, r3
 8007c6c:	1ad2      	subs	r2, r2, r3
 8007c6e:	9206      	str	r2, [sp, #24]
 8007c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	9309      	str	r3, [sp, #36]	; 0x24
 8007c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c78:	b1f3      	cbz	r3, 8007cb8 <_dtoa_r+0x7c0>
 8007c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80a9 	beq.w	8007dd4 <_dtoa_r+0x8dc>
 8007c82:	2c00      	cmp	r4, #0
 8007c84:	dd10      	ble.n	8007ca8 <_dtoa_r+0x7b0>
 8007c86:	4631      	mov	r1, r6
 8007c88:	4622      	mov	r2, r4
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f000 ffd2 	bl	8008c34 <__pow5mult>
 8007c90:	4652      	mov	r2, sl
 8007c92:	4601      	mov	r1, r0
 8007c94:	4606      	mov	r6, r0
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 ff28 	bl	8008aec <__multiply>
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	4651      	mov	r1, sl
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f000 fe09 	bl	80088b8 <_Bfree>
 8007ca6:	46c2      	mov	sl, r8
 8007ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007caa:	1b1a      	subs	r2, r3, r4
 8007cac:	d004      	beq.n	8007cb8 <_dtoa_r+0x7c0>
 8007cae:	4651      	mov	r1, sl
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	f000 ffbf 	bl	8008c34 <__pow5mult>
 8007cb6:	4682      	mov	sl, r0
 8007cb8:	2101      	movs	r1, #1
 8007cba:	4628      	mov	r0, r5
 8007cbc:	f000 ff00 	bl	8008ac0 <__i2b>
 8007cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f340 8087 	ble.w	8007dd8 <_dtoa_r+0x8e0>
 8007cca:	461a      	mov	r2, r3
 8007ccc:	4601      	mov	r1, r0
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f000 ffb0 	bl	8008c34 <__pow5mult>
 8007cd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	f340 8080 	ble.w	8007dde <_dtoa_r+0x8e6>
 8007cde:	f04f 0800 	mov.w	r8, #0
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ce8:	6918      	ldr	r0, [r3, #16]
 8007cea:	f000 fe9b 	bl	8008a24 <__hi0bits>
 8007cee:	f1c0 0020 	rsb	r0, r0, #32
 8007cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf4:	4418      	add	r0, r3
 8007cf6:	f010 001f 	ands.w	r0, r0, #31
 8007cfa:	f000 8092 	beq.w	8007e22 <_dtoa_r+0x92a>
 8007cfe:	f1c0 0320 	rsb	r3, r0, #32
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	f340 808a 	ble.w	8007e1c <_dtoa_r+0x924>
 8007d08:	f1c0 001c 	rsb	r0, r0, #28
 8007d0c:	9b06      	ldr	r3, [sp, #24]
 8007d0e:	4407      	add	r7, r0
 8007d10:	4403      	add	r3, r0
 8007d12:	9306      	str	r3, [sp, #24]
 8007d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d16:	4403      	add	r3, r0
 8007d18:	9309      	str	r3, [sp, #36]	; 0x24
 8007d1a:	9b06      	ldr	r3, [sp, #24]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	dd05      	ble.n	8007d2c <_dtoa_r+0x834>
 8007d20:	4651      	mov	r1, sl
 8007d22:	461a      	mov	r2, r3
 8007d24:	4628      	mov	r0, r5
 8007d26:	f000 ffdf 	bl	8008ce8 <__lshift>
 8007d2a:	4682      	mov	sl, r0
 8007d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	dd05      	ble.n	8007d3e <_dtoa_r+0x846>
 8007d32:	4621      	mov	r1, r4
 8007d34:	461a      	mov	r2, r3
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 ffd6 	bl	8008ce8 <__lshift>
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d070      	beq.n	8007e26 <_dtoa_r+0x92e>
 8007d44:	4621      	mov	r1, r4
 8007d46:	4650      	mov	r0, sl
 8007d48:	f001 f83a 	bl	8008dc0 <__mcmp>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	da6a      	bge.n	8007e26 <_dtoa_r+0x92e>
 8007d50:	2300      	movs	r3, #0
 8007d52:	4651      	mov	r1, sl
 8007d54:	220a      	movs	r2, #10
 8007d56:	4628      	mov	r0, r5
 8007d58:	f000 fdd0 	bl	80088fc <__multadd>
 8007d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d5e:	4682      	mov	sl, r0
 8007d60:	f109 39ff 	add.w	r9, r9, #4294967295
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8193 	beq.w	8008090 <_dtoa_r+0xb98>
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	220a      	movs	r2, #10
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 fdc3 	bl	80088fc <__multadd>
 8007d76:	f1bb 0f00 	cmp.w	fp, #0
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	f300 8093 	bgt.w	8007ea6 <_dtoa_r+0x9ae>
 8007d80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	dc57      	bgt.n	8007e36 <_dtoa_r+0x93e>
 8007d86:	e08e      	b.n	8007ea6 <_dtoa_r+0x9ae>
 8007d88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d8a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d8e:	e756      	b.n	8007c3e <_dtoa_r+0x746>
 8007d90:	9b02      	ldr	r3, [sp, #8]
 8007d92:	1e5c      	subs	r4, r3, #1
 8007d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d96:	42a3      	cmp	r3, r4
 8007d98:	bfb7      	itett	lt
 8007d9a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d9c:	1b1c      	subge	r4, r3, r4
 8007d9e:	1ae2      	sublt	r2, r4, r3
 8007da0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007da2:	bfbe      	ittt	lt
 8007da4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007da6:	189b      	addlt	r3, r3, r2
 8007da8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007daa:	9b02      	ldr	r3, [sp, #8]
 8007dac:	bfb8      	it	lt
 8007dae:	2400      	movlt	r4, #0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bfbb      	ittet	lt
 8007db4:	9b06      	ldrlt	r3, [sp, #24]
 8007db6:	9a02      	ldrlt	r2, [sp, #8]
 8007db8:	9f06      	ldrge	r7, [sp, #24]
 8007dba:	1a9f      	sublt	r7, r3, r2
 8007dbc:	bfac      	ite	ge
 8007dbe:	9b02      	ldrge	r3, [sp, #8]
 8007dc0:	2300      	movlt	r3, #0
 8007dc2:	e73e      	b.n	8007c42 <_dtoa_r+0x74a>
 8007dc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007dc6:	9f06      	ldr	r7, [sp, #24]
 8007dc8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007dca:	e745      	b.n	8007c58 <_dtoa_r+0x760>
 8007dcc:	3fe00000 	.word	0x3fe00000
 8007dd0:	40240000 	.word	0x40240000
 8007dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dd6:	e76a      	b.n	8007cae <_dtoa_r+0x7b6>
 8007dd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	dc19      	bgt.n	8007e12 <_dtoa_r+0x91a>
 8007dde:	9b04      	ldr	r3, [sp, #16]
 8007de0:	b9bb      	cbnz	r3, 8007e12 <_dtoa_r+0x91a>
 8007de2:	9b05      	ldr	r3, [sp, #20]
 8007de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007de8:	b99b      	cbnz	r3, 8007e12 <_dtoa_r+0x91a>
 8007dea:	9b05      	ldr	r3, [sp, #20]
 8007dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007df0:	0d1b      	lsrs	r3, r3, #20
 8007df2:	051b      	lsls	r3, r3, #20
 8007df4:	b183      	cbz	r3, 8007e18 <_dtoa_r+0x920>
 8007df6:	f04f 0801 	mov.w	r8, #1
 8007dfa:	9b06      	ldr	r3, [sp, #24]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	9306      	str	r3, [sp, #24]
 8007e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e02:	3301      	adds	r3, #1
 8007e04:	9309      	str	r3, [sp, #36]	; 0x24
 8007e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f47f af6a 	bne.w	8007ce2 <_dtoa_r+0x7ea>
 8007e0e:	2001      	movs	r0, #1
 8007e10:	e76f      	b.n	8007cf2 <_dtoa_r+0x7fa>
 8007e12:	f04f 0800 	mov.w	r8, #0
 8007e16:	e7f6      	b.n	8007e06 <_dtoa_r+0x90e>
 8007e18:	4698      	mov	r8, r3
 8007e1a:	e7f4      	b.n	8007e06 <_dtoa_r+0x90e>
 8007e1c:	f43f af7d 	beq.w	8007d1a <_dtoa_r+0x822>
 8007e20:	4618      	mov	r0, r3
 8007e22:	301c      	adds	r0, #28
 8007e24:	e772      	b.n	8007d0c <_dtoa_r+0x814>
 8007e26:	9b02      	ldr	r3, [sp, #8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	dc36      	bgt.n	8007e9a <_dtoa_r+0x9a2>
 8007e2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	dd33      	ble.n	8007e9a <_dtoa_r+0x9a2>
 8007e32:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007e36:	f1bb 0f00 	cmp.w	fp, #0
 8007e3a:	d10d      	bne.n	8007e58 <_dtoa_r+0x960>
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	465b      	mov	r3, fp
 8007e40:	2205      	movs	r2, #5
 8007e42:	4628      	mov	r0, r5
 8007e44:	f000 fd5a 	bl	80088fc <__multadd>
 8007e48:	4601      	mov	r1, r0
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4650      	mov	r0, sl
 8007e4e:	f000 ffb7 	bl	8008dc0 <__mcmp>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	f73f adb6 	bgt.w	80079c4 <_dtoa_r+0x4cc>
 8007e58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e5a:	9f08      	ldr	r7, [sp, #32]
 8007e5c:	ea6f 0903 	mvn.w	r9, r3
 8007e60:	f04f 0800 	mov.w	r8, #0
 8007e64:	4621      	mov	r1, r4
 8007e66:	4628      	mov	r0, r5
 8007e68:	f000 fd26 	bl	80088b8 <_Bfree>
 8007e6c:	2e00      	cmp	r6, #0
 8007e6e:	f43f aea4 	beq.w	8007bba <_dtoa_r+0x6c2>
 8007e72:	f1b8 0f00 	cmp.w	r8, #0
 8007e76:	d005      	beq.n	8007e84 <_dtoa_r+0x98c>
 8007e78:	45b0      	cmp	r8, r6
 8007e7a:	d003      	beq.n	8007e84 <_dtoa_r+0x98c>
 8007e7c:	4641      	mov	r1, r8
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f000 fd1a 	bl	80088b8 <_Bfree>
 8007e84:	4631      	mov	r1, r6
 8007e86:	4628      	mov	r0, r5
 8007e88:	f000 fd16 	bl	80088b8 <_Bfree>
 8007e8c:	e695      	b.n	8007bba <_dtoa_r+0x6c2>
 8007e8e:	2400      	movs	r4, #0
 8007e90:	4626      	mov	r6, r4
 8007e92:	e7e1      	b.n	8007e58 <_dtoa_r+0x960>
 8007e94:	46c1      	mov	r9, r8
 8007e96:	4626      	mov	r6, r4
 8007e98:	e594      	b.n	80079c4 <_dtoa_r+0x4cc>
 8007e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e9c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 80fc 	beq.w	800809e <_dtoa_r+0xba6>
 8007ea6:	2f00      	cmp	r7, #0
 8007ea8:	dd05      	ble.n	8007eb6 <_dtoa_r+0x9be>
 8007eaa:	4631      	mov	r1, r6
 8007eac:	463a      	mov	r2, r7
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f000 ff1a 	bl	8008ce8 <__lshift>
 8007eb4:	4606      	mov	r6, r0
 8007eb6:	f1b8 0f00 	cmp.w	r8, #0
 8007eba:	d05c      	beq.n	8007f76 <_dtoa_r+0xa7e>
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	6871      	ldr	r1, [r6, #4]
 8007ec0:	f000 fcba 	bl	8008838 <_Balloc>
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	b928      	cbnz	r0, 8007ed4 <_dtoa_r+0x9dc>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ece:	4b7e      	ldr	r3, [pc, #504]	; (80080c8 <_dtoa_r+0xbd0>)
 8007ed0:	f7ff bb26 	b.w	8007520 <_dtoa_r+0x28>
 8007ed4:	6932      	ldr	r2, [r6, #16]
 8007ed6:	f106 010c 	add.w	r1, r6, #12
 8007eda:	3202      	adds	r2, #2
 8007edc:	0092      	lsls	r2, r2, #2
 8007ede:	300c      	adds	r0, #12
 8007ee0:	f000 fc9c 	bl	800881c <memcpy>
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f000 fefd 	bl	8008ce8 <__lshift>
 8007eee:	46b0      	mov	r8, r6
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	9b08      	ldr	r3, [sp, #32]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	9302      	str	r3, [sp, #8]
 8007ef8:	9b08      	ldr	r3, [sp, #32]
 8007efa:	445b      	add	r3, fp
 8007efc:	930a      	str	r3, [sp, #40]	; 0x28
 8007efe:	9b04      	ldr	r3, [sp, #16]
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	9309      	str	r3, [sp, #36]	; 0x24
 8007f06:	9b02      	ldr	r3, [sp, #8]
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4650      	mov	r0, sl
 8007f0c:	f103 3bff 	add.w	fp, r3, #4294967295
 8007f10:	f7ff fa62 	bl	80073d8 <quorem>
 8007f14:	4603      	mov	r3, r0
 8007f16:	4641      	mov	r1, r8
 8007f18:	3330      	adds	r3, #48	; 0x30
 8007f1a:	9004      	str	r0, [sp, #16]
 8007f1c:	4650      	mov	r0, sl
 8007f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f20:	f000 ff4e 	bl	8008dc0 <__mcmp>
 8007f24:	4632      	mov	r2, r6
 8007f26:	9006      	str	r0, [sp, #24]
 8007f28:	4621      	mov	r1, r4
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f000 ff64 	bl	8008df8 <__mdiff>
 8007f30:	68c2      	ldr	r2, [r0, #12]
 8007f32:	4607      	mov	r7, r0
 8007f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f36:	bb02      	cbnz	r2, 8007f7a <_dtoa_r+0xa82>
 8007f38:	4601      	mov	r1, r0
 8007f3a:	4650      	mov	r0, sl
 8007f3c:	f000 ff40 	bl	8008dc0 <__mcmp>
 8007f40:	4602      	mov	r2, r0
 8007f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f44:	4639      	mov	r1, r7
 8007f46:	4628      	mov	r0, r5
 8007f48:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007f4c:	f000 fcb4 	bl	80088b8 <_Bfree>
 8007f50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f54:	9f02      	ldr	r7, [sp, #8]
 8007f56:	ea43 0102 	orr.w	r1, r3, r2
 8007f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f60:	d10d      	bne.n	8007f7e <_dtoa_r+0xa86>
 8007f62:	2b39      	cmp	r3, #57	; 0x39
 8007f64:	d027      	beq.n	8007fb6 <_dtoa_r+0xabe>
 8007f66:	9a06      	ldr	r2, [sp, #24]
 8007f68:	2a00      	cmp	r2, #0
 8007f6a:	dd01      	ble.n	8007f70 <_dtoa_r+0xa78>
 8007f6c:	9b04      	ldr	r3, [sp, #16]
 8007f6e:	3331      	adds	r3, #49	; 0x31
 8007f70:	f88b 3000 	strb.w	r3, [fp]
 8007f74:	e776      	b.n	8007e64 <_dtoa_r+0x96c>
 8007f76:	4630      	mov	r0, r6
 8007f78:	e7b9      	b.n	8007eee <_dtoa_r+0x9f6>
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	e7e2      	b.n	8007f44 <_dtoa_r+0xa4c>
 8007f7e:	9906      	ldr	r1, [sp, #24]
 8007f80:	2900      	cmp	r1, #0
 8007f82:	db04      	blt.n	8007f8e <_dtoa_r+0xa96>
 8007f84:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007f86:	4301      	orrs	r1, r0
 8007f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f8a:	4301      	orrs	r1, r0
 8007f8c:	d120      	bne.n	8007fd0 <_dtoa_r+0xad8>
 8007f8e:	2a00      	cmp	r2, #0
 8007f90:	ddee      	ble.n	8007f70 <_dtoa_r+0xa78>
 8007f92:	4651      	mov	r1, sl
 8007f94:	2201      	movs	r2, #1
 8007f96:	4628      	mov	r0, r5
 8007f98:	9302      	str	r3, [sp, #8]
 8007f9a:	f000 fea5 	bl	8008ce8 <__lshift>
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	4682      	mov	sl, r0
 8007fa2:	f000 ff0d 	bl	8008dc0 <__mcmp>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	9b02      	ldr	r3, [sp, #8]
 8007faa:	dc02      	bgt.n	8007fb2 <_dtoa_r+0xaba>
 8007fac:	d1e0      	bne.n	8007f70 <_dtoa_r+0xa78>
 8007fae:	07da      	lsls	r2, r3, #31
 8007fb0:	d5de      	bpl.n	8007f70 <_dtoa_r+0xa78>
 8007fb2:	2b39      	cmp	r3, #57	; 0x39
 8007fb4:	d1da      	bne.n	8007f6c <_dtoa_r+0xa74>
 8007fb6:	2339      	movs	r3, #57	; 0x39
 8007fb8:	f88b 3000 	strb.w	r3, [fp]
 8007fbc:	463b      	mov	r3, r7
 8007fbe:	461f      	mov	r7, r3
 8007fc0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	2a39      	cmp	r2, #57	; 0x39
 8007fc8:	d050      	beq.n	800806c <_dtoa_r+0xb74>
 8007fca:	3201      	adds	r2, #1
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	e749      	b.n	8007e64 <_dtoa_r+0x96c>
 8007fd0:	2a00      	cmp	r2, #0
 8007fd2:	dd03      	ble.n	8007fdc <_dtoa_r+0xae4>
 8007fd4:	2b39      	cmp	r3, #57	; 0x39
 8007fd6:	d0ee      	beq.n	8007fb6 <_dtoa_r+0xabe>
 8007fd8:	3301      	adds	r3, #1
 8007fda:	e7c9      	b.n	8007f70 <_dtoa_r+0xa78>
 8007fdc:	9a02      	ldr	r2, [sp, #8]
 8007fde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007fe0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007fe4:	428a      	cmp	r2, r1
 8007fe6:	d02a      	beq.n	800803e <_dtoa_r+0xb46>
 8007fe8:	4651      	mov	r1, sl
 8007fea:	2300      	movs	r3, #0
 8007fec:	220a      	movs	r2, #10
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f000 fc84 	bl	80088fc <__multadd>
 8007ff4:	45b0      	cmp	r8, r6
 8007ff6:	4682      	mov	sl, r0
 8007ff8:	f04f 0300 	mov.w	r3, #0
 8007ffc:	f04f 020a 	mov.w	r2, #10
 8008000:	4641      	mov	r1, r8
 8008002:	4628      	mov	r0, r5
 8008004:	d107      	bne.n	8008016 <_dtoa_r+0xb1e>
 8008006:	f000 fc79 	bl	80088fc <__multadd>
 800800a:	4680      	mov	r8, r0
 800800c:	4606      	mov	r6, r0
 800800e:	9b02      	ldr	r3, [sp, #8]
 8008010:	3301      	adds	r3, #1
 8008012:	9302      	str	r3, [sp, #8]
 8008014:	e777      	b.n	8007f06 <_dtoa_r+0xa0e>
 8008016:	f000 fc71 	bl	80088fc <__multadd>
 800801a:	4631      	mov	r1, r6
 800801c:	4680      	mov	r8, r0
 800801e:	2300      	movs	r3, #0
 8008020:	220a      	movs	r2, #10
 8008022:	4628      	mov	r0, r5
 8008024:	f000 fc6a 	bl	80088fc <__multadd>
 8008028:	4606      	mov	r6, r0
 800802a:	e7f0      	b.n	800800e <_dtoa_r+0xb16>
 800802c:	f1bb 0f00 	cmp.w	fp, #0
 8008030:	bfcc      	ite	gt
 8008032:	465f      	movgt	r7, fp
 8008034:	2701      	movle	r7, #1
 8008036:	f04f 0800 	mov.w	r8, #0
 800803a:	9a08      	ldr	r2, [sp, #32]
 800803c:	4417      	add	r7, r2
 800803e:	4651      	mov	r1, sl
 8008040:	2201      	movs	r2, #1
 8008042:	4628      	mov	r0, r5
 8008044:	9302      	str	r3, [sp, #8]
 8008046:	f000 fe4f 	bl	8008ce8 <__lshift>
 800804a:	4621      	mov	r1, r4
 800804c:	4682      	mov	sl, r0
 800804e:	f000 feb7 	bl	8008dc0 <__mcmp>
 8008052:	2800      	cmp	r0, #0
 8008054:	dcb2      	bgt.n	8007fbc <_dtoa_r+0xac4>
 8008056:	d102      	bne.n	800805e <_dtoa_r+0xb66>
 8008058:	9b02      	ldr	r3, [sp, #8]
 800805a:	07db      	lsls	r3, r3, #31
 800805c:	d4ae      	bmi.n	8007fbc <_dtoa_r+0xac4>
 800805e:	463b      	mov	r3, r7
 8008060:	461f      	mov	r7, r3
 8008062:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008066:	2a30      	cmp	r2, #48	; 0x30
 8008068:	d0fa      	beq.n	8008060 <_dtoa_r+0xb68>
 800806a:	e6fb      	b.n	8007e64 <_dtoa_r+0x96c>
 800806c:	9a08      	ldr	r2, [sp, #32]
 800806e:	429a      	cmp	r2, r3
 8008070:	d1a5      	bne.n	8007fbe <_dtoa_r+0xac6>
 8008072:	2331      	movs	r3, #49	; 0x31
 8008074:	f109 0901 	add.w	r9, r9, #1
 8008078:	7013      	strb	r3, [r2, #0]
 800807a:	e6f3      	b.n	8007e64 <_dtoa_r+0x96c>
 800807c:	4b13      	ldr	r3, [pc, #76]	; (80080cc <_dtoa_r+0xbd4>)
 800807e:	f7ff baa7 	b.w	80075d0 <_dtoa_r+0xd8>
 8008082:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008084:	2b00      	cmp	r3, #0
 8008086:	f47f aa80 	bne.w	800758a <_dtoa_r+0x92>
 800808a:	4b11      	ldr	r3, [pc, #68]	; (80080d0 <_dtoa_r+0xbd8>)
 800808c:	f7ff baa0 	b.w	80075d0 <_dtoa_r+0xd8>
 8008090:	f1bb 0f00 	cmp.w	fp, #0
 8008094:	dc03      	bgt.n	800809e <_dtoa_r+0xba6>
 8008096:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008098:	2b02      	cmp	r3, #2
 800809a:	f73f aecc 	bgt.w	8007e36 <_dtoa_r+0x93e>
 800809e:	9f08      	ldr	r7, [sp, #32]
 80080a0:	4621      	mov	r1, r4
 80080a2:	4650      	mov	r0, sl
 80080a4:	f7ff f998 	bl	80073d8 <quorem>
 80080a8:	9a08      	ldr	r2, [sp, #32]
 80080aa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80080ae:	f807 3b01 	strb.w	r3, [r7], #1
 80080b2:	1aba      	subs	r2, r7, r2
 80080b4:	4593      	cmp	fp, r2
 80080b6:	ddb9      	ble.n	800802c <_dtoa_r+0xb34>
 80080b8:	4651      	mov	r1, sl
 80080ba:	2300      	movs	r3, #0
 80080bc:	220a      	movs	r2, #10
 80080be:	4628      	mov	r0, r5
 80080c0:	f000 fc1c 	bl	80088fc <__multadd>
 80080c4:	4682      	mov	sl, r0
 80080c6:	e7eb      	b.n	80080a0 <_dtoa_r+0xba8>
 80080c8:	0800adb4 	.word	0x0800adb4
 80080cc:	0800afb9 	.word	0x0800afb9
 80080d0:	0800ad31 	.word	0x0800ad31

080080d4 <rshift>:
 80080d4:	6903      	ldr	r3, [r0, #16]
 80080d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80080de:	f100 0414 	add.w	r4, r0, #20
 80080e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80080e6:	dd46      	ble.n	8008176 <rshift+0xa2>
 80080e8:	f011 011f 	ands.w	r1, r1, #31
 80080ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80080f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80080f4:	d10c      	bne.n	8008110 <rshift+0x3c>
 80080f6:	4629      	mov	r1, r5
 80080f8:	f100 0710 	add.w	r7, r0, #16
 80080fc:	42b1      	cmp	r1, r6
 80080fe:	d335      	bcc.n	800816c <rshift+0x98>
 8008100:	1a9b      	subs	r3, r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	1eea      	subs	r2, r5, #3
 8008106:	4296      	cmp	r6, r2
 8008108:	bf38      	it	cc
 800810a:	2300      	movcc	r3, #0
 800810c:	4423      	add	r3, r4
 800810e:	e015      	b.n	800813c <rshift+0x68>
 8008110:	46a1      	mov	r9, r4
 8008112:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008116:	f1c1 0820 	rsb	r8, r1, #32
 800811a:	40cf      	lsrs	r7, r1
 800811c:	f105 0e04 	add.w	lr, r5, #4
 8008120:	4576      	cmp	r6, lr
 8008122:	46f4      	mov	ip, lr
 8008124:	d816      	bhi.n	8008154 <rshift+0x80>
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	009a      	lsls	r2, r3, #2
 800812a:	3a04      	subs	r2, #4
 800812c:	3501      	adds	r5, #1
 800812e:	42ae      	cmp	r6, r5
 8008130:	bf38      	it	cc
 8008132:	2200      	movcc	r2, #0
 8008134:	18a3      	adds	r3, r4, r2
 8008136:	50a7      	str	r7, [r4, r2]
 8008138:	b107      	cbz	r7, 800813c <rshift+0x68>
 800813a:	3304      	adds	r3, #4
 800813c:	42a3      	cmp	r3, r4
 800813e:	eba3 0204 	sub.w	r2, r3, r4
 8008142:	bf08      	it	eq
 8008144:	2300      	moveq	r3, #0
 8008146:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800814a:	6102      	str	r2, [r0, #16]
 800814c:	bf08      	it	eq
 800814e:	6143      	streq	r3, [r0, #20]
 8008150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008154:	f8dc c000 	ldr.w	ip, [ip]
 8008158:	fa0c fc08 	lsl.w	ip, ip, r8
 800815c:	ea4c 0707 	orr.w	r7, ip, r7
 8008160:	f849 7b04 	str.w	r7, [r9], #4
 8008164:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008168:	40cf      	lsrs	r7, r1
 800816a:	e7d9      	b.n	8008120 <rshift+0x4c>
 800816c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008170:	f847 cf04 	str.w	ip, [r7, #4]!
 8008174:	e7c2      	b.n	80080fc <rshift+0x28>
 8008176:	4623      	mov	r3, r4
 8008178:	e7e0      	b.n	800813c <rshift+0x68>

0800817a <__hexdig_fun>:
 800817a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800817e:	2b09      	cmp	r3, #9
 8008180:	d802      	bhi.n	8008188 <__hexdig_fun+0xe>
 8008182:	3820      	subs	r0, #32
 8008184:	b2c0      	uxtb	r0, r0
 8008186:	4770      	bx	lr
 8008188:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800818c:	2b05      	cmp	r3, #5
 800818e:	d801      	bhi.n	8008194 <__hexdig_fun+0x1a>
 8008190:	3847      	subs	r0, #71	; 0x47
 8008192:	e7f7      	b.n	8008184 <__hexdig_fun+0xa>
 8008194:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008198:	2b05      	cmp	r3, #5
 800819a:	d801      	bhi.n	80081a0 <__hexdig_fun+0x26>
 800819c:	3827      	subs	r0, #39	; 0x27
 800819e:	e7f1      	b.n	8008184 <__hexdig_fun+0xa>
 80081a0:	2000      	movs	r0, #0
 80081a2:	4770      	bx	lr

080081a4 <__gethex>:
 80081a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a8:	b08b      	sub	sp, #44	; 0x2c
 80081aa:	9306      	str	r3, [sp, #24]
 80081ac:	4bb9      	ldr	r3, [pc, #740]	; (8008494 <__gethex+0x2f0>)
 80081ae:	9002      	str	r0, [sp, #8]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	468b      	mov	fp, r1
 80081b4:	4618      	mov	r0, r3
 80081b6:	4690      	mov	r8, r2
 80081b8:	9303      	str	r3, [sp, #12]
 80081ba:	f7f8 f835 	bl	8000228 <strlen>
 80081be:	4682      	mov	sl, r0
 80081c0:	9b03      	ldr	r3, [sp, #12]
 80081c2:	f8db 2000 	ldr.w	r2, [fp]
 80081c6:	4403      	add	r3, r0
 80081c8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80081cc:	9307      	str	r3, [sp, #28]
 80081ce:	1c93      	adds	r3, r2, #2
 80081d0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80081d4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80081d8:	32fe      	adds	r2, #254	; 0xfe
 80081da:	18d1      	adds	r1, r2, r3
 80081dc:	461f      	mov	r7, r3
 80081de:	f813 0b01 	ldrb.w	r0, [r3], #1
 80081e2:	9101      	str	r1, [sp, #4]
 80081e4:	2830      	cmp	r0, #48	; 0x30
 80081e6:	d0f8      	beq.n	80081da <__gethex+0x36>
 80081e8:	f7ff ffc7 	bl	800817a <__hexdig_fun>
 80081ec:	4604      	mov	r4, r0
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d13a      	bne.n	8008268 <__gethex+0xc4>
 80081f2:	4652      	mov	r2, sl
 80081f4:	4638      	mov	r0, r7
 80081f6:	9903      	ldr	r1, [sp, #12]
 80081f8:	f001 fd66 	bl	8009cc8 <strncmp>
 80081fc:	4605      	mov	r5, r0
 80081fe:	2800      	cmp	r0, #0
 8008200:	d166      	bne.n	80082d0 <__gethex+0x12c>
 8008202:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008206:	eb07 060a 	add.w	r6, r7, sl
 800820a:	f7ff ffb6 	bl	800817a <__hexdig_fun>
 800820e:	2800      	cmp	r0, #0
 8008210:	d060      	beq.n	80082d4 <__gethex+0x130>
 8008212:	4633      	mov	r3, r6
 8008214:	7818      	ldrb	r0, [r3, #0]
 8008216:	461f      	mov	r7, r3
 8008218:	2830      	cmp	r0, #48	; 0x30
 800821a:	f103 0301 	add.w	r3, r3, #1
 800821e:	d0f9      	beq.n	8008214 <__gethex+0x70>
 8008220:	f7ff ffab 	bl	800817a <__hexdig_fun>
 8008224:	2301      	movs	r3, #1
 8008226:	fab0 f480 	clz	r4, r0
 800822a:	4635      	mov	r5, r6
 800822c:	0964      	lsrs	r4, r4, #5
 800822e:	9301      	str	r3, [sp, #4]
 8008230:	463a      	mov	r2, r7
 8008232:	4616      	mov	r6, r2
 8008234:	7830      	ldrb	r0, [r6, #0]
 8008236:	3201      	adds	r2, #1
 8008238:	f7ff ff9f 	bl	800817a <__hexdig_fun>
 800823c:	2800      	cmp	r0, #0
 800823e:	d1f8      	bne.n	8008232 <__gethex+0x8e>
 8008240:	4652      	mov	r2, sl
 8008242:	4630      	mov	r0, r6
 8008244:	9903      	ldr	r1, [sp, #12]
 8008246:	f001 fd3f 	bl	8009cc8 <strncmp>
 800824a:	b980      	cbnz	r0, 800826e <__gethex+0xca>
 800824c:	b94d      	cbnz	r5, 8008262 <__gethex+0xbe>
 800824e:	eb06 050a 	add.w	r5, r6, sl
 8008252:	462a      	mov	r2, r5
 8008254:	4616      	mov	r6, r2
 8008256:	7830      	ldrb	r0, [r6, #0]
 8008258:	3201      	adds	r2, #1
 800825a:	f7ff ff8e 	bl	800817a <__hexdig_fun>
 800825e:	2800      	cmp	r0, #0
 8008260:	d1f8      	bne.n	8008254 <__gethex+0xb0>
 8008262:	1bad      	subs	r5, r5, r6
 8008264:	00ad      	lsls	r5, r5, #2
 8008266:	e004      	b.n	8008272 <__gethex+0xce>
 8008268:	2400      	movs	r4, #0
 800826a:	4625      	mov	r5, r4
 800826c:	e7e0      	b.n	8008230 <__gethex+0x8c>
 800826e:	2d00      	cmp	r5, #0
 8008270:	d1f7      	bne.n	8008262 <__gethex+0xbe>
 8008272:	7833      	ldrb	r3, [r6, #0]
 8008274:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008278:	2b50      	cmp	r3, #80	; 0x50
 800827a:	d139      	bne.n	80082f0 <__gethex+0x14c>
 800827c:	7873      	ldrb	r3, [r6, #1]
 800827e:	2b2b      	cmp	r3, #43	; 0x2b
 8008280:	d02a      	beq.n	80082d8 <__gethex+0x134>
 8008282:	2b2d      	cmp	r3, #45	; 0x2d
 8008284:	d02c      	beq.n	80082e0 <__gethex+0x13c>
 8008286:	f04f 0900 	mov.w	r9, #0
 800828a:	1c71      	adds	r1, r6, #1
 800828c:	7808      	ldrb	r0, [r1, #0]
 800828e:	f7ff ff74 	bl	800817a <__hexdig_fun>
 8008292:	1e43      	subs	r3, r0, #1
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b18      	cmp	r3, #24
 8008298:	d82a      	bhi.n	80082f0 <__gethex+0x14c>
 800829a:	f1a0 0210 	sub.w	r2, r0, #16
 800829e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80082a2:	f7ff ff6a 	bl	800817a <__hexdig_fun>
 80082a6:	1e43      	subs	r3, r0, #1
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b18      	cmp	r3, #24
 80082ac:	d91b      	bls.n	80082e6 <__gethex+0x142>
 80082ae:	f1b9 0f00 	cmp.w	r9, #0
 80082b2:	d000      	beq.n	80082b6 <__gethex+0x112>
 80082b4:	4252      	negs	r2, r2
 80082b6:	4415      	add	r5, r2
 80082b8:	f8cb 1000 	str.w	r1, [fp]
 80082bc:	b1d4      	cbz	r4, 80082f4 <__gethex+0x150>
 80082be:	9b01      	ldr	r3, [sp, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	bf14      	ite	ne
 80082c4:	2700      	movne	r7, #0
 80082c6:	2706      	moveq	r7, #6
 80082c8:	4638      	mov	r0, r7
 80082ca:	b00b      	add	sp, #44	; 0x2c
 80082cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d0:	463e      	mov	r6, r7
 80082d2:	4625      	mov	r5, r4
 80082d4:	2401      	movs	r4, #1
 80082d6:	e7cc      	b.n	8008272 <__gethex+0xce>
 80082d8:	f04f 0900 	mov.w	r9, #0
 80082dc:	1cb1      	adds	r1, r6, #2
 80082de:	e7d5      	b.n	800828c <__gethex+0xe8>
 80082e0:	f04f 0901 	mov.w	r9, #1
 80082e4:	e7fa      	b.n	80082dc <__gethex+0x138>
 80082e6:	230a      	movs	r3, #10
 80082e8:	fb03 0202 	mla	r2, r3, r2, r0
 80082ec:	3a10      	subs	r2, #16
 80082ee:	e7d6      	b.n	800829e <__gethex+0xfa>
 80082f0:	4631      	mov	r1, r6
 80082f2:	e7e1      	b.n	80082b8 <__gethex+0x114>
 80082f4:	4621      	mov	r1, r4
 80082f6:	1bf3      	subs	r3, r6, r7
 80082f8:	3b01      	subs	r3, #1
 80082fa:	2b07      	cmp	r3, #7
 80082fc:	dc0a      	bgt.n	8008314 <__gethex+0x170>
 80082fe:	9802      	ldr	r0, [sp, #8]
 8008300:	f000 fa9a 	bl	8008838 <_Balloc>
 8008304:	4604      	mov	r4, r0
 8008306:	b940      	cbnz	r0, 800831a <__gethex+0x176>
 8008308:	4602      	mov	r2, r0
 800830a:	21de      	movs	r1, #222	; 0xde
 800830c:	4b62      	ldr	r3, [pc, #392]	; (8008498 <__gethex+0x2f4>)
 800830e:	4863      	ldr	r0, [pc, #396]	; (800849c <__gethex+0x2f8>)
 8008310:	f001 fdb0 	bl	8009e74 <__assert_func>
 8008314:	3101      	adds	r1, #1
 8008316:	105b      	asrs	r3, r3, #1
 8008318:	e7ef      	b.n	80082fa <__gethex+0x156>
 800831a:	f04f 0b00 	mov.w	fp, #0
 800831e:	f100 0914 	add.w	r9, r0, #20
 8008322:	f1ca 0301 	rsb	r3, sl, #1
 8008326:	f8cd 9010 	str.w	r9, [sp, #16]
 800832a:	f8cd b004 	str.w	fp, [sp, #4]
 800832e:	9308      	str	r3, [sp, #32]
 8008330:	42b7      	cmp	r7, r6
 8008332:	d33f      	bcc.n	80083b4 <__gethex+0x210>
 8008334:	9f04      	ldr	r7, [sp, #16]
 8008336:	9b01      	ldr	r3, [sp, #4]
 8008338:	f847 3b04 	str.w	r3, [r7], #4
 800833c:	eba7 0709 	sub.w	r7, r7, r9
 8008340:	10bf      	asrs	r7, r7, #2
 8008342:	6127      	str	r7, [r4, #16]
 8008344:	4618      	mov	r0, r3
 8008346:	f000 fb6d 	bl	8008a24 <__hi0bits>
 800834a:	017f      	lsls	r7, r7, #5
 800834c:	f8d8 6000 	ldr.w	r6, [r8]
 8008350:	1a3f      	subs	r7, r7, r0
 8008352:	42b7      	cmp	r7, r6
 8008354:	dd62      	ble.n	800841c <__gethex+0x278>
 8008356:	1bbf      	subs	r7, r7, r6
 8008358:	4639      	mov	r1, r7
 800835a:	4620      	mov	r0, r4
 800835c:	f000 ff03 	bl	8009166 <__any_on>
 8008360:	4682      	mov	sl, r0
 8008362:	b1a8      	cbz	r0, 8008390 <__gethex+0x1ec>
 8008364:	f04f 0a01 	mov.w	sl, #1
 8008368:	1e7b      	subs	r3, r7, #1
 800836a:	1159      	asrs	r1, r3, #5
 800836c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008370:	f003 021f 	and.w	r2, r3, #31
 8008374:	fa0a f202 	lsl.w	r2, sl, r2
 8008378:	420a      	tst	r2, r1
 800837a:	d009      	beq.n	8008390 <__gethex+0x1ec>
 800837c:	4553      	cmp	r3, sl
 800837e:	dd05      	ble.n	800838c <__gethex+0x1e8>
 8008380:	4620      	mov	r0, r4
 8008382:	1eb9      	subs	r1, r7, #2
 8008384:	f000 feef 	bl	8009166 <__any_on>
 8008388:	2800      	cmp	r0, #0
 800838a:	d144      	bne.n	8008416 <__gethex+0x272>
 800838c:	f04f 0a02 	mov.w	sl, #2
 8008390:	4639      	mov	r1, r7
 8008392:	4620      	mov	r0, r4
 8008394:	f7ff fe9e 	bl	80080d4 <rshift>
 8008398:	443d      	add	r5, r7
 800839a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800839e:	42ab      	cmp	r3, r5
 80083a0:	da4a      	bge.n	8008438 <__gethex+0x294>
 80083a2:	4621      	mov	r1, r4
 80083a4:	9802      	ldr	r0, [sp, #8]
 80083a6:	f000 fa87 	bl	80088b8 <_Bfree>
 80083aa:	2300      	movs	r3, #0
 80083ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083ae:	27a3      	movs	r7, #163	; 0xa3
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	e789      	b.n	80082c8 <__gethex+0x124>
 80083b4:	1e73      	subs	r3, r6, #1
 80083b6:	9a07      	ldr	r2, [sp, #28]
 80083b8:	9305      	str	r3, [sp, #20]
 80083ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80083be:	4293      	cmp	r3, r2
 80083c0:	d019      	beq.n	80083f6 <__gethex+0x252>
 80083c2:	f1bb 0f20 	cmp.w	fp, #32
 80083c6:	d107      	bne.n	80083d8 <__gethex+0x234>
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	9a01      	ldr	r2, [sp, #4]
 80083cc:	f843 2b04 	str.w	r2, [r3], #4
 80083d0:	9304      	str	r3, [sp, #16]
 80083d2:	2300      	movs	r3, #0
 80083d4:	469b      	mov	fp, r3
 80083d6:	9301      	str	r3, [sp, #4]
 80083d8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80083dc:	f7ff fecd 	bl	800817a <__hexdig_fun>
 80083e0:	9b01      	ldr	r3, [sp, #4]
 80083e2:	f000 000f 	and.w	r0, r0, #15
 80083e6:	fa00 f00b 	lsl.w	r0, r0, fp
 80083ea:	4303      	orrs	r3, r0
 80083ec:	9301      	str	r3, [sp, #4]
 80083ee:	f10b 0b04 	add.w	fp, fp, #4
 80083f2:	9b05      	ldr	r3, [sp, #20]
 80083f4:	e00d      	b.n	8008412 <__gethex+0x26e>
 80083f6:	9b05      	ldr	r3, [sp, #20]
 80083f8:	9a08      	ldr	r2, [sp, #32]
 80083fa:	4413      	add	r3, r2
 80083fc:	42bb      	cmp	r3, r7
 80083fe:	d3e0      	bcc.n	80083c2 <__gethex+0x21e>
 8008400:	4618      	mov	r0, r3
 8008402:	4652      	mov	r2, sl
 8008404:	9903      	ldr	r1, [sp, #12]
 8008406:	9309      	str	r3, [sp, #36]	; 0x24
 8008408:	f001 fc5e 	bl	8009cc8 <strncmp>
 800840c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840e:	2800      	cmp	r0, #0
 8008410:	d1d7      	bne.n	80083c2 <__gethex+0x21e>
 8008412:	461e      	mov	r6, r3
 8008414:	e78c      	b.n	8008330 <__gethex+0x18c>
 8008416:	f04f 0a03 	mov.w	sl, #3
 800841a:	e7b9      	b.n	8008390 <__gethex+0x1ec>
 800841c:	da09      	bge.n	8008432 <__gethex+0x28e>
 800841e:	1bf7      	subs	r7, r6, r7
 8008420:	4621      	mov	r1, r4
 8008422:	463a      	mov	r2, r7
 8008424:	9802      	ldr	r0, [sp, #8]
 8008426:	f000 fc5f 	bl	8008ce8 <__lshift>
 800842a:	4604      	mov	r4, r0
 800842c:	1bed      	subs	r5, r5, r7
 800842e:	f100 0914 	add.w	r9, r0, #20
 8008432:	f04f 0a00 	mov.w	sl, #0
 8008436:	e7b0      	b.n	800839a <__gethex+0x1f6>
 8008438:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800843c:	42a8      	cmp	r0, r5
 800843e:	dd71      	ble.n	8008524 <__gethex+0x380>
 8008440:	1b45      	subs	r5, r0, r5
 8008442:	42ae      	cmp	r6, r5
 8008444:	dc34      	bgt.n	80084b0 <__gethex+0x30c>
 8008446:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800844a:	2b02      	cmp	r3, #2
 800844c:	d028      	beq.n	80084a0 <__gethex+0x2fc>
 800844e:	2b03      	cmp	r3, #3
 8008450:	d02a      	beq.n	80084a8 <__gethex+0x304>
 8008452:	2b01      	cmp	r3, #1
 8008454:	d115      	bne.n	8008482 <__gethex+0x2de>
 8008456:	42ae      	cmp	r6, r5
 8008458:	d113      	bne.n	8008482 <__gethex+0x2de>
 800845a:	2e01      	cmp	r6, #1
 800845c:	d10b      	bne.n	8008476 <__gethex+0x2d2>
 800845e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008462:	9a06      	ldr	r2, [sp, #24]
 8008464:	2762      	movs	r7, #98	; 0x62
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	2301      	movs	r3, #1
 800846a:	6123      	str	r3, [r4, #16]
 800846c:	f8c9 3000 	str.w	r3, [r9]
 8008470:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008472:	601c      	str	r4, [r3, #0]
 8008474:	e728      	b.n	80082c8 <__gethex+0x124>
 8008476:	4620      	mov	r0, r4
 8008478:	1e71      	subs	r1, r6, #1
 800847a:	f000 fe74 	bl	8009166 <__any_on>
 800847e:	2800      	cmp	r0, #0
 8008480:	d1ed      	bne.n	800845e <__gethex+0x2ba>
 8008482:	4621      	mov	r1, r4
 8008484:	9802      	ldr	r0, [sp, #8]
 8008486:	f000 fa17 	bl	80088b8 <_Bfree>
 800848a:	2300      	movs	r3, #0
 800848c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800848e:	2750      	movs	r7, #80	; 0x50
 8008490:	6013      	str	r3, [r2, #0]
 8008492:	e719      	b.n	80082c8 <__gethex+0x124>
 8008494:	0800ae30 	.word	0x0800ae30
 8008498:	0800adb4 	.word	0x0800adb4
 800849c:	0800adc5 	.word	0x0800adc5
 80084a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1ed      	bne.n	8008482 <__gethex+0x2de>
 80084a6:	e7da      	b.n	800845e <__gethex+0x2ba>
 80084a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1d7      	bne.n	800845e <__gethex+0x2ba>
 80084ae:	e7e8      	b.n	8008482 <__gethex+0x2de>
 80084b0:	1e6f      	subs	r7, r5, #1
 80084b2:	f1ba 0f00 	cmp.w	sl, #0
 80084b6:	d132      	bne.n	800851e <__gethex+0x37a>
 80084b8:	b127      	cbz	r7, 80084c4 <__gethex+0x320>
 80084ba:	4639      	mov	r1, r7
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 fe52 	bl	8009166 <__any_on>
 80084c2:	4682      	mov	sl, r0
 80084c4:	2101      	movs	r1, #1
 80084c6:	117b      	asrs	r3, r7, #5
 80084c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80084cc:	f007 071f 	and.w	r7, r7, #31
 80084d0:	fa01 f707 	lsl.w	r7, r1, r7
 80084d4:	421f      	tst	r7, r3
 80084d6:	f04f 0702 	mov.w	r7, #2
 80084da:	4629      	mov	r1, r5
 80084dc:	4620      	mov	r0, r4
 80084de:	bf18      	it	ne
 80084e0:	f04a 0a02 	orrne.w	sl, sl, #2
 80084e4:	1b76      	subs	r6, r6, r5
 80084e6:	f7ff fdf5 	bl	80080d4 <rshift>
 80084ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80084ee:	f1ba 0f00 	cmp.w	sl, #0
 80084f2:	d048      	beq.n	8008586 <__gethex+0x3e2>
 80084f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d015      	beq.n	8008528 <__gethex+0x384>
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d017      	beq.n	8008530 <__gethex+0x38c>
 8008500:	2b01      	cmp	r3, #1
 8008502:	d109      	bne.n	8008518 <__gethex+0x374>
 8008504:	f01a 0f02 	tst.w	sl, #2
 8008508:	d006      	beq.n	8008518 <__gethex+0x374>
 800850a:	f8d9 0000 	ldr.w	r0, [r9]
 800850e:	ea4a 0a00 	orr.w	sl, sl, r0
 8008512:	f01a 0f01 	tst.w	sl, #1
 8008516:	d10e      	bne.n	8008536 <__gethex+0x392>
 8008518:	f047 0710 	orr.w	r7, r7, #16
 800851c:	e033      	b.n	8008586 <__gethex+0x3e2>
 800851e:	f04f 0a01 	mov.w	sl, #1
 8008522:	e7cf      	b.n	80084c4 <__gethex+0x320>
 8008524:	2701      	movs	r7, #1
 8008526:	e7e2      	b.n	80084ee <__gethex+0x34a>
 8008528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800852a:	f1c3 0301 	rsb	r3, r3, #1
 800852e:	9315      	str	r3, [sp, #84]	; 0x54
 8008530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0f0      	beq.n	8008518 <__gethex+0x374>
 8008536:	f04f 0c00 	mov.w	ip, #0
 800853a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800853e:	f104 0314 	add.w	r3, r4, #20
 8008542:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008546:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800854a:	4618      	mov	r0, r3
 800854c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008550:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008554:	d01c      	beq.n	8008590 <__gethex+0x3ec>
 8008556:	3201      	adds	r2, #1
 8008558:	6002      	str	r2, [r0, #0]
 800855a:	2f02      	cmp	r7, #2
 800855c:	f104 0314 	add.w	r3, r4, #20
 8008560:	d13d      	bne.n	80085de <__gethex+0x43a>
 8008562:	f8d8 2000 	ldr.w	r2, [r8]
 8008566:	3a01      	subs	r2, #1
 8008568:	42b2      	cmp	r2, r6
 800856a:	d10a      	bne.n	8008582 <__gethex+0x3de>
 800856c:	2201      	movs	r2, #1
 800856e:	1171      	asrs	r1, r6, #5
 8008570:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008574:	f006 061f 	and.w	r6, r6, #31
 8008578:	fa02 f606 	lsl.w	r6, r2, r6
 800857c:	421e      	tst	r6, r3
 800857e:	bf18      	it	ne
 8008580:	4617      	movne	r7, r2
 8008582:	f047 0720 	orr.w	r7, r7, #32
 8008586:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008588:	601c      	str	r4, [r3, #0]
 800858a:	9b06      	ldr	r3, [sp, #24]
 800858c:	601d      	str	r5, [r3, #0]
 800858e:	e69b      	b.n	80082c8 <__gethex+0x124>
 8008590:	4299      	cmp	r1, r3
 8008592:	f843 cc04 	str.w	ip, [r3, #-4]
 8008596:	d8d8      	bhi.n	800854a <__gethex+0x3a6>
 8008598:	68a3      	ldr	r3, [r4, #8]
 800859a:	459b      	cmp	fp, r3
 800859c:	db17      	blt.n	80085ce <__gethex+0x42a>
 800859e:	6861      	ldr	r1, [r4, #4]
 80085a0:	9802      	ldr	r0, [sp, #8]
 80085a2:	3101      	adds	r1, #1
 80085a4:	f000 f948 	bl	8008838 <_Balloc>
 80085a8:	4681      	mov	r9, r0
 80085aa:	b918      	cbnz	r0, 80085b4 <__gethex+0x410>
 80085ac:	4602      	mov	r2, r0
 80085ae:	2184      	movs	r1, #132	; 0x84
 80085b0:	4b19      	ldr	r3, [pc, #100]	; (8008618 <__gethex+0x474>)
 80085b2:	e6ac      	b.n	800830e <__gethex+0x16a>
 80085b4:	6922      	ldr	r2, [r4, #16]
 80085b6:	f104 010c 	add.w	r1, r4, #12
 80085ba:	3202      	adds	r2, #2
 80085bc:	0092      	lsls	r2, r2, #2
 80085be:	300c      	adds	r0, #12
 80085c0:	f000 f92c 	bl	800881c <memcpy>
 80085c4:	4621      	mov	r1, r4
 80085c6:	9802      	ldr	r0, [sp, #8]
 80085c8:	f000 f976 	bl	80088b8 <_Bfree>
 80085cc:	464c      	mov	r4, r9
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	1c5a      	adds	r2, r3, #1
 80085d2:	6122      	str	r2, [r4, #16]
 80085d4:	2201      	movs	r2, #1
 80085d6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085da:	615a      	str	r2, [r3, #20]
 80085dc:	e7bd      	b.n	800855a <__gethex+0x3b6>
 80085de:	6922      	ldr	r2, [r4, #16]
 80085e0:	455a      	cmp	r2, fp
 80085e2:	dd0b      	ble.n	80085fc <__gethex+0x458>
 80085e4:	2101      	movs	r1, #1
 80085e6:	4620      	mov	r0, r4
 80085e8:	f7ff fd74 	bl	80080d4 <rshift>
 80085ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085f0:	3501      	adds	r5, #1
 80085f2:	42ab      	cmp	r3, r5
 80085f4:	f6ff aed5 	blt.w	80083a2 <__gethex+0x1fe>
 80085f8:	2701      	movs	r7, #1
 80085fa:	e7c2      	b.n	8008582 <__gethex+0x3de>
 80085fc:	f016 061f 	ands.w	r6, r6, #31
 8008600:	d0fa      	beq.n	80085f8 <__gethex+0x454>
 8008602:	449a      	add	sl, r3
 8008604:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008608:	f000 fa0c 	bl	8008a24 <__hi0bits>
 800860c:	f1c6 0620 	rsb	r6, r6, #32
 8008610:	42b0      	cmp	r0, r6
 8008612:	dbe7      	blt.n	80085e4 <__gethex+0x440>
 8008614:	e7f0      	b.n	80085f8 <__gethex+0x454>
 8008616:	bf00      	nop
 8008618:	0800adb4 	.word	0x0800adb4

0800861c <L_shift>:
 800861c:	f1c2 0208 	rsb	r2, r2, #8
 8008620:	0092      	lsls	r2, r2, #2
 8008622:	b570      	push	{r4, r5, r6, lr}
 8008624:	f1c2 0620 	rsb	r6, r2, #32
 8008628:	6843      	ldr	r3, [r0, #4]
 800862a:	6804      	ldr	r4, [r0, #0]
 800862c:	fa03 f506 	lsl.w	r5, r3, r6
 8008630:	432c      	orrs	r4, r5
 8008632:	40d3      	lsrs	r3, r2
 8008634:	6004      	str	r4, [r0, #0]
 8008636:	f840 3f04 	str.w	r3, [r0, #4]!
 800863a:	4288      	cmp	r0, r1
 800863c:	d3f4      	bcc.n	8008628 <L_shift+0xc>
 800863e:	bd70      	pop	{r4, r5, r6, pc}

08008640 <__match>:
 8008640:	b530      	push	{r4, r5, lr}
 8008642:	6803      	ldr	r3, [r0, #0]
 8008644:	3301      	adds	r3, #1
 8008646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800864a:	b914      	cbnz	r4, 8008652 <__match+0x12>
 800864c:	6003      	str	r3, [r0, #0]
 800864e:	2001      	movs	r0, #1
 8008650:	bd30      	pop	{r4, r5, pc}
 8008652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008656:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800865a:	2d19      	cmp	r5, #25
 800865c:	bf98      	it	ls
 800865e:	3220      	addls	r2, #32
 8008660:	42a2      	cmp	r2, r4
 8008662:	d0f0      	beq.n	8008646 <__match+0x6>
 8008664:	2000      	movs	r0, #0
 8008666:	e7f3      	b.n	8008650 <__match+0x10>

08008668 <__hexnan>:
 8008668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	2500      	movs	r5, #0
 800866e:	680b      	ldr	r3, [r1, #0]
 8008670:	4682      	mov	sl, r0
 8008672:	115e      	asrs	r6, r3, #5
 8008674:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008678:	f013 031f 	ands.w	r3, r3, #31
 800867c:	bf18      	it	ne
 800867e:	3604      	addne	r6, #4
 8008680:	1f37      	subs	r7, r6, #4
 8008682:	4690      	mov	r8, r2
 8008684:	46b9      	mov	r9, r7
 8008686:	463c      	mov	r4, r7
 8008688:	46ab      	mov	fp, r5
 800868a:	b087      	sub	sp, #28
 800868c:	6801      	ldr	r1, [r0, #0]
 800868e:	9301      	str	r3, [sp, #4]
 8008690:	f846 5c04 	str.w	r5, [r6, #-4]
 8008694:	9502      	str	r5, [sp, #8]
 8008696:	784a      	ldrb	r2, [r1, #1]
 8008698:	1c4b      	adds	r3, r1, #1
 800869a:	9303      	str	r3, [sp, #12]
 800869c:	b342      	cbz	r2, 80086f0 <__hexnan+0x88>
 800869e:	4610      	mov	r0, r2
 80086a0:	9105      	str	r1, [sp, #20]
 80086a2:	9204      	str	r2, [sp, #16]
 80086a4:	f7ff fd69 	bl	800817a <__hexdig_fun>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d14f      	bne.n	800874c <__hexnan+0xe4>
 80086ac:	9a04      	ldr	r2, [sp, #16]
 80086ae:	9905      	ldr	r1, [sp, #20]
 80086b0:	2a20      	cmp	r2, #32
 80086b2:	d818      	bhi.n	80086e6 <__hexnan+0x7e>
 80086b4:	9b02      	ldr	r3, [sp, #8]
 80086b6:	459b      	cmp	fp, r3
 80086b8:	dd13      	ble.n	80086e2 <__hexnan+0x7a>
 80086ba:	454c      	cmp	r4, r9
 80086bc:	d206      	bcs.n	80086cc <__hexnan+0x64>
 80086be:	2d07      	cmp	r5, #7
 80086c0:	dc04      	bgt.n	80086cc <__hexnan+0x64>
 80086c2:	462a      	mov	r2, r5
 80086c4:	4649      	mov	r1, r9
 80086c6:	4620      	mov	r0, r4
 80086c8:	f7ff ffa8 	bl	800861c <L_shift>
 80086cc:	4544      	cmp	r4, r8
 80086ce:	d950      	bls.n	8008772 <__hexnan+0x10a>
 80086d0:	2300      	movs	r3, #0
 80086d2:	f1a4 0904 	sub.w	r9, r4, #4
 80086d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80086da:	461d      	mov	r5, r3
 80086dc:	464c      	mov	r4, r9
 80086de:	f8cd b008 	str.w	fp, [sp, #8]
 80086e2:	9903      	ldr	r1, [sp, #12]
 80086e4:	e7d7      	b.n	8008696 <__hexnan+0x2e>
 80086e6:	2a29      	cmp	r2, #41	; 0x29
 80086e8:	d156      	bne.n	8008798 <__hexnan+0x130>
 80086ea:	3102      	adds	r1, #2
 80086ec:	f8ca 1000 	str.w	r1, [sl]
 80086f0:	f1bb 0f00 	cmp.w	fp, #0
 80086f4:	d050      	beq.n	8008798 <__hexnan+0x130>
 80086f6:	454c      	cmp	r4, r9
 80086f8:	d206      	bcs.n	8008708 <__hexnan+0xa0>
 80086fa:	2d07      	cmp	r5, #7
 80086fc:	dc04      	bgt.n	8008708 <__hexnan+0xa0>
 80086fe:	462a      	mov	r2, r5
 8008700:	4649      	mov	r1, r9
 8008702:	4620      	mov	r0, r4
 8008704:	f7ff ff8a 	bl	800861c <L_shift>
 8008708:	4544      	cmp	r4, r8
 800870a:	d934      	bls.n	8008776 <__hexnan+0x10e>
 800870c:	4623      	mov	r3, r4
 800870e:	f1a8 0204 	sub.w	r2, r8, #4
 8008712:	f853 1b04 	ldr.w	r1, [r3], #4
 8008716:	429f      	cmp	r7, r3
 8008718:	f842 1f04 	str.w	r1, [r2, #4]!
 800871c:	d2f9      	bcs.n	8008712 <__hexnan+0xaa>
 800871e:	1b3b      	subs	r3, r7, r4
 8008720:	f023 0303 	bic.w	r3, r3, #3
 8008724:	3304      	adds	r3, #4
 8008726:	3401      	adds	r4, #1
 8008728:	3e03      	subs	r6, #3
 800872a:	42b4      	cmp	r4, r6
 800872c:	bf88      	it	hi
 800872e:	2304      	movhi	r3, #4
 8008730:	2200      	movs	r2, #0
 8008732:	4443      	add	r3, r8
 8008734:	f843 2b04 	str.w	r2, [r3], #4
 8008738:	429f      	cmp	r7, r3
 800873a:	d2fb      	bcs.n	8008734 <__hexnan+0xcc>
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	b91b      	cbnz	r3, 8008748 <__hexnan+0xe0>
 8008740:	4547      	cmp	r7, r8
 8008742:	d127      	bne.n	8008794 <__hexnan+0x12c>
 8008744:	2301      	movs	r3, #1
 8008746:	603b      	str	r3, [r7, #0]
 8008748:	2005      	movs	r0, #5
 800874a:	e026      	b.n	800879a <__hexnan+0x132>
 800874c:	3501      	adds	r5, #1
 800874e:	2d08      	cmp	r5, #8
 8008750:	f10b 0b01 	add.w	fp, fp, #1
 8008754:	dd06      	ble.n	8008764 <__hexnan+0xfc>
 8008756:	4544      	cmp	r4, r8
 8008758:	d9c3      	bls.n	80086e2 <__hexnan+0x7a>
 800875a:	2300      	movs	r3, #0
 800875c:	2501      	movs	r5, #1
 800875e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008762:	3c04      	subs	r4, #4
 8008764:	6822      	ldr	r2, [r4, #0]
 8008766:	f000 000f 	and.w	r0, r0, #15
 800876a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800876e:	6022      	str	r2, [r4, #0]
 8008770:	e7b7      	b.n	80086e2 <__hexnan+0x7a>
 8008772:	2508      	movs	r5, #8
 8008774:	e7b5      	b.n	80086e2 <__hexnan+0x7a>
 8008776:	9b01      	ldr	r3, [sp, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0df      	beq.n	800873c <__hexnan+0xd4>
 800877c:	f04f 32ff 	mov.w	r2, #4294967295
 8008780:	f1c3 0320 	rsb	r3, r3, #32
 8008784:	fa22 f303 	lsr.w	r3, r2, r3
 8008788:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800878c:	401a      	ands	r2, r3
 800878e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008792:	e7d3      	b.n	800873c <__hexnan+0xd4>
 8008794:	3f04      	subs	r7, #4
 8008796:	e7d1      	b.n	800873c <__hexnan+0xd4>
 8008798:	2004      	movs	r0, #4
 800879a:	b007      	add	sp, #28
 800879c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087a0 <_localeconv_r>:
 80087a0:	4800      	ldr	r0, [pc, #0]	; (80087a4 <_localeconv_r+0x4>)
 80087a2:	4770      	bx	lr
 80087a4:	20000164 	.word	0x20000164

080087a8 <_lseek_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4604      	mov	r4, r0
 80087ac:	4608      	mov	r0, r1
 80087ae:	4611      	mov	r1, r2
 80087b0:	2200      	movs	r2, #0
 80087b2:	4d05      	ldr	r5, [pc, #20]	; (80087c8 <_lseek_r+0x20>)
 80087b4:	602a      	str	r2, [r5, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f7f9 fe6a 	bl	8002490 <_lseek>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_lseek_r+0x1e>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_lseek_r+0x1e>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	200003a0 	.word	0x200003a0

080087cc <malloc>:
 80087cc:	4b02      	ldr	r3, [pc, #8]	; (80087d8 <malloc+0xc>)
 80087ce:	4601      	mov	r1, r0
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	f000 bd43 	b.w	800925c <_malloc_r>
 80087d6:	bf00      	nop
 80087d8:	2000000c 	.word	0x2000000c

080087dc <__ascii_mbtowc>:
 80087dc:	b082      	sub	sp, #8
 80087de:	b901      	cbnz	r1, 80087e2 <__ascii_mbtowc+0x6>
 80087e0:	a901      	add	r1, sp, #4
 80087e2:	b142      	cbz	r2, 80087f6 <__ascii_mbtowc+0x1a>
 80087e4:	b14b      	cbz	r3, 80087fa <__ascii_mbtowc+0x1e>
 80087e6:	7813      	ldrb	r3, [r2, #0]
 80087e8:	600b      	str	r3, [r1, #0]
 80087ea:	7812      	ldrb	r2, [r2, #0]
 80087ec:	1e10      	subs	r0, r2, #0
 80087ee:	bf18      	it	ne
 80087f0:	2001      	movne	r0, #1
 80087f2:	b002      	add	sp, #8
 80087f4:	4770      	bx	lr
 80087f6:	4610      	mov	r0, r2
 80087f8:	e7fb      	b.n	80087f2 <__ascii_mbtowc+0x16>
 80087fa:	f06f 0001 	mvn.w	r0, #1
 80087fe:	e7f8      	b.n	80087f2 <__ascii_mbtowc+0x16>

08008800 <memchr>:
 8008800:	4603      	mov	r3, r0
 8008802:	b510      	push	{r4, lr}
 8008804:	b2c9      	uxtb	r1, r1
 8008806:	4402      	add	r2, r0
 8008808:	4293      	cmp	r3, r2
 800880a:	4618      	mov	r0, r3
 800880c:	d101      	bne.n	8008812 <memchr+0x12>
 800880e:	2000      	movs	r0, #0
 8008810:	e003      	b.n	800881a <memchr+0x1a>
 8008812:	7804      	ldrb	r4, [r0, #0]
 8008814:	3301      	adds	r3, #1
 8008816:	428c      	cmp	r4, r1
 8008818:	d1f6      	bne.n	8008808 <memchr+0x8>
 800881a:	bd10      	pop	{r4, pc}

0800881c <memcpy>:
 800881c:	440a      	add	r2, r1
 800881e:	4291      	cmp	r1, r2
 8008820:	f100 33ff 	add.w	r3, r0, #4294967295
 8008824:	d100      	bne.n	8008828 <memcpy+0xc>
 8008826:	4770      	bx	lr
 8008828:	b510      	push	{r4, lr}
 800882a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800882e:	4291      	cmp	r1, r2
 8008830:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008834:	d1f9      	bne.n	800882a <memcpy+0xe>
 8008836:	bd10      	pop	{r4, pc}

08008838 <_Balloc>:
 8008838:	b570      	push	{r4, r5, r6, lr}
 800883a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800883c:	4604      	mov	r4, r0
 800883e:	460d      	mov	r5, r1
 8008840:	b976      	cbnz	r6, 8008860 <_Balloc+0x28>
 8008842:	2010      	movs	r0, #16
 8008844:	f7ff ffc2 	bl	80087cc <malloc>
 8008848:	4602      	mov	r2, r0
 800884a:	6260      	str	r0, [r4, #36]	; 0x24
 800884c:	b920      	cbnz	r0, 8008858 <_Balloc+0x20>
 800884e:	2166      	movs	r1, #102	; 0x66
 8008850:	4b17      	ldr	r3, [pc, #92]	; (80088b0 <_Balloc+0x78>)
 8008852:	4818      	ldr	r0, [pc, #96]	; (80088b4 <_Balloc+0x7c>)
 8008854:	f001 fb0e 	bl	8009e74 <__assert_func>
 8008858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800885c:	6006      	str	r6, [r0, #0]
 800885e:	60c6      	str	r6, [r0, #12]
 8008860:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008862:	68f3      	ldr	r3, [r6, #12]
 8008864:	b183      	cbz	r3, 8008888 <_Balloc+0x50>
 8008866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800886e:	b9b8      	cbnz	r0, 80088a0 <_Balloc+0x68>
 8008870:	2101      	movs	r1, #1
 8008872:	fa01 f605 	lsl.w	r6, r1, r5
 8008876:	1d72      	adds	r2, r6, #5
 8008878:	4620      	mov	r0, r4
 800887a:	0092      	lsls	r2, r2, #2
 800887c:	f000 fc94 	bl	80091a8 <_calloc_r>
 8008880:	b160      	cbz	r0, 800889c <_Balloc+0x64>
 8008882:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008886:	e00e      	b.n	80088a6 <_Balloc+0x6e>
 8008888:	2221      	movs	r2, #33	; 0x21
 800888a:	2104      	movs	r1, #4
 800888c:	4620      	mov	r0, r4
 800888e:	f000 fc8b 	bl	80091a8 <_calloc_r>
 8008892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008894:	60f0      	str	r0, [r6, #12]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e4      	bne.n	8008866 <_Balloc+0x2e>
 800889c:	2000      	movs	r0, #0
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	6802      	ldr	r2, [r0, #0]
 80088a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088a6:	2300      	movs	r3, #0
 80088a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088ac:	e7f7      	b.n	800889e <_Balloc+0x66>
 80088ae:	bf00      	nop
 80088b0:	0800ad3e 	.word	0x0800ad3e
 80088b4:	0800ae44 	.word	0x0800ae44

080088b8 <_Bfree>:
 80088b8:	b570      	push	{r4, r5, r6, lr}
 80088ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088bc:	4605      	mov	r5, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	b976      	cbnz	r6, 80088e0 <_Bfree+0x28>
 80088c2:	2010      	movs	r0, #16
 80088c4:	f7ff ff82 	bl	80087cc <malloc>
 80088c8:	4602      	mov	r2, r0
 80088ca:	6268      	str	r0, [r5, #36]	; 0x24
 80088cc:	b920      	cbnz	r0, 80088d8 <_Bfree+0x20>
 80088ce:	218a      	movs	r1, #138	; 0x8a
 80088d0:	4b08      	ldr	r3, [pc, #32]	; (80088f4 <_Bfree+0x3c>)
 80088d2:	4809      	ldr	r0, [pc, #36]	; (80088f8 <_Bfree+0x40>)
 80088d4:	f001 face 	bl	8009e74 <__assert_func>
 80088d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088dc:	6006      	str	r6, [r0, #0]
 80088de:	60c6      	str	r6, [r0, #12]
 80088e0:	b13c      	cbz	r4, 80088f2 <_Bfree+0x3a>
 80088e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088e4:	6862      	ldr	r2, [r4, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088ec:	6021      	str	r1, [r4, #0]
 80088ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088f2:	bd70      	pop	{r4, r5, r6, pc}
 80088f4:	0800ad3e 	.word	0x0800ad3e
 80088f8:	0800ae44 	.word	0x0800ae44

080088fc <__multadd>:
 80088fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008900:	4698      	mov	r8, r3
 8008902:	460c      	mov	r4, r1
 8008904:	2300      	movs	r3, #0
 8008906:	690e      	ldr	r6, [r1, #16]
 8008908:	4607      	mov	r7, r0
 800890a:	f101 0014 	add.w	r0, r1, #20
 800890e:	6805      	ldr	r5, [r0, #0]
 8008910:	3301      	adds	r3, #1
 8008912:	b2a9      	uxth	r1, r5
 8008914:	fb02 8101 	mla	r1, r2, r1, r8
 8008918:	0c2d      	lsrs	r5, r5, #16
 800891a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800891e:	fb02 c505 	mla	r5, r2, r5, ip
 8008922:	b289      	uxth	r1, r1
 8008924:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008928:	429e      	cmp	r6, r3
 800892a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800892e:	f840 1b04 	str.w	r1, [r0], #4
 8008932:	dcec      	bgt.n	800890e <__multadd+0x12>
 8008934:	f1b8 0f00 	cmp.w	r8, #0
 8008938:	d022      	beq.n	8008980 <__multadd+0x84>
 800893a:	68a3      	ldr	r3, [r4, #8]
 800893c:	42b3      	cmp	r3, r6
 800893e:	dc19      	bgt.n	8008974 <__multadd+0x78>
 8008940:	6861      	ldr	r1, [r4, #4]
 8008942:	4638      	mov	r0, r7
 8008944:	3101      	adds	r1, #1
 8008946:	f7ff ff77 	bl	8008838 <_Balloc>
 800894a:	4605      	mov	r5, r0
 800894c:	b928      	cbnz	r0, 800895a <__multadd+0x5e>
 800894e:	4602      	mov	r2, r0
 8008950:	21b5      	movs	r1, #181	; 0xb5
 8008952:	4b0d      	ldr	r3, [pc, #52]	; (8008988 <__multadd+0x8c>)
 8008954:	480d      	ldr	r0, [pc, #52]	; (800898c <__multadd+0x90>)
 8008956:	f001 fa8d 	bl	8009e74 <__assert_func>
 800895a:	6922      	ldr	r2, [r4, #16]
 800895c:	f104 010c 	add.w	r1, r4, #12
 8008960:	3202      	adds	r2, #2
 8008962:	0092      	lsls	r2, r2, #2
 8008964:	300c      	adds	r0, #12
 8008966:	f7ff ff59 	bl	800881c <memcpy>
 800896a:	4621      	mov	r1, r4
 800896c:	4638      	mov	r0, r7
 800896e:	f7ff ffa3 	bl	80088b8 <_Bfree>
 8008972:	462c      	mov	r4, r5
 8008974:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008978:	3601      	adds	r6, #1
 800897a:	f8c3 8014 	str.w	r8, [r3, #20]
 800897e:	6126      	str	r6, [r4, #16]
 8008980:	4620      	mov	r0, r4
 8008982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008986:	bf00      	nop
 8008988:	0800adb4 	.word	0x0800adb4
 800898c:	0800ae44 	.word	0x0800ae44

08008990 <__s2b>:
 8008990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008994:	4615      	mov	r5, r2
 8008996:	2209      	movs	r2, #9
 8008998:	461f      	mov	r7, r3
 800899a:	3308      	adds	r3, #8
 800899c:	460c      	mov	r4, r1
 800899e:	fb93 f3f2 	sdiv	r3, r3, r2
 80089a2:	4606      	mov	r6, r0
 80089a4:	2201      	movs	r2, #1
 80089a6:	2100      	movs	r1, #0
 80089a8:	429a      	cmp	r2, r3
 80089aa:	db09      	blt.n	80089c0 <__s2b+0x30>
 80089ac:	4630      	mov	r0, r6
 80089ae:	f7ff ff43 	bl	8008838 <_Balloc>
 80089b2:	b940      	cbnz	r0, 80089c6 <__s2b+0x36>
 80089b4:	4602      	mov	r2, r0
 80089b6:	21ce      	movs	r1, #206	; 0xce
 80089b8:	4b18      	ldr	r3, [pc, #96]	; (8008a1c <__s2b+0x8c>)
 80089ba:	4819      	ldr	r0, [pc, #100]	; (8008a20 <__s2b+0x90>)
 80089bc:	f001 fa5a 	bl	8009e74 <__assert_func>
 80089c0:	0052      	lsls	r2, r2, #1
 80089c2:	3101      	adds	r1, #1
 80089c4:	e7f0      	b.n	80089a8 <__s2b+0x18>
 80089c6:	9b08      	ldr	r3, [sp, #32]
 80089c8:	2d09      	cmp	r5, #9
 80089ca:	6143      	str	r3, [r0, #20]
 80089cc:	f04f 0301 	mov.w	r3, #1
 80089d0:	6103      	str	r3, [r0, #16]
 80089d2:	dd16      	ble.n	8008a02 <__s2b+0x72>
 80089d4:	f104 0909 	add.w	r9, r4, #9
 80089d8:	46c8      	mov	r8, r9
 80089da:	442c      	add	r4, r5
 80089dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80089e0:	4601      	mov	r1, r0
 80089e2:	220a      	movs	r2, #10
 80089e4:	4630      	mov	r0, r6
 80089e6:	3b30      	subs	r3, #48	; 0x30
 80089e8:	f7ff ff88 	bl	80088fc <__multadd>
 80089ec:	45a0      	cmp	r8, r4
 80089ee:	d1f5      	bne.n	80089dc <__s2b+0x4c>
 80089f0:	f1a5 0408 	sub.w	r4, r5, #8
 80089f4:	444c      	add	r4, r9
 80089f6:	1b2d      	subs	r5, r5, r4
 80089f8:	1963      	adds	r3, r4, r5
 80089fa:	42bb      	cmp	r3, r7
 80089fc:	db04      	blt.n	8008a08 <__s2b+0x78>
 80089fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a02:	2509      	movs	r5, #9
 8008a04:	340a      	adds	r4, #10
 8008a06:	e7f6      	b.n	80089f6 <__s2b+0x66>
 8008a08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a0c:	4601      	mov	r1, r0
 8008a0e:	220a      	movs	r2, #10
 8008a10:	4630      	mov	r0, r6
 8008a12:	3b30      	subs	r3, #48	; 0x30
 8008a14:	f7ff ff72 	bl	80088fc <__multadd>
 8008a18:	e7ee      	b.n	80089f8 <__s2b+0x68>
 8008a1a:	bf00      	nop
 8008a1c:	0800adb4 	.word	0x0800adb4
 8008a20:	0800ae44 	.word	0x0800ae44

08008a24 <__hi0bits>:
 8008a24:	0c02      	lsrs	r2, r0, #16
 8008a26:	0412      	lsls	r2, r2, #16
 8008a28:	4603      	mov	r3, r0
 8008a2a:	b9ca      	cbnz	r2, 8008a60 <__hi0bits+0x3c>
 8008a2c:	0403      	lsls	r3, r0, #16
 8008a2e:	2010      	movs	r0, #16
 8008a30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008a34:	bf04      	itt	eq
 8008a36:	021b      	lsleq	r3, r3, #8
 8008a38:	3008      	addeq	r0, #8
 8008a3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008a3e:	bf04      	itt	eq
 8008a40:	011b      	lsleq	r3, r3, #4
 8008a42:	3004      	addeq	r0, #4
 8008a44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008a48:	bf04      	itt	eq
 8008a4a:	009b      	lsleq	r3, r3, #2
 8008a4c:	3002      	addeq	r0, #2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	db05      	blt.n	8008a5e <__hi0bits+0x3a>
 8008a52:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008a56:	f100 0001 	add.w	r0, r0, #1
 8008a5a:	bf08      	it	eq
 8008a5c:	2020      	moveq	r0, #32
 8008a5e:	4770      	bx	lr
 8008a60:	2000      	movs	r0, #0
 8008a62:	e7e5      	b.n	8008a30 <__hi0bits+0xc>

08008a64 <__lo0bits>:
 8008a64:	6803      	ldr	r3, [r0, #0]
 8008a66:	4602      	mov	r2, r0
 8008a68:	f013 0007 	ands.w	r0, r3, #7
 8008a6c:	d00b      	beq.n	8008a86 <__lo0bits+0x22>
 8008a6e:	07d9      	lsls	r1, r3, #31
 8008a70:	d422      	bmi.n	8008ab8 <__lo0bits+0x54>
 8008a72:	0798      	lsls	r0, r3, #30
 8008a74:	bf49      	itett	mi
 8008a76:	085b      	lsrmi	r3, r3, #1
 8008a78:	089b      	lsrpl	r3, r3, #2
 8008a7a:	2001      	movmi	r0, #1
 8008a7c:	6013      	strmi	r3, [r2, #0]
 8008a7e:	bf5c      	itt	pl
 8008a80:	2002      	movpl	r0, #2
 8008a82:	6013      	strpl	r3, [r2, #0]
 8008a84:	4770      	bx	lr
 8008a86:	b299      	uxth	r1, r3
 8008a88:	b909      	cbnz	r1, 8008a8e <__lo0bits+0x2a>
 8008a8a:	2010      	movs	r0, #16
 8008a8c:	0c1b      	lsrs	r3, r3, #16
 8008a8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a92:	bf04      	itt	eq
 8008a94:	0a1b      	lsreq	r3, r3, #8
 8008a96:	3008      	addeq	r0, #8
 8008a98:	0719      	lsls	r1, r3, #28
 8008a9a:	bf04      	itt	eq
 8008a9c:	091b      	lsreq	r3, r3, #4
 8008a9e:	3004      	addeq	r0, #4
 8008aa0:	0799      	lsls	r1, r3, #30
 8008aa2:	bf04      	itt	eq
 8008aa4:	089b      	lsreq	r3, r3, #2
 8008aa6:	3002      	addeq	r0, #2
 8008aa8:	07d9      	lsls	r1, r3, #31
 8008aaa:	d403      	bmi.n	8008ab4 <__lo0bits+0x50>
 8008aac:	085b      	lsrs	r3, r3, #1
 8008aae:	f100 0001 	add.w	r0, r0, #1
 8008ab2:	d003      	beq.n	8008abc <__lo0bits+0x58>
 8008ab4:	6013      	str	r3, [r2, #0]
 8008ab6:	4770      	bx	lr
 8008ab8:	2000      	movs	r0, #0
 8008aba:	4770      	bx	lr
 8008abc:	2020      	movs	r0, #32
 8008abe:	4770      	bx	lr

08008ac0 <__i2b>:
 8008ac0:	b510      	push	{r4, lr}
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	f7ff feb7 	bl	8008838 <_Balloc>
 8008aca:	4602      	mov	r2, r0
 8008acc:	b928      	cbnz	r0, 8008ada <__i2b+0x1a>
 8008ace:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ad2:	4b04      	ldr	r3, [pc, #16]	; (8008ae4 <__i2b+0x24>)
 8008ad4:	4804      	ldr	r0, [pc, #16]	; (8008ae8 <__i2b+0x28>)
 8008ad6:	f001 f9cd 	bl	8009e74 <__assert_func>
 8008ada:	2301      	movs	r3, #1
 8008adc:	6144      	str	r4, [r0, #20]
 8008ade:	6103      	str	r3, [r0, #16]
 8008ae0:	bd10      	pop	{r4, pc}
 8008ae2:	bf00      	nop
 8008ae4:	0800adb4 	.word	0x0800adb4
 8008ae8:	0800ae44 	.word	0x0800ae44

08008aec <__multiply>:
 8008aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	4614      	mov	r4, r2
 8008af2:	690a      	ldr	r2, [r1, #16]
 8008af4:	6923      	ldr	r3, [r4, #16]
 8008af6:	460d      	mov	r5, r1
 8008af8:	429a      	cmp	r2, r3
 8008afa:	bfbe      	ittt	lt
 8008afc:	460b      	movlt	r3, r1
 8008afe:	4625      	movlt	r5, r4
 8008b00:	461c      	movlt	r4, r3
 8008b02:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008b06:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008b0a:	68ab      	ldr	r3, [r5, #8]
 8008b0c:	6869      	ldr	r1, [r5, #4]
 8008b0e:	eb0a 0709 	add.w	r7, sl, r9
 8008b12:	42bb      	cmp	r3, r7
 8008b14:	b085      	sub	sp, #20
 8008b16:	bfb8      	it	lt
 8008b18:	3101      	addlt	r1, #1
 8008b1a:	f7ff fe8d 	bl	8008838 <_Balloc>
 8008b1e:	b930      	cbnz	r0, 8008b2e <__multiply+0x42>
 8008b20:	4602      	mov	r2, r0
 8008b22:	f240 115d 	movw	r1, #349	; 0x15d
 8008b26:	4b41      	ldr	r3, [pc, #260]	; (8008c2c <__multiply+0x140>)
 8008b28:	4841      	ldr	r0, [pc, #260]	; (8008c30 <__multiply+0x144>)
 8008b2a:	f001 f9a3 	bl	8009e74 <__assert_func>
 8008b2e:	f100 0614 	add.w	r6, r0, #20
 8008b32:	4633      	mov	r3, r6
 8008b34:	2200      	movs	r2, #0
 8008b36:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008b3a:	4543      	cmp	r3, r8
 8008b3c:	d31e      	bcc.n	8008b7c <__multiply+0x90>
 8008b3e:	f105 0c14 	add.w	ip, r5, #20
 8008b42:	f104 0314 	add.w	r3, r4, #20
 8008b46:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008b4a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008b4e:	9202      	str	r2, [sp, #8]
 8008b50:	ebac 0205 	sub.w	r2, ip, r5
 8008b54:	3a15      	subs	r2, #21
 8008b56:	f022 0203 	bic.w	r2, r2, #3
 8008b5a:	3204      	adds	r2, #4
 8008b5c:	f105 0115 	add.w	r1, r5, #21
 8008b60:	458c      	cmp	ip, r1
 8008b62:	bf38      	it	cc
 8008b64:	2204      	movcc	r2, #4
 8008b66:	9201      	str	r2, [sp, #4]
 8008b68:	9a02      	ldr	r2, [sp, #8]
 8008b6a:	9303      	str	r3, [sp, #12]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d808      	bhi.n	8008b82 <__multiply+0x96>
 8008b70:	2f00      	cmp	r7, #0
 8008b72:	dc55      	bgt.n	8008c20 <__multiply+0x134>
 8008b74:	6107      	str	r7, [r0, #16]
 8008b76:	b005      	add	sp, #20
 8008b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7c:	f843 2b04 	str.w	r2, [r3], #4
 8008b80:	e7db      	b.n	8008b3a <__multiply+0x4e>
 8008b82:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b86:	f1ba 0f00 	cmp.w	sl, #0
 8008b8a:	d020      	beq.n	8008bce <__multiply+0xe2>
 8008b8c:	46b1      	mov	r9, r6
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f105 0e14 	add.w	lr, r5, #20
 8008b94:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008b98:	f8d9 b000 	ldr.w	fp, [r9]
 8008b9c:	b2a1      	uxth	r1, r4
 8008b9e:	fa1f fb8b 	uxth.w	fp, fp
 8008ba2:	fb0a b101 	mla	r1, sl, r1, fp
 8008ba6:	4411      	add	r1, r2
 8008ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8008bac:	0c24      	lsrs	r4, r4, #16
 8008bae:	0c12      	lsrs	r2, r2, #16
 8008bb0:	fb0a 2404 	mla	r4, sl, r4, r2
 8008bb4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008bb8:	b289      	uxth	r1, r1
 8008bba:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008bbe:	45f4      	cmp	ip, lr
 8008bc0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008bc4:	f849 1b04 	str.w	r1, [r9], #4
 8008bc8:	d8e4      	bhi.n	8008b94 <__multiply+0xa8>
 8008bca:	9901      	ldr	r1, [sp, #4]
 8008bcc:	5072      	str	r2, [r6, r1]
 8008bce:	9a03      	ldr	r2, [sp, #12]
 8008bd0:	3304      	adds	r3, #4
 8008bd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bd6:	f1b9 0f00 	cmp.w	r9, #0
 8008bda:	d01f      	beq.n	8008c1c <__multiply+0x130>
 8008bdc:	46b6      	mov	lr, r6
 8008bde:	f04f 0a00 	mov.w	sl, #0
 8008be2:	6834      	ldr	r4, [r6, #0]
 8008be4:	f105 0114 	add.w	r1, r5, #20
 8008be8:	880a      	ldrh	r2, [r1, #0]
 8008bea:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008bee:	b2a4      	uxth	r4, r4
 8008bf0:	fb09 b202 	mla	r2, r9, r2, fp
 8008bf4:	4492      	add	sl, r2
 8008bf6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008bfa:	f84e 4b04 	str.w	r4, [lr], #4
 8008bfe:	f851 4b04 	ldr.w	r4, [r1], #4
 8008c02:	f8be 2000 	ldrh.w	r2, [lr]
 8008c06:	0c24      	lsrs	r4, r4, #16
 8008c08:	fb09 2404 	mla	r4, r9, r4, r2
 8008c0c:	458c      	cmp	ip, r1
 8008c0e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008c12:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c16:	d8e7      	bhi.n	8008be8 <__multiply+0xfc>
 8008c18:	9a01      	ldr	r2, [sp, #4]
 8008c1a:	50b4      	str	r4, [r6, r2]
 8008c1c:	3604      	adds	r6, #4
 8008c1e:	e7a3      	b.n	8008b68 <__multiply+0x7c>
 8008c20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1a5      	bne.n	8008b74 <__multiply+0x88>
 8008c28:	3f01      	subs	r7, #1
 8008c2a:	e7a1      	b.n	8008b70 <__multiply+0x84>
 8008c2c:	0800adb4 	.word	0x0800adb4
 8008c30:	0800ae44 	.word	0x0800ae44

08008c34 <__pow5mult>:
 8008c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c38:	4615      	mov	r5, r2
 8008c3a:	f012 0203 	ands.w	r2, r2, #3
 8008c3e:	4606      	mov	r6, r0
 8008c40:	460f      	mov	r7, r1
 8008c42:	d007      	beq.n	8008c54 <__pow5mult+0x20>
 8008c44:	4c25      	ldr	r4, [pc, #148]	; (8008cdc <__pow5mult+0xa8>)
 8008c46:	3a01      	subs	r2, #1
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c4e:	f7ff fe55 	bl	80088fc <__multadd>
 8008c52:	4607      	mov	r7, r0
 8008c54:	10ad      	asrs	r5, r5, #2
 8008c56:	d03d      	beq.n	8008cd4 <__pow5mult+0xa0>
 8008c58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c5a:	b97c      	cbnz	r4, 8008c7c <__pow5mult+0x48>
 8008c5c:	2010      	movs	r0, #16
 8008c5e:	f7ff fdb5 	bl	80087cc <malloc>
 8008c62:	4602      	mov	r2, r0
 8008c64:	6270      	str	r0, [r6, #36]	; 0x24
 8008c66:	b928      	cbnz	r0, 8008c74 <__pow5mult+0x40>
 8008c68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c6c:	4b1c      	ldr	r3, [pc, #112]	; (8008ce0 <__pow5mult+0xac>)
 8008c6e:	481d      	ldr	r0, [pc, #116]	; (8008ce4 <__pow5mult+0xb0>)
 8008c70:	f001 f900 	bl	8009e74 <__assert_func>
 8008c74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c78:	6004      	str	r4, [r0, #0]
 8008c7a:	60c4      	str	r4, [r0, #12]
 8008c7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c84:	b94c      	cbnz	r4, 8008c9a <__pow5mult+0x66>
 8008c86:	f240 2171 	movw	r1, #625	; 0x271
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f7ff ff18 	bl	8008ac0 <__i2b>
 8008c90:	2300      	movs	r3, #0
 8008c92:	4604      	mov	r4, r0
 8008c94:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c98:	6003      	str	r3, [r0, #0]
 8008c9a:	f04f 0900 	mov.w	r9, #0
 8008c9e:	07eb      	lsls	r3, r5, #31
 8008ca0:	d50a      	bpl.n	8008cb8 <__pow5mult+0x84>
 8008ca2:	4639      	mov	r1, r7
 8008ca4:	4622      	mov	r2, r4
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f7ff ff20 	bl	8008aec <__multiply>
 8008cac:	4680      	mov	r8, r0
 8008cae:	4639      	mov	r1, r7
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f7ff fe01 	bl	80088b8 <_Bfree>
 8008cb6:	4647      	mov	r7, r8
 8008cb8:	106d      	asrs	r5, r5, #1
 8008cba:	d00b      	beq.n	8008cd4 <__pow5mult+0xa0>
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	b938      	cbnz	r0, 8008cd0 <__pow5mult+0x9c>
 8008cc0:	4622      	mov	r2, r4
 8008cc2:	4621      	mov	r1, r4
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f7ff ff11 	bl	8008aec <__multiply>
 8008cca:	6020      	str	r0, [r4, #0]
 8008ccc:	f8c0 9000 	str.w	r9, [r0]
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	e7e4      	b.n	8008c9e <__pow5mult+0x6a>
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cda:	bf00      	nop
 8008cdc:	0800af98 	.word	0x0800af98
 8008ce0:	0800ad3e 	.word	0x0800ad3e
 8008ce4:	0800ae44 	.word	0x0800ae44

08008ce8 <__lshift>:
 8008ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cec:	460c      	mov	r4, r1
 8008cee:	4607      	mov	r7, r0
 8008cf0:	4691      	mov	r9, r2
 8008cf2:	6923      	ldr	r3, [r4, #16]
 8008cf4:	6849      	ldr	r1, [r1, #4]
 8008cf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cfa:	68a3      	ldr	r3, [r4, #8]
 8008cfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d00:	f108 0601 	add.w	r6, r8, #1
 8008d04:	42b3      	cmp	r3, r6
 8008d06:	db0b      	blt.n	8008d20 <__lshift+0x38>
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f7ff fd95 	bl	8008838 <_Balloc>
 8008d0e:	4605      	mov	r5, r0
 8008d10:	b948      	cbnz	r0, 8008d26 <__lshift+0x3e>
 8008d12:	4602      	mov	r2, r0
 8008d14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d18:	4b27      	ldr	r3, [pc, #156]	; (8008db8 <__lshift+0xd0>)
 8008d1a:	4828      	ldr	r0, [pc, #160]	; (8008dbc <__lshift+0xd4>)
 8008d1c:	f001 f8aa 	bl	8009e74 <__assert_func>
 8008d20:	3101      	adds	r1, #1
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	e7ee      	b.n	8008d04 <__lshift+0x1c>
 8008d26:	2300      	movs	r3, #0
 8008d28:	f100 0114 	add.w	r1, r0, #20
 8008d2c:	f100 0210 	add.w	r2, r0, #16
 8008d30:	4618      	mov	r0, r3
 8008d32:	4553      	cmp	r3, sl
 8008d34:	db33      	blt.n	8008d9e <__lshift+0xb6>
 8008d36:	6920      	ldr	r0, [r4, #16]
 8008d38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d3c:	f104 0314 	add.w	r3, r4, #20
 8008d40:	f019 091f 	ands.w	r9, r9, #31
 8008d44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d4c:	d02b      	beq.n	8008da6 <__lshift+0xbe>
 8008d4e:	468a      	mov	sl, r1
 8008d50:	2200      	movs	r2, #0
 8008d52:	f1c9 0e20 	rsb	lr, r9, #32
 8008d56:	6818      	ldr	r0, [r3, #0]
 8008d58:	fa00 f009 	lsl.w	r0, r0, r9
 8008d5c:	4302      	orrs	r2, r0
 8008d5e:	f84a 2b04 	str.w	r2, [sl], #4
 8008d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d66:	459c      	cmp	ip, r3
 8008d68:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d6c:	d8f3      	bhi.n	8008d56 <__lshift+0x6e>
 8008d6e:	ebac 0304 	sub.w	r3, ip, r4
 8008d72:	3b15      	subs	r3, #21
 8008d74:	f023 0303 	bic.w	r3, r3, #3
 8008d78:	3304      	adds	r3, #4
 8008d7a:	f104 0015 	add.w	r0, r4, #21
 8008d7e:	4584      	cmp	ip, r0
 8008d80:	bf38      	it	cc
 8008d82:	2304      	movcc	r3, #4
 8008d84:	50ca      	str	r2, [r1, r3]
 8008d86:	b10a      	cbz	r2, 8008d8c <__lshift+0xa4>
 8008d88:	f108 0602 	add.w	r6, r8, #2
 8008d8c:	3e01      	subs	r6, #1
 8008d8e:	4638      	mov	r0, r7
 8008d90:	4621      	mov	r1, r4
 8008d92:	612e      	str	r6, [r5, #16]
 8008d94:	f7ff fd90 	bl	80088b8 <_Bfree>
 8008d98:	4628      	mov	r0, r5
 8008d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008da2:	3301      	adds	r3, #1
 8008da4:	e7c5      	b.n	8008d32 <__lshift+0x4a>
 8008da6:	3904      	subs	r1, #4
 8008da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dac:	459c      	cmp	ip, r3
 8008dae:	f841 2f04 	str.w	r2, [r1, #4]!
 8008db2:	d8f9      	bhi.n	8008da8 <__lshift+0xc0>
 8008db4:	e7ea      	b.n	8008d8c <__lshift+0xa4>
 8008db6:	bf00      	nop
 8008db8:	0800adb4 	.word	0x0800adb4
 8008dbc:	0800ae44 	.word	0x0800ae44

08008dc0 <__mcmp>:
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	690a      	ldr	r2, [r1, #16]
 8008dc4:	6900      	ldr	r0, [r0, #16]
 8008dc6:	b530      	push	{r4, r5, lr}
 8008dc8:	1a80      	subs	r0, r0, r2
 8008dca:	d10d      	bne.n	8008de8 <__mcmp+0x28>
 8008dcc:	3314      	adds	r3, #20
 8008dce:	3114      	adds	r1, #20
 8008dd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008dd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008dd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ddc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008de0:	4295      	cmp	r5, r2
 8008de2:	d002      	beq.n	8008dea <__mcmp+0x2a>
 8008de4:	d304      	bcc.n	8008df0 <__mcmp+0x30>
 8008de6:	2001      	movs	r0, #1
 8008de8:	bd30      	pop	{r4, r5, pc}
 8008dea:	42a3      	cmp	r3, r4
 8008dec:	d3f4      	bcc.n	8008dd8 <__mcmp+0x18>
 8008dee:	e7fb      	b.n	8008de8 <__mcmp+0x28>
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	e7f8      	b.n	8008de8 <__mcmp+0x28>
	...

08008df8 <__mdiff>:
 8008df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	4606      	mov	r6, r0
 8008e00:	4611      	mov	r1, r2
 8008e02:	4620      	mov	r0, r4
 8008e04:	4692      	mov	sl, r2
 8008e06:	f7ff ffdb 	bl	8008dc0 <__mcmp>
 8008e0a:	1e05      	subs	r5, r0, #0
 8008e0c:	d111      	bne.n	8008e32 <__mdiff+0x3a>
 8008e0e:	4629      	mov	r1, r5
 8008e10:	4630      	mov	r0, r6
 8008e12:	f7ff fd11 	bl	8008838 <_Balloc>
 8008e16:	4602      	mov	r2, r0
 8008e18:	b928      	cbnz	r0, 8008e26 <__mdiff+0x2e>
 8008e1a:	f240 2132 	movw	r1, #562	; 0x232
 8008e1e:	4b3c      	ldr	r3, [pc, #240]	; (8008f10 <__mdiff+0x118>)
 8008e20:	483c      	ldr	r0, [pc, #240]	; (8008f14 <__mdiff+0x11c>)
 8008e22:	f001 f827 	bl	8009e74 <__assert_func>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e32:	bfa4      	itt	ge
 8008e34:	4653      	movge	r3, sl
 8008e36:	46a2      	movge	sl, r4
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008e3e:	bfa6      	itte	ge
 8008e40:	461c      	movge	r4, r3
 8008e42:	2500      	movge	r5, #0
 8008e44:	2501      	movlt	r5, #1
 8008e46:	f7ff fcf7 	bl	8008838 <_Balloc>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	b918      	cbnz	r0, 8008e56 <__mdiff+0x5e>
 8008e4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e52:	4b2f      	ldr	r3, [pc, #188]	; (8008f10 <__mdiff+0x118>)
 8008e54:	e7e4      	b.n	8008e20 <__mdiff+0x28>
 8008e56:	f100 0814 	add.w	r8, r0, #20
 8008e5a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008e5e:	60c5      	str	r5, [r0, #12]
 8008e60:	f04f 0c00 	mov.w	ip, #0
 8008e64:	f10a 0514 	add.w	r5, sl, #20
 8008e68:	f10a 0010 	add.w	r0, sl, #16
 8008e6c:	46c2      	mov	sl, r8
 8008e6e:	6926      	ldr	r6, [r4, #16]
 8008e70:	f104 0914 	add.w	r9, r4, #20
 8008e74:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008e78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e7c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008e80:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e84:	fa1f f18b 	uxth.w	r1, fp
 8008e88:	4461      	add	r1, ip
 8008e8a:	fa1f fc83 	uxth.w	ip, r3
 8008e8e:	0c1b      	lsrs	r3, r3, #16
 8008e90:	eba1 010c 	sub.w	r1, r1, ip
 8008e94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e98:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008e9c:	b289      	uxth	r1, r1
 8008e9e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008ea2:	454e      	cmp	r6, r9
 8008ea4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008ea8:	f84a 3b04 	str.w	r3, [sl], #4
 8008eac:	d8e6      	bhi.n	8008e7c <__mdiff+0x84>
 8008eae:	1b33      	subs	r3, r6, r4
 8008eb0:	3b15      	subs	r3, #21
 8008eb2:	f023 0303 	bic.w	r3, r3, #3
 8008eb6:	3415      	adds	r4, #21
 8008eb8:	3304      	adds	r3, #4
 8008eba:	42a6      	cmp	r6, r4
 8008ebc:	bf38      	it	cc
 8008ebe:	2304      	movcc	r3, #4
 8008ec0:	441d      	add	r5, r3
 8008ec2:	4443      	add	r3, r8
 8008ec4:	461e      	mov	r6, r3
 8008ec6:	462c      	mov	r4, r5
 8008ec8:	4574      	cmp	r4, lr
 8008eca:	d30e      	bcc.n	8008eea <__mdiff+0xf2>
 8008ecc:	f10e 0103 	add.w	r1, lr, #3
 8008ed0:	1b49      	subs	r1, r1, r5
 8008ed2:	f021 0103 	bic.w	r1, r1, #3
 8008ed6:	3d03      	subs	r5, #3
 8008ed8:	45ae      	cmp	lr, r5
 8008eda:	bf38      	it	cc
 8008edc:	2100      	movcc	r1, #0
 8008ede:	4419      	add	r1, r3
 8008ee0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008ee4:	b18b      	cbz	r3, 8008f0a <__mdiff+0x112>
 8008ee6:	6117      	str	r7, [r2, #16]
 8008ee8:	e7a0      	b.n	8008e2c <__mdiff+0x34>
 8008eea:	f854 8b04 	ldr.w	r8, [r4], #4
 8008eee:	fa1f f188 	uxth.w	r1, r8
 8008ef2:	4461      	add	r1, ip
 8008ef4:	1408      	asrs	r0, r1, #16
 8008ef6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008efa:	b289      	uxth	r1, r1
 8008efc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f04:	f846 1b04 	str.w	r1, [r6], #4
 8008f08:	e7de      	b.n	8008ec8 <__mdiff+0xd0>
 8008f0a:	3f01      	subs	r7, #1
 8008f0c:	e7e8      	b.n	8008ee0 <__mdiff+0xe8>
 8008f0e:	bf00      	nop
 8008f10:	0800adb4 	.word	0x0800adb4
 8008f14:	0800ae44 	.word	0x0800ae44

08008f18 <__ulp>:
 8008f18:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <__ulp+0x48>)
 8008f1a:	400b      	ands	r3, r1
 8008f1c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	dd02      	ble.n	8008f2a <__ulp+0x12>
 8008f24:	2000      	movs	r0, #0
 8008f26:	4619      	mov	r1, r3
 8008f28:	4770      	bx	lr
 8008f2a:	425b      	negs	r3, r3
 8008f2c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008f30:	f04f 0000 	mov.w	r0, #0
 8008f34:	f04f 0100 	mov.w	r1, #0
 8008f38:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f3c:	da04      	bge.n	8008f48 <__ulp+0x30>
 8008f3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008f42:	fa43 f102 	asr.w	r1, r3, r2
 8008f46:	4770      	bx	lr
 8008f48:	f1a2 0314 	sub.w	r3, r2, #20
 8008f4c:	2b1e      	cmp	r3, #30
 8008f4e:	bfd6      	itet	le
 8008f50:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008f54:	2301      	movgt	r3, #1
 8008f56:	fa22 f303 	lsrle.w	r3, r2, r3
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	7ff00000 	.word	0x7ff00000

08008f64 <__b2d>:
 8008f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f68:	6907      	ldr	r7, [r0, #16]
 8008f6a:	f100 0914 	add.w	r9, r0, #20
 8008f6e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008f72:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008f76:	f1a7 0804 	sub.w	r8, r7, #4
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f7ff fd52 	bl	8008a24 <__hi0bits>
 8008f80:	f1c0 0320 	rsb	r3, r0, #32
 8008f84:	280a      	cmp	r0, #10
 8008f86:	600b      	str	r3, [r1, #0]
 8008f88:	491f      	ldr	r1, [pc, #124]	; (8009008 <__b2d+0xa4>)
 8008f8a:	dc17      	bgt.n	8008fbc <__b2d+0x58>
 8008f8c:	45c1      	cmp	r9, r8
 8008f8e:	bf28      	it	cs
 8008f90:	2200      	movcs	r2, #0
 8008f92:	f1c0 0c0b 	rsb	ip, r0, #11
 8008f96:	fa26 f30c 	lsr.w	r3, r6, ip
 8008f9a:	bf38      	it	cc
 8008f9c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008fa0:	ea43 0501 	orr.w	r5, r3, r1
 8008fa4:	f100 0315 	add.w	r3, r0, #21
 8008fa8:	fa06 f303 	lsl.w	r3, r6, r3
 8008fac:	fa22 f20c 	lsr.w	r2, r2, ip
 8008fb0:	ea43 0402 	orr.w	r4, r3, r2
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fbc:	45c1      	cmp	r9, r8
 8008fbe:	bf2e      	itee	cs
 8008fc0:	2200      	movcs	r2, #0
 8008fc2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008fc6:	f1a7 0808 	subcc.w	r8, r7, #8
 8008fca:	f1b0 030b 	subs.w	r3, r0, #11
 8008fce:	d016      	beq.n	8008ffe <__b2d+0x9a>
 8008fd0:	f1c3 0720 	rsb	r7, r3, #32
 8008fd4:	fa22 f107 	lsr.w	r1, r2, r7
 8008fd8:	45c8      	cmp	r8, r9
 8008fda:	fa06 f603 	lsl.w	r6, r6, r3
 8008fde:	ea46 0601 	orr.w	r6, r6, r1
 8008fe2:	bf94      	ite	ls
 8008fe4:	2100      	movls	r1, #0
 8008fe6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008fea:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008fee:	fa02 f003 	lsl.w	r0, r2, r3
 8008ff2:	40f9      	lsrs	r1, r7
 8008ff4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008ff8:	ea40 0401 	orr.w	r4, r0, r1
 8008ffc:	e7da      	b.n	8008fb4 <__b2d+0x50>
 8008ffe:	4614      	mov	r4, r2
 8009000:	ea46 0501 	orr.w	r5, r6, r1
 8009004:	e7d6      	b.n	8008fb4 <__b2d+0x50>
 8009006:	bf00      	nop
 8009008:	3ff00000 	.word	0x3ff00000

0800900c <__d2b>:
 800900c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009010:	2101      	movs	r1, #1
 8009012:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009016:	4690      	mov	r8, r2
 8009018:	461d      	mov	r5, r3
 800901a:	f7ff fc0d 	bl	8008838 <_Balloc>
 800901e:	4604      	mov	r4, r0
 8009020:	b930      	cbnz	r0, 8009030 <__d2b+0x24>
 8009022:	4602      	mov	r2, r0
 8009024:	f240 310a 	movw	r1, #778	; 0x30a
 8009028:	4b24      	ldr	r3, [pc, #144]	; (80090bc <__d2b+0xb0>)
 800902a:	4825      	ldr	r0, [pc, #148]	; (80090c0 <__d2b+0xb4>)
 800902c:	f000 ff22 	bl	8009e74 <__assert_func>
 8009030:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009034:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009038:	bb2d      	cbnz	r5, 8009086 <__d2b+0x7a>
 800903a:	9301      	str	r3, [sp, #4]
 800903c:	f1b8 0300 	subs.w	r3, r8, #0
 8009040:	d026      	beq.n	8009090 <__d2b+0x84>
 8009042:	4668      	mov	r0, sp
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	f7ff fd0d 	bl	8008a64 <__lo0bits>
 800904a:	9900      	ldr	r1, [sp, #0]
 800904c:	b1f0      	cbz	r0, 800908c <__d2b+0x80>
 800904e:	9a01      	ldr	r2, [sp, #4]
 8009050:	f1c0 0320 	rsb	r3, r0, #32
 8009054:	fa02 f303 	lsl.w	r3, r2, r3
 8009058:	430b      	orrs	r3, r1
 800905a:	40c2      	lsrs	r2, r0
 800905c:	6163      	str	r3, [r4, #20]
 800905e:	9201      	str	r2, [sp, #4]
 8009060:	9b01      	ldr	r3, [sp, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	bf14      	ite	ne
 8009066:	2102      	movne	r1, #2
 8009068:	2101      	moveq	r1, #1
 800906a:	61a3      	str	r3, [r4, #24]
 800906c:	6121      	str	r1, [r4, #16]
 800906e:	b1c5      	cbz	r5, 80090a2 <__d2b+0x96>
 8009070:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009074:	4405      	add	r5, r0
 8009076:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800907a:	603d      	str	r5, [r7, #0]
 800907c:	6030      	str	r0, [r6, #0]
 800907e:	4620      	mov	r0, r4
 8009080:	b002      	add	sp, #8
 8009082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800908a:	e7d6      	b.n	800903a <__d2b+0x2e>
 800908c:	6161      	str	r1, [r4, #20]
 800908e:	e7e7      	b.n	8009060 <__d2b+0x54>
 8009090:	a801      	add	r0, sp, #4
 8009092:	f7ff fce7 	bl	8008a64 <__lo0bits>
 8009096:	2101      	movs	r1, #1
 8009098:	9b01      	ldr	r3, [sp, #4]
 800909a:	6121      	str	r1, [r4, #16]
 800909c:	6163      	str	r3, [r4, #20]
 800909e:	3020      	adds	r0, #32
 80090a0:	e7e5      	b.n	800906e <__d2b+0x62>
 80090a2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80090a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090aa:	6038      	str	r0, [r7, #0]
 80090ac:	6918      	ldr	r0, [r3, #16]
 80090ae:	f7ff fcb9 	bl	8008a24 <__hi0bits>
 80090b2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80090b6:	6031      	str	r1, [r6, #0]
 80090b8:	e7e1      	b.n	800907e <__d2b+0x72>
 80090ba:	bf00      	nop
 80090bc:	0800adb4 	.word	0x0800adb4
 80090c0:	0800ae44 	.word	0x0800ae44

080090c4 <__ratio>:
 80090c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	4688      	mov	r8, r1
 80090ca:	4669      	mov	r1, sp
 80090cc:	4681      	mov	r9, r0
 80090ce:	f7ff ff49 	bl	8008f64 <__b2d>
 80090d2:	460f      	mov	r7, r1
 80090d4:	4604      	mov	r4, r0
 80090d6:	460d      	mov	r5, r1
 80090d8:	4640      	mov	r0, r8
 80090da:	a901      	add	r1, sp, #4
 80090dc:	f7ff ff42 	bl	8008f64 <__b2d>
 80090e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090e4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80090e8:	468b      	mov	fp, r1
 80090ea:	eba3 0c02 	sub.w	ip, r3, r2
 80090ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80090f2:	1a9b      	subs	r3, r3, r2
 80090f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	bfd5      	itete	le
 80090fc:	460a      	movle	r2, r1
 80090fe:	462a      	movgt	r2, r5
 8009100:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009104:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009108:	bfd8      	it	le
 800910a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800910e:	465b      	mov	r3, fp
 8009110:	4602      	mov	r2, r0
 8009112:	4639      	mov	r1, r7
 8009114:	4620      	mov	r0, r4
 8009116:	f7f7 fb75 	bl	8000804 <__aeabi_ddiv>
 800911a:	b003      	add	sp, #12
 800911c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009120 <__copybits>:
 8009120:	3901      	subs	r1, #1
 8009122:	b570      	push	{r4, r5, r6, lr}
 8009124:	1149      	asrs	r1, r1, #5
 8009126:	6914      	ldr	r4, [r2, #16]
 8009128:	3101      	adds	r1, #1
 800912a:	f102 0314 	add.w	r3, r2, #20
 800912e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009132:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009136:	1f05      	subs	r5, r0, #4
 8009138:	42a3      	cmp	r3, r4
 800913a:	d30c      	bcc.n	8009156 <__copybits+0x36>
 800913c:	1aa3      	subs	r3, r4, r2
 800913e:	3b11      	subs	r3, #17
 8009140:	f023 0303 	bic.w	r3, r3, #3
 8009144:	3211      	adds	r2, #17
 8009146:	42a2      	cmp	r2, r4
 8009148:	bf88      	it	hi
 800914a:	2300      	movhi	r3, #0
 800914c:	4418      	add	r0, r3
 800914e:	2300      	movs	r3, #0
 8009150:	4288      	cmp	r0, r1
 8009152:	d305      	bcc.n	8009160 <__copybits+0x40>
 8009154:	bd70      	pop	{r4, r5, r6, pc}
 8009156:	f853 6b04 	ldr.w	r6, [r3], #4
 800915a:	f845 6f04 	str.w	r6, [r5, #4]!
 800915e:	e7eb      	b.n	8009138 <__copybits+0x18>
 8009160:	f840 3b04 	str.w	r3, [r0], #4
 8009164:	e7f4      	b.n	8009150 <__copybits+0x30>

08009166 <__any_on>:
 8009166:	f100 0214 	add.w	r2, r0, #20
 800916a:	6900      	ldr	r0, [r0, #16]
 800916c:	114b      	asrs	r3, r1, #5
 800916e:	4298      	cmp	r0, r3
 8009170:	b510      	push	{r4, lr}
 8009172:	db11      	blt.n	8009198 <__any_on+0x32>
 8009174:	dd0a      	ble.n	800918c <__any_on+0x26>
 8009176:	f011 011f 	ands.w	r1, r1, #31
 800917a:	d007      	beq.n	800918c <__any_on+0x26>
 800917c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009180:	fa24 f001 	lsr.w	r0, r4, r1
 8009184:	fa00 f101 	lsl.w	r1, r0, r1
 8009188:	428c      	cmp	r4, r1
 800918a:	d10b      	bne.n	80091a4 <__any_on+0x3e>
 800918c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009190:	4293      	cmp	r3, r2
 8009192:	d803      	bhi.n	800919c <__any_on+0x36>
 8009194:	2000      	movs	r0, #0
 8009196:	bd10      	pop	{r4, pc}
 8009198:	4603      	mov	r3, r0
 800919a:	e7f7      	b.n	800918c <__any_on+0x26>
 800919c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091a0:	2900      	cmp	r1, #0
 80091a2:	d0f5      	beq.n	8009190 <__any_on+0x2a>
 80091a4:	2001      	movs	r0, #1
 80091a6:	e7f6      	b.n	8009196 <__any_on+0x30>

080091a8 <_calloc_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	fb02 f501 	mul.w	r5, r2, r1
 80091ae:	4629      	mov	r1, r5
 80091b0:	f000 f854 	bl	800925c <_malloc_r>
 80091b4:	4604      	mov	r4, r0
 80091b6:	b118      	cbz	r0, 80091c0 <_calloc_r+0x18>
 80091b8:	462a      	mov	r2, r5
 80091ba:	2100      	movs	r1, #0
 80091bc:	f7fc fb04 	bl	80057c8 <memset>
 80091c0:	4620      	mov	r0, r4
 80091c2:	bd38      	pop	{r3, r4, r5, pc}

080091c4 <_free_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4605      	mov	r5, r0
 80091c8:	2900      	cmp	r1, #0
 80091ca:	d043      	beq.n	8009254 <_free_r+0x90>
 80091cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091d0:	1f0c      	subs	r4, r1, #4
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	bfb8      	it	lt
 80091d6:	18e4      	addlt	r4, r4, r3
 80091d8:	f001 f850 	bl	800a27c <__malloc_lock>
 80091dc:	4a1e      	ldr	r2, [pc, #120]	; (8009258 <_free_r+0x94>)
 80091de:	6813      	ldr	r3, [r2, #0]
 80091e0:	4610      	mov	r0, r2
 80091e2:	b933      	cbnz	r3, 80091f2 <_free_r+0x2e>
 80091e4:	6063      	str	r3, [r4, #4]
 80091e6:	6014      	str	r4, [r2, #0]
 80091e8:	4628      	mov	r0, r5
 80091ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ee:	f001 b84b 	b.w	800a288 <__malloc_unlock>
 80091f2:	42a3      	cmp	r3, r4
 80091f4:	d90a      	bls.n	800920c <_free_r+0x48>
 80091f6:	6821      	ldr	r1, [r4, #0]
 80091f8:	1862      	adds	r2, r4, r1
 80091fa:	4293      	cmp	r3, r2
 80091fc:	bf01      	itttt	eq
 80091fe:	681a      	ldreq	r2, [r3, #0]
 8009200:	685b      	ldreq	r3, [r3, #4]
 8009202:	1852      	addeq	r2, r2, r1
 8009204:	6022      	streq	r2, [r4, #0]
 8009206:	6063      	str	r3, [r4, #4]
 8009208:	6004      	str	r4, [r0, #0]
 800920a:	e7ed      	b.n	80091e8 <_free_r+0x24>
 800920c:	461a      	mov	r2, r3
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	b10b      	cbz	r3, 8009216 <_free_r+0x52>
 8009212:	42a3      	cmp	r3, r4
 8009214:	d9fa      	bls.n	800920c <_free_r+0x48>
 8009216:	6811      	ldr	r1, [r2, #0]
 8009218:	1850      	adds	r0, r2, r1
 800921a:	42a0      	cmp	r0, r4
 800921c:	d10b      	bne.n	8009236 <_free_r+0x72>
 800921e:	6820      	ldr	r0, [r4, #0]
 8009220:	4401      	add	r1, r0
 8009222:	1850      	adds	r0, r2, r1
 8009224:	4283      	cmp	r3, r0
 8009226:	6011      	str	r1, [r2, #0]
 8009228:	d1de      	bne.n	80091e8 <_free_r+0x24>
 800922a:	6818      	ldr	r0, [r3, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	4401      	add	r1, r0
 8009230:	6011      	str	r1, [r2, #0]
 8009232:	6053      	str	r3, [r2, #4]
 8009234:	e7d8      	b.n	80091e8 <_free_r+0x24>
 8009236:	d902      	bls.n	800923e <_free_r+0x7a>
 8009238:	230c      	movs	r3, #12
 800923a:	602b      	str	r3, [r5, #0]
 800923c:	e7d4      	b.n	80091e8 <_free_r+0x24>
 800923e:	6820      	ldr	r0, [r4, #0]
 8009240:	1821      	adds	r1, r4, r0
 8009242:	428b      	cmp	r3, r1
 8009244:	bf01      	itttt	eq
 8009246:	6819      	ldreq	r1, [r3, #0]
 8009248:	685b      	ldreq	r3, [r3, #4]
 800924a:	1809      	addeq	r1, r1, r0
 800924c:	6021      	streq	r1, [r4, #0]
 800924e:	6063      	str	r3, [r4, #4]
 8009250:	6054      	str	r4, [r2, #4]
 8009252:	e7c9      	b.n	80091e8 <_free_r+0x24>
 8009254:	bd38      	pop	{r3, r4, r5, pc}
 8009256:	bf00      	nop
 8009258:	20000200 	.word	0x20000200

0800925c <_malloc_r>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	1ccd      	adds	r5, r1, #3
 8009260:	f025 0503 	bic.w	r5, r5, #3
 8009264:	3508      	adds	r5, #8
 8009266:	2d0c      	cmp	r5, #12
 8009268:	bf38      	it	cc
 800926a:	250c      	movcc	r5, #12
 800926c:	2d00      	cmp	r5, #0
 800926e:	4606      	mov	r6, r0
 8009270:	db01      	blt.n	8009276 <_malloc_r+0x1a>
 8009272:	42a9      	cmp	r1, r5
 8009274:	d903      	bls.n	800927e <_malloc_r+0x22>
 8009276:	230c      	movs	r3, #12
 8009278:	6033      	str	r3, [r6, #0]
 800927a:	2000      	movs	r0, #0
 800927c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800927e:	f000 fffd 	bl	800a27c <__malloc_lock>
 8009282:	4921      	ldr	r1, [pc, #132]	; (8009308 <_malloc_r+0xac>)
 8009284:	680a      	ldr	r2, [r1, #0]
 8009286:	4614      	mov	r4, r2
 8009288:	b99c      	cbnz	r4, 80092b2 <_malloc_r+0x56>
 800928a:	4f20      	ldr	r7, [pc, #128]	; (800930c <_malloc_r+0xb0>)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	b923      	cbnz	r3, 800929a <_malloc_r+0x3e>
 8009290:	4621      	mov	r1, r4
 8009292:	4630      	mov	r0, r6
 8009294:	f000 fcce 	bl	8009c34 <_sbrk_r>
 8009298:	6038      	str	r0, [r7, #0]
 800929a:	4629      	mov	r1, r5
 800929c:	4630      	mov	r0, r6
 800929e:	f000 fcc9 	bl	8009c34 <_sbrk_r>
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	d123      	bne.n	80092ee <_malloc_r+0x92>
 80092a6:	230c      	movs	r3, #12
 80092a8:	4630      	mov	r0, r6
 80092aa:	6033      	str	r3, [r6, #0]
 80092ac:	f000 ffec 	bl	800a288 <__malloc_unlock>
 80092b0:	e7e3      	b.n	800927a <_malloc_r+0x1e>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	1b5b      	subs	r3, r3, r5
 80092b6:	d417      	bmi.n	80092e8 <_malloc_r+0x8c>
 80092b8:	2b0b      	cmp	r3, #11
 80092ba:	d903      	bls.n	80092c4 <_malloc_r+0x68>
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	441c      	add	r4, r3
 80092c0:	6025      	str	r5, [r4, #0]
 80092c2:	e004      	b.n	80092ce <_malloc_r+0x72>
 80092c4:	6863      	ldr	r3, [r4, #4]
 80092c6:	42a2      	cmp	r2, r4
 80092c8:	bf0c      	ite	eq
 80092ca:	600b      	streq	r3, [r1, #0]
 80092cc:	6053      	strne	r3, [r2, #4]
 80092ce:	4630      	mov	r0, r6
 80092d0:	f000 ffda 	bl	800a288 <__malloc_unlock>
 80092d4:	f104 000b 	add.w	r0, r4, #11
 80092d8:	1d23      	adds	r3, r4, #4
 80092da:	f020 0007 	bic.w	r0, r0, #7
 80092de:	1ac2      	subs	r2, r0, r3
 80092e0:	d0cc      	beq.n	800927c <_malloc_r+0x20>
 80092e2:	1a1b      	subs	r3, r3, r0
 80092e4:	50a3      	str	r3, [r4, r2]
 80092e6:	e7c9      	b.n	800927c <_malloc_r+0x20>
 80092e8:	4622      	mov	r2, r4
 80092ea:	6864      	ldr	r4, [r4, #4]
 80092ec:	e7cc      	b.n	8009288 <_malloc_r+0x2c>
 80092ee:	1cc4      	adds	r4, r0, #3
 80092f0:	f024 0403 	bic.w	r4, r4, #3
 80092f4:	42a0      	cmp	r0, r4
 80092f6:	d0e3      	beq.n	80092c0 <_malloc_r+0x64>
 80092f8:	1a21      	subs	r1, r4, r0
 80092fa:	4630      	mov	r0, r6
 80092fc:	f000 fc9a 	bl	8009c34 <_sbrk_r>
 8009300:	3001      	adds	r0, #1
 8009302:	d1dd      	bne.n	80092c0 <_malloc_r+0x64>
 8009304:	e7cf      	b.n	80092a6 <_malloc_r+0x4a>
 8009306:	bf00      	nop
 8009308:	20000200 	.word	0x20000200
 800930c:	20000204 	.word	0x20000204

08009310 <__ssputs_r>:
 8009310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009314:	688e      	ldr	r6, [r1, #8]
 8009316:	4682      	mov	sl, r0
 8009318:	429e      	cmp	r6, r3
 800931a:	460c      	mov	r4, r1
 800931c:	4690      	mov	r8, r2
 800931e:	461f      	mov	r7, r3
 8009320:	d838      	bhi.n	8009394 <__ssputs_r+0x84>
 8009322:	898a      	ldrh	r2, [r1, #12]
 8009324:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009328:	d032      	beq.n	8009390 <__ssputs_r+0x80>
 800932a:	6825      	ldr	r5, [r4, #0]
 800932c:	6909      	ldr	r1, [r1, #16]
 800932e:	3301      	adds	r3, #1
 8009330:	eba5 0901 	sub.w	r9, r5, r1
 8009334:	6965      	ldr	r5, [r4, #20]
 8009336:	444b      	add	r3, r9
 8009338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800933c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009340:	106d      	asrs	r5, r5, #1
 8009342:	429d      	cmp	r5, r3
 8009344:	bf38      	it	cc
 8009346:	461d      	movcc	r5, r3
 8009348:	0553      	lsls	r3, r2, #21
 800934a:	d531      	bpl.n	80093b0 <__ssputs_r+0xa0>
 800934c:	4629      	mov	r1, r5
 800934e:	f7ff ff85 	bl	800925c <_malloc_r>
 8009352:	4606      	mov	r6, r0
 8009354:	b950      	cbnz	r0, 800936c <__ssputs_r+0x5c>
 8009356:	230c      	movs	r3, #12
 8009358:	f04f 30ff 	mov.w	r0, #4294967295
 800935c:	f8ca 3000 	str.w	r3, [sl]
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009366:	81a3      	strh	r3, [r4, #12]
 8009368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936c:	464a      	mov	r2, r9
 800936e:	6921      	ldr	r1, [r4, #16]
 8009370:	f7ff fa54 	bl	800881c <memcpy>
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800937a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800937e:	81a3      	strh	r3, [r4, #12]
 8009380:	6126      	str	r6, [r4, #16]
 8009382:	444e      	add	r6, r9
 8009384:	6026      	str	r6, [r4, #0]
 8009386:	463e      	mov	r6, r7
 8009388:	6165      	str	r5, [r4, #20]
 800938a:	eba5 0509 	sub.w	r5, r5, r9
 800938e:	60a5      	str	r5, [r4, #8]
 8009390:	42be      	cmp	r6, r7
 8009392:	d900      	bls.n	8009396 <__ssputs_r+0x86>
 8009394:	463e      	mov	r6, r7
 8009396:	4632      	mov	r2, r6
 8009398:	4641      	mov	r1, r8
 800939a:	6820      	ldr	r0, [r4, #0]
 800939c:	f000 ff54 	bl	800a248 <memmove>
 80093a0:	68a3      	ldr	r3, [r4, #8]
 80093a2:	6822      	ldr	r2, [r4, #0]
 80093a4:	1b9b      	subs	r3, r3, r6
 80093a6:	4432      	add	r2, r6
 80093a8:	2000      	movs	r0, #0
 80093aa:	60a3      	str	r3, [r4, #8]
 80093ac:	6022      	str	r2, [r4, #0]
 80093ae:	e7db      	b.n	8009368 <__ssputs_r+0x58>
 80093b0:	462a      	mov	r2, r5
 80093b2:	f000 ff6f 	bl	800a294 <_realloc_r>
 80093b6:	4606      	mov	r6, r0
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d1e1      	bne.n	8009380 <__ssputs_r+0x70>
 80093bc:	4650      	mov	r0, sl
 80093be:	6921      	ldr	r1, [r4, #16]
 80093c0:	f7ff ff00 	bl	80091c4 <_free_r>
 80093c4:	e7c7      	b.n	8009356 <__ssputs_r+0x46>
	...

080093c8 <_svfiprintf_r>:
 80093c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	4698      	mov	r8, r3
 80093ce:	898b      	ldrh	r3, [r1, #12]
 80093d0:	4607      	mov	r7, r0
 80093d2:	061b      	lsls	r3, r3, #24
 80093d4:	460d      	mov	r5, r1
 80093d6:	4614      	mov	r4, r2
 80093d8:	b09d      	sub	sp, #116	; 0x74
 80093da:	d50e      	bpl.n	80093fa <_svfiprintf_r+0x32>
 80093dc:	690b      	ldr	r3, [r1, #16]
 80093de:	b963      	cbnz	r3, 80093fa <_svfiprintf_r+0x32>
 80093e0:	2140      	movs	r1, #64	; 0x40
 80093e2:	f7ff ff3b 	bl	800925c <_malloc_r>
 80093e6:	6028      	str	r0, [r5, #0]
 80093e8:	6128      	str	r0, [r5, #16]
 80093ea:	b920      	cbnz	r0, 80093f6 <_svfiprintf_r+0x2e>
 80093ec:	230c      	movs	r3, #12
 80093ee:	603b      	str	r3, [r7, #0]
 80093f0:	f04f 30ff 	mov.w	r0, #4294967295
 80093f4:	e0d1      	b.n	800959a <_svfiprintf_r+0x1d2>
 80093f6:	2340      	movs	r3, #64	; 0x40
 80093f8:	616b      	str	r3, [r5, #20]
 80093fa:	2300      	movs	r3, #0
 80093fc:	9309      	str	r3, [sp, #36]	; 0x24
 80093fe:	2320      	movs	r3, #32
 8009400:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009404:	2330      	movs	r3, #48	; 0x30
 8009406:	f04f 0901 	mov.w	r9, #1
 800940a:	f8cd 800c 	str.w	r8, [sp, #12]
 800940e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80095b4 <_svfiprintf_r+0x1ec>
 8009412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009416:	4623      	mov	r3, r4
 8009418:	469a      	mov	sl, r3
 800941a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800941e:	b10a      	cbz	r2, 8009424 <_svfiprintf_r+0x5c>
 8009420:	2a25      	cmp	r2, #37	; 0x25
 8009422:	d1f9      	bne.n	8009418 <_svfiprintf_r+0x50>
 8009424:	ebba 0b04 	subs.w	fp, sl, r4
 8009428:	d00b      	beq.n	8009442 <_svfiprintf_r+0x7a>
 800942a:	465b      	mov	r3, fp
 800942c:	4622      	mov	r2, r4
 800942e:	4629      	mov	r1, r5
 8009430:	4638      	mov	r0, r7
 8009432:	f7ff ff6d 	bl	8009310 <__ssputs_r>
 8009436:	3001      	adds	r0, #1
 8009438:	f000 80aa 	beq.w	8009590 <_svfiprintf_r+0x1c8>
 800943c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800943e:	445a      	add	r2, fp
 8009440:	9209      	str	r2, [sp, #36]	; 0x24
 8009442:	f89a 3000 	ldrb.w	r3, [sl]
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 80a2 	beq.w	8009590 <_svfiprintf_r+0x1c8>
 800944c:	2300      	movs	r3, #0
 800944e:	f04f 32ff 	mov.w	r2, #4294967295
 8009452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009456:	f10a 0a01 	add.w	sl, sl, #1
 800945a:	9304      	str	r3, [sp, #16]
 800945c:	9307      	str	r3, [sp, #28]
 800945e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009462:	931a      	str	r3, [sp, #104]	; 0x68
 8009464:	4654      	mov	r4, sl
 8009466:	2205      	movs	r2, #5
 8009468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800946c:	4851      	ldr	r0, [pc, #324]	; (80095b4 <_svfiprintf_r+0x1ec>)
 800946e:	f7ff f9c7 	bl	8008800 <memchr>
 8009472:	9a04      	ldr	r2, [sp, #16]
 8009474:	b9d8      	cbnz	r0, 80094ae <_svfiprintf_r+0xe6>
 8009476:	06d0      	lsls	r0, r2, #27
 8009478:	bf44      	itt	mi
 800947a:	2320      	movmi	r3, #32
 800947c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009480:	0711      	lsls	r1, r2, #28
 8009482:	bf44      	itt	mi
 8009484:	232b      	movmi	r3, #43	; 0x2b
 8009486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800948a:	f89a 3000 	ldrb.w	r3, [sl]
 800948e:	2b2a      	cmp	r3, #42	; 0x2a
 8009490:	d015      	beq.n	80094be <_svfiprintf_r+0xf6>
 8009492:	4654      	mov	r4, sl
 8009494:	2000      	movs	r0, #0
 8009496:	f04f 0c0a 	mov.w	ip, #10
 800949a:	9a07      	ldr	r2, [sp, #28]
 800949c:	4621      	mov	r1, r4
 800949e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094a2:	3b30      	subs	r3, #48	; 0x30
 80094a4:	2b09      	cmp	r3, #9
 80094a6:	d94e      	bls.n	8009546 <_svfiprintf_r+0x17e>
 80094a8:	b1b0      	cbz	r0, 80094d8 <_svfiprintf_r+0x110>
 80094aa:	9207      	str	r2, [sp, #28]
 80094ac:	e014      	b.n	80094d8 <_svfiprintf_r+0x110>
 80094ae:	eba0 0308 	sub.w	r3, r0, r8
 80094b2:	fa09 f303 	lsl.w	r3, r9, r3
 80094b6:	4313      	orrs	r3, r2
 80094b8:	46a2      	mov	sl, r4
 80094ba:	9304      	str	r3, [sp, #16]
 80094bc:	e7d2      	b.n	8009464 <_svfiprintf_r+0x9c>
 80094be:	9b03      	ldr	r3, [sp, #12]
 80094c0:	1d19      	adds	r1, r3, #4
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	9103      	str	r1, [sp, #12]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	bfbb      	ittet	lt
 80094ca:	425b      	neglt	r3, r3
 80094cc:	f042 0202 	orrlt.w	r2, r2, #2
 80094d0:	9307      	strge	r3, [sp, #28]
 80094d2:	9307      	strlt	r3, [sp, #28]
 80094d4:	bfb8      	it	lt
 80094d6:	9204      	strlt	r2, [sp, #16]
 80094d8:	7823      	ldrb	r3, [r4, #0]
 80094da:	2b2e      	cmp	r3, #46	; 0x2e
 80094dc:	d10c      	bne.n	80094f8 <_svfiprintf_r+0x130>
 80094de:	7863      	ldrb	r3, [r4, #1]
 80094e0:	2b2a      	cmp	r3, #42	; 0x2a
 80094e2:	d135      	bne.n	8009550 <_svfiprintf_r+0x188>
 80094e4:	9b03      	ldr	r3, [sp, #12]
 80094e6:	3402      	adds	r4, #2
 80094e8:	1d1a      	adds	r2, r3, #4
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	9203      	str	r2, [sp, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	bfb8      	it	lt
 80094f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80094f6:	9305      	str	r3, [sp, #20]
 80094f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095c4 <_svfiprintf_r+0x1fc>
 80094fc:	2203      	movs	r2, #3
 80094fe:	4650      	mov	r0, sl
 8009500:	7821      	ldrb	r1, [r4, #0]
 8009502:	f7ff f97d 	bl	8008800 <memchr>
 8009506:	b140      	cbz	r0, 800951a <_svfiprintf_r+0x152>
 8009508:	2340      	movs	r3, #64	; 0x40
 800950a:	eba0 000a 	sub.w	r0, r0, sl
 800950e:	fa03 f000 	lsl.w	r0, r3, r0
 8009512:	9b04      	ldr	r3, [sp, #16]
 8009514:	3401      	adds	r4, #1
 8009516:	4303      	orrs	r3, r0
 8009518:	9304      	str	r3, [sp, #16]
 800951a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800951e:	2206      	movs	r2, #6
 8009520:	4825      	ldr	r0, [pc, #148]	; (80095b8 <_svfiprintf_r+0x1f0>)
 8009522:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009526:	f7ff f96b 	bl	8008800 <memchr>
 800952a:	2800      	cmp	r0, #0
 800952c:	d038      	beq.n	80095a0 <_svfiprintf_r+0x1d8>
 800952e:	4b23      	ldr	r3, [pc, #140]	; (80095bc <_svfiprintf_r+0x1f4>)
 8009530:	bb1b      	cbnz	r3, 800957a <_svfiprintf_r+0x1b2>
 8009532:	9b03      	ldr	r3, [sp, #12]
 8009534:	3307      	adds	r3, #7
 8009536:	f023 0307 	bic.w	r3, r3, #7
 800953a:	3308      	adds	r3, #8
 800953c:	9303      	str	r3, [sp, #12]
 800953e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009540:	4433      	add	r3, r6
 8009542:	9309      	str	r3, [sp, #36]	; 0x24
 8009544:	e767      	b.n	8009416 <_svfiprintf_r+0x4e>
 8009546:	460c      	mov	r4, r1
 8009548:	2001      	movs	r0, #1
 800954a:	fb0c 3202 	mla	r2, ip, r2, r3
 800954e:	e7a5      	b.n	800949c <_svfiprintf_r+0xd4>
 8009550:	2300      	movs	r3, #0
 8009552:	f04f 0c0a 	mov.w	ip, #10
 8009556:	4619      	mov	r1, r3
 8009558:	3401      	adds	r4, #1
 800955a:	9305      	str	r3, [sp, #20]
 800955c:	4620      	mov	r0, r4
 800955e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009562:	3a30      	subs	r2, #48	; 0x30
 8009564:	2a09      	cmp	r2, #9
 8009566:	d903      	bls.n	8009570 <_svfiprintf_r+0x1a8>
 8009568:	2b00      	cmp	r3, #0
 800956a:	d0c5      	beq.n	80094f8 <_svfiprintf_r+0x130>
 800956c:	9105      	str	r1, [sp, #20]
 800956e:	e7c3      	b.n	80094f8 <_svfiprintf_r+0x130>
 8009570:	4604      	mov	r4, r0
 8009572:	2301      	movs	r3, #1
 8009574:	fb0c 2101 	mla	r1, ip, r1, r2
 8009578:	e7f0      	b.n	800955c <_svfiprintf_r+0x194>
 800957a:	ab03      	add	r3, sp, #12
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	462a      	mov	r2, r5
 8009580:	4638      	mov	r0, r7
 8009582:	4b0f      	ldr	r3, [pc, #60]	; (80095c0 <_svfiprintf_r+0x1f8>)
 8009584:	a904      	add	r1, sp, #16
 8009586:	f7fc f9c5 	bl	8005914 <_printf_float>
 800958a:	1c42      	adds	r2, r0, #1
 800958c:	4606      	mov	r6, r0
 800958e:	d1d6      	bne.n	800953e <_svfiprintf_r+0x176>
 8009590:	89ab      	ldrh	r3, [r5, #12]
 8009592:	065b      	lsls	r3, r3, #25
 8009594:	f53f af2c 	bmi.w	80093f0 <_svfiprintf_r+0x28>
 8009598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800959a:	b01d      	add	sp, #116	; 0x74
 800959c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a0:	ab03      	add	r3, sp, #12
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	462a      	mov	r2, r5
 80095a6:	4638      	mov	r0, r7
 80095a8:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <_svfiprintf_r+0x1f8>)
 80095aa:	a904      	add	r1, sp, #16
 80095ac:	f7fc fc4e 	bl	8005e4c <_printf_i>
 80095b0:	e7eb      	b.n	800958a <_svfiprintf_r+0x1c2>
 80095b2:	bf00      	nop
 80095b4:	0800afa4 	.word	0x0800afa4
 80095b8:	0800afae 	.word	0x0800afae
 80095bc:	08005915 	.word	0x08005915
 80095c0:	08009311 	.word	0x08009311
 80095c4:	0800afaa 	.word	0x0800afaa

080095c8 <_sungetc_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	1c4b      	adds	r3, r1, #1
 80095cc:	4614      	mov	r4, r2
 80095ce:	d103      	bne.n	80095d8 <_sungetc_r+0x10>
 80095d0:	f04f 35ff 	mov.w	r5, #4294967295
 80095d4:	4628      	mov	r0, r5
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	8993      	ldrh	r3, [r2, #12]
 80095da:	b2cd      	uxtb	r5, r1
 80095dc:	f023 0320 	bic.w	r3, r3, #32
 80095e0:	8193      	strh	r3, [r2, #12]
 80095e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095e4:	6852      	ldr	r2, [r2, #4]
 80095e6:	b18b      	cbz	r3, 800960c <_sungetc_r+0x44>
 80095e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80095ea:	4293      	cmp	r3, r2
 80095ec:	dd08      	ble.n	8009600 <_sungetc_r+0x38>
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	1e5a      	subs	r2, r3, #1
 80095f2:	6022      	str	r2, [r4, #0]
 80095f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80095f8:	6863      	ldr	r3, [r4, #4]
 80095fa:	3301      	adds	r3, #1
 80095fc:	6063      	str	r3, [r4, #4]
 80095fe:	e7e9      	b.n	80095d4 <_sungetc_r+0xc>
 8009600:	4621      	mov	r1, r4
 8009602:	f000 fbf1 	bl	8009de8 <__submore>
 8009606:	2800      	cmp	r0, #0
 8009608:	d0f1      	beq.n	80095ee <_sungetc_r+0x26>
 800960a:	e7e1      	b.n	80095d0 <_sungetc_r+0x8>
 800960c:	6921      	ldr	r1, [r4, #16]
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	b151      	cbz	r1, 8009628 <_sungetc_r+0x60>
 8009612:	4299      	cmp	r1, r3
 8009614:	d208      	bcs.n	8009628 <_sungetc_r+0x60>
 8009616:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800961a:	42a9      	cmp	r1, r5
 800961c:	d104      	bne.n	8009628 <_sungetc_r+0x60>
 800961e:	3b01      	subs	r3, #1
 8009620:	3201      	adds	r2, #1
 8009622:	6023      	str	r3, [r4, #0]
 8009624:	6062      	str	r2, [r4, #4]
 8009626:	e7d5      	b.n	80095d4 <_sungetc_r+0xc>
 8009628:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800962c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009630:	6363      	str	r3, [r4, #52]	; 0x34
 8009632:	2303      	movs	r3, #3
 8009634:	63a3      	str	r3, [r4, #56]	; 0x38
 8009636:	4623      	mov	r3, r4
 8009638:	f803 5f46 	strb.w	r5, [r3, #70]!
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	2301      	movs	r3, #1
 8009640:	e7dc      	b.n	80095fc <_sungetc_r+0x34>

08009642 <__ssrefill_r>:
 8009642:	b510      	push	{r4, lr}
 8009644:	460c      	mov	r4, r1
 8009646:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009648:	b169      	cbz	r1, 8009666 <__ssrefill_r+0x24>
 800964a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800964e:	4299      	cmp	r1, r3
 8009650:	d001      	beq.n	8009656 <__ssrefill_r+0x14>
 8009652:	f7ff fdb7 	bl	80091c4 <_free_r>
 8009656:	2000      	movs	r0, #0
 8009658:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800965a:	6360      	str	r0, [r4, #52]	; 0x34
 800965c:	6063      	str	r3, [r4, #4]
 800965e:	b113      	cbz	r3, 8009666 <__ssrefill_r+0x24>
 8009660:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009662:	6023      	str	r3, [r4, #0]
 8009664:	bd10      	pop	{r4, pc}
 8009666:	6923      	ldr	r3, [r4, #16]
 8009668:	f04f 30ff 	mov.w	r0, #4294967295
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	2300      	movs	r3, #0
 8009670:	6063      	str	r3, [r4, #4]
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	f043 0320 	orr.w	r3, r3, #32
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	e7f3      	b.n	8009664 <__ssrefill_r+0x22>

0800967c <__ssvfiscanf_r>:
 800967c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009680:	460c      	mov	r4, r1
 8009682:	2100      	movs	r1, #0
 8009684:	4606      	mov	r6, r0
 8009686:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800968a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800968e:	49b3      	ldr	r1, [pc, #716]	; (800995c <__ssvfiscanf_r+0x2e0>)
 8009690:	f10d 0804 	add.w	r8, sp, #4
 8009694:	91a0      	str	r1, [sp, #640]	; 0x280
 8009696:	49b2      	ldr	r1, [pc, #712]	; (8009960 <__ssvfiscanf_r+0x2e4>)
 8009698:	4fb2      	ldr	r7, [pc, #712]	; (8009964 <__ssvfiscanf_r+0x2e8>)
 800969a:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8009968 <__ssvfiscanf_r+0x2ec>
 800969e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80096a2:	91a1      	str	r1, [sp, #644]	; 0x284
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	f892 a000 	ldrb.w	sl, [r2]
 80096aa:	f1ba 0f00 	cmp.w	sl, #0
 80096ae:	f000 8153 	beq.w	8009958 <__ssvfiscanf_r+0x2dc>
 80096b2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80096b6:	1c55      	adds	r5, r2, #1
 80096b8:	f013 0308 	ands.w	r3, r3, #8
 80096bc:	d019      	beq.n	80096f2 <__ssvfiscanf_r+0x76>
 80096be:	6863      	ldr	r3, [r4, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dd0f      	ble.n	80096e4 <__ssvfiscanf_r+0x68>
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	781a      	ldrb	r2, [r3, #0]
 80096c8:	5cba      	ldrb	r2, [r7, r2]
 80096ca:	0712      	lsls	r2, r2, #28
 80096cc:	d401      	bmi.n	80096d2 <__ssvfiscanf_r+0x56>
 80096ce:	462a      	mov	r2, r5
 80096d0:	e7e9      	b.n	80096a6 <__ssvfiscanf_r+0x2a>
 80096d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80096d4:	3301      	adds	r3, #1
 80096d6:	3201      	adds	r2, #1
 80096d8:	9245      	str	r2, [sp, #276]	; 0x114
 80096da:	6862      	ldr	r2, [r4, #4]
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	3a01      	subs	r2, #1
 80096e0:	6062      	str	r2, [r4, #4]
 80096e2:	e7ec      	b.n	80096be <__ssvfiscanf_r+0x42>
 80096e4:	4621      	mov	r1, r4
 80096e6:	4630      	mov	r0, r6
 80096e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80096ea:	4798      	blx	r3
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d0e9      	beq.n	80096c4 <__ssvfiscanf_r+0x48>
 80096f0:	e7ed      	b.n	80096ce <__ssvfiscanf_r+0x52>
 80096f2:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80096f6:	f040 8086 	bne.w	8009806 <__ssvfiscanf_r+0x18a>
 80096fa:	9341      	str	r3, [sp, #260]	; 0x104
 80096fc:	9343      	str	r3, [sp, #268]	; 0x10c
 80096fe:	7853      	ldrb	r3, [r2, #1]
 8009700:	2b2a      	cmp	r3, #42	; 0x2a
 8009702:	bf04      	itt	eq
 8009704:	2310      	moveq	r3, #16
 8009706:	1c95      	addeq	r5, r2, #2
 8009708:	f04f 020a 	mov.w	r2, #10
 800970c:	bf08      	it	eq
 800970e:	9341      	streq	r3, [sp, #260]	; 0x104
 8009710:	46ab      	mov	fp, r5
 8009712:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8009716:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800971a:	2b09      	cmp	r3, #9
 800971c:	d91d      	bls.n	800975a <__ssvfiscanf_r+0xde>
 800971e:	2203      	movs	r2, #3
 8009720:	4891      	ldr	r0, [pc, #580]	; (8009968 <__ssvfiscanf_r+0x2ec>)
 8009722:	f7ff f86d 	bl	8008800 <memchr>
 8009726:	b140      	cbz	r0, 800973a <__ssvfiscanf_r+0xbe>
 8009728:	2301      	movs	r3, #1
 800972a:	465d      	mov	r5, fp
 800972c:	eba0 0009 	sub.w	r0, r0, r9
 8009730:	fa03 f000 	lsl.w	r0, r3, r0
 8009734:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009736:	4318      	orrs	r0, r3
 8009738:	9041      	str	r0, [sp, #260]	; 0x104
 800973a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800973e:	2b78      	cmp	r3, #120	; 0x78
 8009740:	d806      	bhi.n	8009750 <__ssvfiscanf_r+0xd4>
 8009742:	2b57      	cmp	r3, #87	; 0x57
 8009744:	d810      	bhi.n	8009768 <__ssvfiscanf_r+0xec>
 8009746:	2b25      	cmp	r3, #37	; 0x25
 8009748:	d05d      	beq.n	8009806 <__ssvfiscanf_r+0x18a>
 800974a:	d857      	bhi.n	80097fc <__ssvfiscanf_r+0x180>
 800974c:	2b00      	cmp	r3, #0
 800974e:	d075      	beq.n	800983c <__ssvfiscanf_r+0x1c0>
 8009750:	2303      	movs	r3, #3
 8009752:	9347      	str	r3, [sp, #284]	; 0x11c
 8009754:	230a      	movs	r3, #10
 8009756:	9342      	str	r3, [sp, #264]	; 0x108
 8009758:	e082      	b.n	8009860 <__ssvfiscanf_r+0x1e4>
 800975a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800975c:	465d      	mov	r5, fp
 800975e:	fb02 1303 	mla	r3, r2, r3, r1
 8009762:	3b30      	subs	r3, #48	; 0x30
 8009764:	9343      	str	r3, [sp, #268]	; 0x10c
 8009766:	e7d3      	b.n	8009710 <__ssvfiscanf_r+0x94>
 8009768:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800976c:	2a20      	cmp	r2, #32
 800976e:	d8ef      	bhi.n	8009750 <__ssvfiscanf_r+0xd4>
 8009770:	a101      	add	r1, pc, #4	; (adr r1, 8009778 <__ssvfiscanf_r+0xfc>)
 8009772:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009776:	bf00      	nop
 8009778:	0800984b 	.word	0x0800984b
 800977c:	08009751 	.word	0x08009751
 8009780:	08009751 	.word	0x08009751
 8009784:	080098a9 	.word	0x080098a9
 8009788:	08009751 	.word	0x08009751
 800978c:	08009751 	.word	0x08009751
 8009790:	08009751 	.word	0x08009751
 8009794:	08009751 	.word	0x08009751
 8009798:	08009751 	.word	0x08009751
 800979c:	08009751 	.word	0x08009751
 80097a0:	08009751 	.word	0x08009751
 80097a4:	080098bf 	.word	0x080098bf
 80097a8:	08009895 	.word	0x08009895
 80097ac:	08009803 	.word	0x08009803
 80097b0:	08009803 	.word	0x08009803
 80097b4:	08009803 	.word	0x08009803
 80097b8:	08009751 	.word	0x08009751
 80097bc:	08009899 	.word	0x08009899
 80097c0:	08009751 	.word	0x08009751
 80097c4:	08009751 	.word	0x08009751
 80097c8:	08009751 	.word	0x08009751
 80097cc:	08009751 	.word	0x08009751
 80097d0:	080098cf 	.word	0x080098cf
 80097d4:	080098a1 	.word	0x080098a1
 80097d8:	08009843 	.word	0x08009843
 80097dc:	08009751 	.word	0x08009751
 80097e0:	08009751 	.word	0x08009751
 80097e4:	080098cb 	.word	0x080098cb
 80097e8:	08009751 	.word	0x08009751
 80097ec:	08009895 	.word	0x08009895
 80097f0:	08009751 	.word	0x08009751
 80097f4:	08009751 	.word	0x08009751
 80097f8:	0800984b 	.word	0x0800984b
 80097fc:	3b45      	subs	r3, #69	; 0x45
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d8a6      	bhi.n	8009750 <__ssvfiscanf_r+0xd4>
 8009802:	2305      	movs	r3, #5
 8009804:	e02b      	b.n	800985e <__ssvfiscanf_r+0x1e2>
 8009806:	6863      	ldr	r3, [r4, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	dd0d      	ble.n	8009828 <__ssvfiscanf_r+0x1ac>
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	781a      	ldrb	r2, [r3, #0]
 8009810:	4552      	cmp	r2, sl
 8009812:	f040 80a1 	bne.w	8009958 <__ssvfiscanf_r+0x2dc>
 8009816:	3301      	adds	r3, #1
 8009818:	6862      	ldr	r2, [r4, #4]
 800981a:	6023      	str	r3, [r4, #0]
 800981c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800981e:	3a01      	subs	r2, #1
 8009820:	3301      	adds	r3, #1
 8009822:	6062      	str	r2, [r4, #4]
 8009824:	9345      	str	r3, [sp, #276]	; 0x114
 8009826:	e752      	b.n	80096ce <__ssvfiscanf_r+0x52>
 8009828:	4621      	mov	r1, r4
 800982a:	4630      	mov	r0, r6
 800982c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800982e:	4798      	blx	r3
 8009830:	2800      	cmp	r0, #0
 8009832:	d0eb      	beq.n	800980c <__ssvfiscanf_r+0x190>
 8009834:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009836:	2800      	cmp	r0, #0
 8009838:	f040 8084 	bne.w	8009944 <__ssvfiscanf_r+0x2c8>
 800983c:	f04f 30ff 	mov.w	r0, #4294967295
 8009840:	e086      	b.n	8009950 <__ssvfiscanf_r+0x2d4>
 8009842:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009844:	f042 0220 	orr.w	r2, r2, #32
 8009848:	9241      	str	r2, [sp, #260]	; 0x104
 800984a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800984c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009850:	9241      	str	r2, [sp, #260]	; 0x104
 8009852:	2210      	movs	r2, #16
 8009854:	2b6f      	cmp	r3, #111	; 0x6f
 8009856:	bf34      	ite	cc
 8009858:	2303      	movcc	r3, #3
 800985a:	2304      	movcs	r3, #4
 800985c:	9242      	str	r2, [sp, #264]	; 0x108
 800985e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009860:	6863      	ldr	r3, [r4, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	dd41      	ble.n	80098ea <__ssvfiscanf_r+0x26e>
 8009866:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009868:	0659      	lsls	r1, r3, #25
 800986a:	d404      	bmi.n	8009876 <__ssvfiscanf_r+0x1fa>
 800986c:	6823      	ldr	r3, [r4, #0]
 800986e:	781a      	ldrb	r2, [r3, #0]
 8009870:	5cba      	ldrb	r2, [r7, r2]
 8009872:	0712      	lsls	r2, r2, #28
 8009874:	d440      	bmi.n	80098f8 <__ssvfiscanf_r+0x27c>
 8009876:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009878:	2b02      	cmp	r3, #2
 800987a:	dc4f      	bgt.n	800991c <__ssvfiscanf_r+0x2a0>
 800987c:	466b      	mov	r3, sp
 800987e:	4622      	mov	r2, r4
 8009880:	4630      	mov	r0, r6
 8009882:	a941      	add	r1, sp, #260	; 0x104
 8009884:	f000 f874 	bl	8009970 <_scanf_chars>
 8009888:	2801      	cmp	r0, #1
 800988a:	d065      	beq.n	8009958 <__ssvfiscanf_r+0x2dc>
 800988c:	2802      	cmp	r0, #2
 800988e:	f47f af1e 	bne.w	80096ce <__ssvfiscanf_r+0x52>
 8009892:	e7cf      	b.n	8009834 <__ssvfiscanf_r+0x1b8>
 8009894:	220a      	movs	r2, #10
 8009896:	e7dd      	b.n	8009854 <__ssvfiscanf_r+0x1d8>
 8009898:	2300      	movs	r3, #0
 800989a:	9342      	str	r3, [sp, #264]	; 0x108
 800989c:	2303      	movs	r3, #3
 800989e:	e7de      	b.n	800985e <__ssvfiscanf_r+0x1e2>
 80098a0:	2308      	movs	r3, #8
 80098a2:	9342      	str	r3, [sp, #264]	; 0x108
 80098a4:	2304      	movs	r3, #4
 80098a6:	e7da      	b.n	800985e <__ssvfiscanf_r+0x1e2>
 80098a8:	4629      	mov	r1, r5
 80098aa:	4640      	mov	r0, r8
 80098ac:	f000 f9d2 	bl	8009c54 <__sccl>
 80098b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80098b2:	4605      	mov	r5, r0
 80098b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098b8:	9341      	str	r3, [sp, #260]	; 0x104
 80098ba:	2301      	movs	r3, #1
 80098bc:	e7cf      	b.n	800985e <__ssvfiscanf_r+0x1e2>
 80098be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80098c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c4:	9341      	str	r3, [sp, #260]	; 0x104
 80098c6:	2300      	movs	r3, #0
 80098c8:	e7c9      	b.n	800985e <__ssvfiscanf_r+0x1e2>
 80098ca:	2302      	movs	r3, #2
 80098cc:	e7c7      	b.n	800985e <__ssvfiscanf_r+0x1e2>
 80098ce:	9841      	ldr	r0, [sp, #260]	; 0x104
 80098d0:	06c3      	lsls	r3, r0, #27
 80098d2:	f53f aefc 	bmi.w	80096ce <__ssvfiscanf_r+0x52>
 80098d6:	9b00      	ldr	r3, [sp, #0]
 80098d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80098da:	1d19      	adds	r1, r3, #4
 80098dc:	9100      	str	r1, [sp, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	07c0      	lsls	r0, r0, #31
 80098e2:	bf4c      	ite	mi
 80098e4:	801a      	strhmi	r2, [r3, #0]
 80098e6:	601a      	strpl	r2, [r3, #0]
 80098e8:	e6f1      	b.n	80096ce <__ssvfiscanf_r+0x52>
 80098ea:	4621      	mov	r1, r4
 80098ec:	4630      	mov	r0, r6
 80098ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80098f0:	4798      	blx	r3
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d0b7      	beq.n	8009866 <__ssvfiscanf_r+0x1ea>
 80098f6:	e79d      	b.n	8009834 <__ssvfiscanf_r+0x1b8>
 80098f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80098fa:	3201      	adds	r2, #1
 80098fc:	9245      	str	r2, [sp, #276]	; 0x114
 80098fe:	6862      	ldr	r2, [r4, #4]
 8009900:	3a01      	subs	r2, #1
 8009902:	2a00      	cmp	r2, #0
 8009904:	6062      	str	r2, [r4, #4]
 8009906:	dd02      	ble.n	800990e <__ssvfiscanf_r+0x292>
 8009908:	3301      	adds	r3, #1
 800990a:	6023      	str	r3, [r4, #0]
 800990c:	e7ae      	b.n	800986c <__ssvfiscanf_r+0x1f0>
 800990e:	4621      	mov	r1, r4
 8009910:	4630      	mov	r0, r6
 8009912:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009914:	4798      	blx	r3
 8009916:	2800      	cmp	r0, #0
 8009918:	d0a8      	beq.n	800986c <__ssvfiscanf_r+0x1f0>
 800991a:	e78b      	b.n	8009834 <__ssvfiscanf_r+0x1b8>
 800991c:	2b04      	cmp	r3, #4
 800991e:	dc06      	bgt.n	800992e <__ssvfiscanf_r+0x2b2>
 8009920:	466b      	mov	r3, sp
 8009922:	4622      	mov	r2, r4
 8009924:	4630      	mov	r0, r6
 8009926:	a941      	add	r1, sp, #260	; 0x104
 8009928:	f000 f87a 	bl	8009a20 <_scanf_i>
 800992c:	e7ac      	b.n	8009888 <__ssvfiscanf_r+0x20c>
 800992e:	4b0f      	ldr	r3, [pc, #60]	; (800996c <__ssvfiscanf_r+0x2f0>)
 8009930:	2b00      	cmp	r3, #0
 8009932:	f43f aecc 	beq.w	80096ce <__ssvfiscanf_r+0x52>
 8009936:	466b      	mov	r3, sp
 8009938:	4622      	mov	r2, r4
 800993a:	4630      	mov	r0, r6
 800993c:	a941      	add	r1, sp, #260	; 0x104
 800993e:	f7fc fbab 	bl	8006098 <_scanf_float>
 8009942:	e7a1      	b.n	8009888 <__ssvfiscanf_r+0x20c>
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	f013 0f40 	tst.w	r3, #64	; 0x40
 800994a:	bf18      	it	ne
 800994c:	f04f 30ff 	movne.w	r0, #4294967295
 8009950:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009958:	9844      	ldr	r0, [sp, #272]	; 0x110
 800995a:	e7f9      	b.n	8009950 <__ssvfiscanf_r+0x2d4>
 800995c:	080095c9 	.word	0x080095c9
 8009960:	08009643 	.word	0x08009643
 8009964:	0800ac31 	.word	0x0800ac31
 8009968:	0800afaa 	.word	0x0800afaa
 800996c:	08006099 	.word	0x08006099

08009970 <_scanf_chars>:
 8009970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009974:	4615      	mov	r5, r2
 8009976:	688a      	ldr	r2, [r1, #8]
 8009978:	4680      	mov	r8, r0
 800997a:	460c      	mov	r4, r1
 800997c:	b932      	cbnz	r2, 800998c <_scanf_chars+0x1c>
 800997e:	698a      	ldr	r2, [r1, #24]
 8009980:	2a00      	cmp	r2, #0
 8009982:	bf0c      	ite	eq
 8009984:	2201      	moveq	r2, #1
 8009986:	f04f 32ff 	movne.w	r2, #4294967295
 800998a:	608a      	str	r2, [r1, #8]
 800998c:	2700      	movs	r7, #0
 800998e:	6822      	ldr	r2, [r4, #0]
 8009990:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8009a1c <_scanf_chars+0xac>
 8009994:	06d1      	lsls	r1, r2, #27
 8009996:	bf5f      	itttt	pl
 8009998:	681a      	ldrpl	r2, [r3, #0]
 800999a:	1d11      	addpl	r1, r2, #4
 800999c:	6019      	strpl	r1, [r3, #0]
 800999e:	6816      	ldrpl	r6, [r2, #0]
 80099a0:	69a0      	ldr	r0, [r4, #24]
 80099a2:	b188      	cbz	r0, 80099c8 <_scanf_chars+0x58>
 80099a4:	2801      	cmp	r0, #1
 80099a6:	d107      	bne.n	80099b8 <_scanf_chars+0x48>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	781a      	ldrb	r2, [r3, #0]
 80099ac:	6963      	ldr	r3, [r4, #20]
 80099ae:	5c9b      	ldrb	r3, [r3, r2]
 80099b0:	b953      	cbnz	r3, 80099c8 <_scanf_chars+0x58>
 80099b2:	bb27      	cbnz	r7, 80099fe <_scanf_chars+0x8e>
 80099b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b8:	2802      	cmp	r0, #2
 80099ba:	d120      	bne.n	80099fe <_scanf_chars+0x8e>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80099c4:	071b      	lsls	r3, r3, #28
 80099c6:	d41a      	bmi.n	80099fe <_scanf_chars+0x8e>
 80099c8:	6823      	ldr	r3, [r4, #0]
 80099ca:	3701      	adds	r7, #1
 80099cc:	06da      	lsls	r2, r3, #27
 80099ce:	bf5e      	ittt	pl
 80099d0:	682b      	ldrpl	r3, [r5, #0]
 80099d2:	781b      	ldrbpl	r3, [r3, #0]
 80099d4:	f806 3b01 	strbpl.w	r3, [r6], #1
 80099d8:	682a      	ldr	r2, [r5, #0]
 80099da:	686b      	ldr	r3, [r5, #4]
 80099dc:	3201      	adds	r2, #1
 80099de:	602a      	str	r2, [r5, #0]
 80099e0:	68a2      	ldr	r2, [r4, #8]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	3a01      	subs	r2, #1
 80099e6:	606b      	str	r3, [r5, #4]
 80099e8:	60a2      	str	r2, [r4, #8]
 80099ea:	b142      	cbz	r2, 80099fe <_scanf_chars+0x8e>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	dcd7      	bgt.n	80099a0 <_scanf_chars+0x30>
 80099f0:	4629      	mov	r1, r5
 80099f2:	4640      	mov	r0, r8
 80099f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80099f8:	4798      	blx	r3
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d0d0      	beq.n	80099a0 <_scanf_chars+0x30>
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	f013 0310 	ands.w	r3, r3, #16
 8009a04:	d105      	bne.n	8009a12 <_scanf_chars+0xa2>
 8009a06:	68e2      	ldr	r2, [r4, #12]
 8009a08:	3201      	adds	r2, #1
 8009a0a:	60e2      	str	r2, [r4, #12]
 8009a0c:	69a2      	ldr	r2, [r4, #24]
 8009a0e:	b102      	cbz	r2, 8009a12 <_scanf_chars+0xa2>
 8009a10:	7033      	strb	r3, [r6, #0]
 8009a12:	6923      	ldr	r3, [r4, #16]
 8009a14:	2000      	movs	r0, #0
 8009a16:	441f      	add	r7, r3
 8009a18:	6127      	str	r7, [r4, #16]
 8009a1a:	e7cb      	b.n	80099b4 <_scanf_chars+0x44>
 8009a1c:	0800ac31 	.word	0x0800ac31

08009a20 <_scanf_i>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	460c      	mov	r4, r1
 8009a26:	4698      	mov	r8, r3
 8009a28:	4b72      	ldr	r3, [pc, #456]	; (8009bf4 <_scanf_i+0x1d4>)
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	4682      	mov	sl, r0
 8009a2e:	4616      	mov	r6, r2
 8009a30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a34:	ab03      	add	r3, sp, #12
 8009a36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009a3a:	4b6f      	ldr	r3, [pc, #444]	; (8009bf8 <_scanf_i+0x1d8>)
 8009a3c:	69a1      	ldr	r1, [r4, #24]
 8009a3e:	4a6f      	ldr	r2, [pc, #444]	; (8009bfc <_scanf_i+0x1dc>)
 8009a40:	4627      	mov	r7, r4
 8009a42:	2903      	cmp	r1, #3
 8009a44:	bf18      	it	ne
 8009a46:	461a      	movne	r2, r3
 8009a48:	68a3      	ldr	r3, [r4, #8]
 8009a4a:	9201      	str	r2, [sp, #4]
 8009a4c:	1e5a      	subs	r2, r3, #1
 8009a4e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009a52:	bf81      	itttt	hi
 8009a54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009a58:	eb03 0905 	addhi.w	r9, r3, r5
 8009a5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009a60:	60a3      	strhi	r3, [r4, #8]
 8009a62:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009a66:	bf98      	it	ls
 8009a68:	f04f 0900 	movls.w	r9, #0
 8009a6c:	463d      	mov	r5, r7
 8009a6e:	f04f 0b00 	mov.w	fp, #0
 8009a72:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009a76:	6023      	str	r3, [r4, #0]
 8009a78:	6831      	ldr	r1, [r6, #0]
 8009a7a:	ab03      	add	r3, sp, #12
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	7809      	ldrb	r1, [r1, #0]
 8009a80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009a84:	f7fe febc 	bl	8008800 <memchr>
 8009a88:	b328      	cbz	r0, 8009ad6 <_scanf_i+0xb6>
 8009a8a:	f1bb 0f01 	cmp.w	fp, #1
 8009a8e:	d159      	bne.n	8009b44 <_scanf_i+0x124>
 8009a90:	6862      	ldr	r2, [r4, #4]
 8009a92:	b92a      	cbnz	r2, 8009aa0 <_scanf_i+0x80>
 8009a94:	2308      	movs	r3, #8
 8009a96:	6822      	ldr	r2, [r4, #0]
 8009a98:	6063      	str	r3, [r4, #4]
 8009a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a9e:	6022      	str	r2, [r4, #0]
 8009aa0:	6822      	ldr	r2, [r4, #0]
 8009aa2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009aa6:	6022      	str	r2, [r4, #0]
 8009aa8:	68a2      	ldr	r2, [r4, #8]
 8009aaa:	1e51      	subs	r1, r2, #1
 8009aac:	60a1      	str	r1, [r4, #8]
 8009aae:	b192      	cbz	r2, 8009ad6 <_scanf_i+0xb6>
 8009ab0:	6832      	ldr	r2, [r6, #0]
 8009ab2:	1c51      	adds	r1, r2, #1
 8009ab4:	6031      	str	r1, [r6, #0]
 8009ab6:	7812      	ldrb	r2, [r2, #0]
 8009ab8:	f805 2b01 	strb.w	r2, [r5], #1
 8009abc:	6872      	ldr	r2, [r6, #4]
 8009abe:	3a01      	subs	r2, #1
 8009ac0:	2a00      	cmp	r2, #0
 8009ac2:	6072      	str	r2, [r6, #4]
 8009ac4:	dc07      	bgt.n	8009ad6 <_scanf_i+0xb6>
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4650      	mov	r0, sl
 8009aca:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009ace:	4790      	blx	r2
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	f040 8085 	bne.w	8009be0 <_scanf_i+0x1c0>
 8009ad6:	f10b 0b01 	add.w	fp, fp, #1
 8009ada:	f1bb 0f03 	cmp.w	fp, #3
 8009ade:	d1cb      	bne.n	8009a78 <_scanf_i+0x58>
 8009ae0:	6863      	ldr	r3, [r4, #4]
 8009ae2:	b90b      	cbnz	r3, 8009ae8 <_scanf_i+0xc8>
 8009ae4:	230a      	movs	r3, #10
 8009ae6:	6063      	str	r3, [r4, #4]
 8009ae8:	6863      	ldr	r3, [r4, #4]
 8009aea:	4945      	ldr	r1, [pc, #276]	; (8009c00 <_scanf_i+0x1e0>)
 8009aec:	6960      	ldr	r0, [r4, #20]
 8009aee:	1ac9      	subs	r1, r1, r3
 8009af0:	f000 f8b0 	bl	8009c54 <__sccl>
 8009af4:	f04f 0b00 	mov.w	fp, #0
 8009af8:	68a3      	ldr	r3, [r4, #8]
 8009afa:	6822      	ldr	r2, [r4, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d03d      	beq.n	8009b7c <_scanf_i+0x15c>
 8009b00:	6831      	ldr	r1, [r6, #0]
 8009b02:	6960      	ldr	r0, [r4, #20]
 8009b04:	f891 c000 	ldrb.w	ip, [r1]
 8009b08:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d035      	beq.n	8009b7c <_scanf_i+0x15c>
 8009b10:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009b14:	d124      	bne.n	8009b60 <_scanf_i+0x140>
 8009b16:	0510      	lsls	r0, r2, #20
 8009b18:	d522      	bpl.n	8009b60 <_scanf_i+0x140>
 8009b1a:	f10b 0b01 	add.w	fp, fp, #1
 8009b1e:	f1b9 0f00 	cmp.w	r9, #0
 8009b22:	d003      	beq.n	8009b2c <_scanf_i+0x10c>
 8009b24:	3301      	adds	r3, #1
 8009b26:	f109 39ff 	add.w	r9, r9, #4294967295
 8009b2a:	60a3      	str	r3, [r4, #8]
 8009b2c:	6873      	ldr	r3, [r6, #4]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	6073      	str	r3, [r6, #4]
 8009b34:	dd1b      	ble.n	8009b6e <_scanf_i+0x14e>
 8009b36:	6833      	ldr	r3, [r6, #0]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	6033      	str	r3, [r6, #0]
 8009b3c:	68a3      	ldr	r3, [r4, #8]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	60a3      	str	r3, [r4, #8]
 8009b42:	e7d9      	b.n	8009af8 <_scanf_i+0xd8>
 8009b44:	f1bb 0f02 	cmp.w	fp, #2
 8009b48:	d1ae      	bne.n	8009aa8 <_scanf_i+0x88>
 8009b4a:	6822      	ldr	r2, [r4, #0]
 8009b4c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009b50:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009b54:	d1bf      	bne.n	8009ad6 <_scanf_i+0xb6>
 8009b56:	2310      	movs	r3, #16
 8009b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b5c:	6063      	str	r3, [r4, #4]
 8009b5e:	e7a2      	b.n	8009aa6 <_scanf_i+0x86>
 8009b60:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009b64:	6022      	str	r2, [r4, #0]
 8009b66:	780b      	ldrb	r3, [r1, #0]
 8009b68:	f805 3b01 	strb.w	r3, [r5], #1
 8009b6c:	e7de      	b.n	8009b2c <_scanf_i+0x10c>
 8009b6e:	4631      	mov	r1, r6
 8009b70:	4650      	mov	r0, sl
 8009b72:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009b76:	4798      	blx	r3
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	d0df      	beq.n	8009b3c <_scanf_i+0x11c>
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	05d9      	lsls	r1, r3, #23
 8009b80:	d50d      	bpl.n	8009b9e <_scanf_i+0x17e>
 8009b82:	42bd      	cmp	r5, r7
 8009b84:	d909      	bls.n	8009b9a <_scanf_i+0x17a>
 8009b86:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009b8a:	4632      	mov	r2, r6
 8009b8c:	4650      	mov	r0, sl
 8009b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b92:	f105 39ff 	add.w	r9, r5, #4294967295
 8009b96:	4798      	blx	r3
 8009b98:	464d      	mov	r5, r9
 8009b9a:	42bd      	cmp	r5, r7
 8009b9c:	d028      	beq.n	8009bf0 <_scanf_i+0x1d0>
 8009b9e:	6822      	ldr	r2, [r4, #0]
 8009ba0:	f012 0210 	ands.w	r2, r2, #16
 8009ba4:	d113      	bne.n	8009bce <_scanf_i+0x1ae>
 8009ba6:	702a      	strb	r2, [r5, #0]
 8009ba8:	4639      	mov	r1, r7
 8009baa:	6863      	ldr	r3, [r4, #4]
 8009bac:	4650      	mov	r0, sl
 8009bae:	9e01      	ldr	r6, [sp, #4]
 8009bb0:	47b0      	blx	r6
 8009bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb6:	6821      	ldr	r1, [r4, #0]
 8009bb8:	1d1a      	adds	r2, r3, #4
 8009bba:	f8c8 2000 	str.w	r2, [r8]
 8009bbe:	f011 0f20 	tst.w	r1, #32
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	d00f      	beq.n	8009be6 <_scanf_i+0x1c6>
 8009bc6:	6018      	str	r0, [r3, #0]
 8009bc8:	68e3      	ldr	r3, [r4, #12]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	60e3      	str	r3, [r4, #12]
 8009bce:	2000      	movs	r0, #0
 8009bd0:	1bed      	subs	r5, r5, r7
 8009bd2:	44ab      	add	fp, r5
 8009bd4:	6925      	ldr	r5, [r4, #16]
 8009bd6:	445d      	add	r5, fp
 8009bd8:	6125      	str	r5, [r4, #16]
 8009bda:	b007      	add	sp, #28
 8009bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be0:	f04f 0b00 	mov.w	fp, #0
 8009be4:	e7ca      	b.n	8009b7c <_scanf_i+0x15c>
 8009be6:	07ca      	lsls	r2, r1, #31
 8009be8:	bf4c      	ite	mi
 8009bea:	8018      	strhmi	r0, [r3, #0]
 8009bec:	6018      	strpl	r0, [r3, #0]
 8009bee:	e7eb      	b.n	8009bc8 <_scanf_i+0x1a8>
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	e7f2      	b.n	8009bda <_scanf_i+0x1ba>
 8009bf4:	0800ab5c 	.word	0x0800ab5c
 8009bf8:	08009de5 	.word	0x08009de5
 8009bfc:	08007391 	.word	0x08007391
 8009c00:	0800afce 	.word	0x0800afce

08009c04 <_read_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4604      	mov	r4, r0
 8009c08:	4608      	mov	r0, r1
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	4d05      	ldr	r5, [pc, #20]	; (8009c24 <_read_r+0x20>)
 8009c10:	602a      	str	r2, [r5, #0]
 8009c12:	461a      	mov	r2, r3
 8009c14:	f7f8 fbdf 	bl	80023d6 <_read>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_read_r+0x1e>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_read_r+0x1e>
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	200003a0 	.word	0x200003a0

08009c28 <nan>:
 8009c28:	2000      	movs	r0, #0
 8009c2a:	4901      	ldr	r1, [pc, #4]	; (8009c30 <nan+0x8>)
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	7ff80000 	.word	0x7ff80000

08009c34 <_sbrk_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	2300      	movs	r3, #0
 8009c38:	4d05      	ldr	r5, [pc, #20]	; (8009c50 <_sbrk_r+0x1c>)
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	602b      	str	r3, [r5, #0]
 8009c40:	f7f8 fc32 	bl	80024a8 <_sbrk>
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	d102      	bne.n	8009c4e <_sbrk_r+0x1a>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	b103      	cbz	r3, 8009c4e <_sbrk_r+0x1a>
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}
 8009c50:	200003a0 	.word	0x200003a0

08009c54 <__sccl>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	780b      	ldrb	r3, [r1, #0]
 8009c58:	4604      	mov	r4, r0
 8009c5a:	2b5e      	cmp	r3, #94	; 0x5e
 8009c5c:	bf13      	iteet	ne
 8009c5e:	2200      	movne	r2, #0
 8009c60:	2201      	moveq	r2, #1
 8009c62:	784b      	ldrbeq	r3, [r1, #1]
 8009c64:	1c48      	addne	r0, r1, #1
 8009c66:	bf08      	it	eq
 8009c68:	1c88      	addeq	r0, r1, #2
 8009c6a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009c6e:	1e61      	subs	r1, r4, #1
 8009c70:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009c74:	42a9      	cmp	r1, r5
 8009c76:	d1fb      	bne.n	8009c70 <__sccl+0x1c>
 8009c78:	b90b      	cbnz	r3, 8009c7e <__sccl+0x2a>
 8009c7a:	3801      	subs	r0, #1
 8009c7c:	bd70      	pop	{r4, r5, r6, pc}
 8009c7e:	f082 0101 	eor.w	r1, r2, #1
 8009c82:	54e1      	strb	r1, [r4, r3]
 8009c84:	1c42      	adds	r2, r0, #1
 8009c86:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	2d2d      	cmp	r5, #45	; 0x2d
 8009c8e:	f102 36ff 	add.w	r6, r2, #4294967295
 8009c92:	d006      	beq.n	8009ca2 <__sccl+0x4e>
 8009c94:	2d5d      	cmp	r5, #93	; 0x5d
 8009c96:	d0f1      	beq.n	8009c7c <__sccl+0x28>
 8009c98:	b90d      	cbnz	r5, 8009c9e <__sccl+0x4a>
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	e7ee      	b.n	8009c7c <__sccl+0x28>
 8009c9e:	462b      	mov	r3, r5
 8009ca0:	e7ef      	b.n	8009c82 <__sccl+0x2e>
 8009ca2:	7816      	ldrb	r6, [r2, #0]
 8009ca4:	2e5d      	cmp	r6, #93	; 0x5d
 8009ca6:	d0fa      	beq.n	8009c9e <__sccl+0x4a>
 8009ca8:	42b3      	cmp	r3, r6
 8009caa:	dcf8      	bgt.n	8009c9e <__sccl+0x4a>
 8009cac:	4618      	mov	r0, r3
 8009cae:	3001      	adds	r0, #1
 8009cb0:	4286      	cmp	r6, r0
 8009cb2:	5421      	strb	r1, [r4, r0]
 8009cb4:	dcfb      	bgt.n	8009cae <__sccl+0x5a>
 8009cb6:	43d8      	mvns	r0, r3
 8009cb8:	4430      	add	r0, r6
 8009cba:	42b3      	cmp	r3, r6
 8009cbc:	bfa8      	it	ge
 8009cbe:	2000      	movge	r0, #0
 8009cc0:	1c5d      	adds	r5, r3, #1
 8009cc2:	182b      	adds	r3, r5, r0
 8009cc4:	3202      	adds	r2, #2
 8009cc6:	e7de      	b.n	8009c86 <__sccl+0x32>

08009cc8 <strncmp>:
 8009cc8:	b510      	push	{r4, lr}
 8009cca:	b16a      	cbz	r2, 8009ce8 <strncmp+0x20>
 8009ccc:	3901      	subs	r1, #1
 8009cce:	1884      	adds	r4, r0, r2
 8009cd0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009cd4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d103      	bne.n	8009ce4 <strncmp+0x1c>
 8009cdc:	42a0      	cmp	r0, r4
 8009cde:	d001      	beq.n	8009ce4 <strncmp+0x1c>
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1f5      	bne.n	8009cd0 <strncmp+0x8>
 8009ce4:	1a98      	subs	r0, r3, r2
 8009ce6:	bd10      	pop	{r4, pc}
 8009ce8:	4610      	mov	r0, r2
 8009cea:	e7fc      	b.n	8009ce6 <strncmp+0x1e>

08009cec <_strtoul_l.isra.0>:
 8009cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cf0:	468c      	mov	ip, r1
 8009cf2:	4686      	mov	lr, r0
 8009cf4:	4e3a      	ldr	r6, [pc, #232]	; (8009de0 <_strtoul_l.isra.0+0xf4>)
 8009cf6:	4660      	mov	r0, ip
 8009cf8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009cfc:	5da5      	ldrb	r5, [r4, r6]
 8009cfe:	f015 0508 	ands.w	r5, r5, #8
 8009d02:	d1f8      	bne.n	8009cf6 <_strtoul_l.isra.0+0xa>
 8009d04:	2c2d      	cmp	r4, #45	; 0x2d
 8009d06:	d134      	bne.n	8009d72 <_strtoul_l.isra.0+0x86>
 8009d08:	f04f 0801 	mov.w	r8, #1
 8009d0c:	f89c 4000 	ldrb.w	r4, [ip]
 8009d10:	f100 0c02 	add.w	ip, r0, #2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d05e      	beq.n	8009dd6 <_strtoul_l.isra.0+0xea>
 8009d18:	2b10      	cmp	r3, #16
 8009d1a:	d10c      	bne.n	8009d36 <_strtoul_l.isra.0+0x4a>
 8009d1c:	2c30      	cmp	r4, #48	; 0x30
 8009d1e:	d10a      	bne.n	8009d36 <_strtoul_l.isra.0+0x4a>
 8009d20:	f89c 0000 	ldrb.w	r0, [ip]
 8009d24:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009d28:	2858      	cmp	r0, #88	; 0x58
 8009d2a:	d14f      	bne.n	8009dcc <_strtoul_l.isra.0+0xe0>
 8009d2c:	2310      	movs	r3, #16
 8009d2e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009d32:	f10c 0c02 	add.w	ip, ip, #2
 8009d36:	f04f 37ff 	mov.w	r7, #4294967295
 8009d3a:	fbb7 f7f3 	udiv	r7, r7, r3
 8009d3e:	2500      	movs	r5, #0
 8009d40:	fb03 f907 	mul.w	r9, r3, r7
 8009d44:	4628      	mov	r0, r5
 8009d46:	ea6f 0909 	mvn.w	r9, r9
 8009d4a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009d4e:	2e09      	cmp	r6, #9
 8009d50:	d818      	bhi.n	8009d84 <_strtoul_l.isra.0+0x98>
 8009d52:	4634      	mov	r4, r6
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	dd24      	ble.n	8009da2 <_strtoul_l.isra.0+0xb6>
 8009d58:	2d00      	cmp	r5, #0
 8009d5a:	db1f      	blt.n	8009d9c <_strtoul_l.isra.0+0xb0>
 8009d5c:	4287      	cmp	r7, r0
 8009d5e:	d31d      	bcc.n	8009d9c <_strtoul_l.isra.0+0xb0>
 8009d60:	d101      	bne.n	8009d66 <_strtoul_l.isra.0+0x7a>
 8009d62:	45a1      	cmp	r9, r4
 8009d64:	db1a      	blt.n	8009d9c <_strtoul_l.isra.0+0xb0>
 8009d66:	2501      	movs	r5, #1
 8009d68:	fb00 4003 	mla	r0, r0, r3, r4
 8009d6c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009d70:	e7eb      	b.n	8009d4a <_strtoul_l.isra.0+0x5e>
 8009d72:	2c2b      	cmp	r4, #43	; 0x2b
 8009d74:	bf08      	it	eq
 8009d76:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009d7a:	46a8      	mov	r8, r5
 8009d7c:	bf08      	it	eq
 8009d7e:	f100 0c02 	addeq.w	ip, r0, #2
 8009d82:	e7c7      	b.n	8009d14 <_strtoul_l.isra.0+0x28>
 8009d84:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009d88:	2e19      	cmp	r6, #25
 8009d8a:	d801      	bhi.n	8009d90 <_strtoul_l.isra.0+0xa4>
 8009d8c:	3c37      	subs	r4, #55	; 0x37
 8009d8e:	e7e1      	b.n	8009d54 <_strtoul_l.isra.0+0x68>
 8009d90:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009d94:	2e19      	cmp	r6, #25
 8009d96:	d804      	bhi.n	8009da2 <_strtoul_l.isra.0+0xb6>
 8009d98:	3c57      	subs	r4, #87	; 0x57
 8009d9a:	e7db      	b.n	8009d54 <_strtoul_l.isra.0+0x68>
 8009d9c:	f04f 35ff 	mov.w	r5, #4294967295
 8009da0:	e7e4      	b.n	8009d6c <_strtoul_l.isra.0+0x80>
 8009da2:	2d00      	cmp	r5, #0
 8009da4:	da07      	bge.n	8009db6 <_strtoul_l.isra.0+0xca>
 8009da6:	2322      	movs	r3, #34	; 0x22
 8009da8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dac:	f8ce 3000 	str.w	r3, [lr]
 8009db0:	b942      	cbnz	r2, 8009dc4 <_strtoul_l.isra.0+0xd8>
 8009db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009db6:	f1b8 0f00 	cmp.w	r8, #0
 8009dba:	d000      	beq.n	8009dbe <_strtoul_l.isra.0+0xd2>
 8009dbc:	4240      	negs	r0, r0
 8009dbe:	2a00      	cmp	r2, #0
 8009dc0:	d0f7      	beq.n	8009db2 <_strtoul_l.isra.0+0xc6>
 8009dc2:	b10d      	cbz	r5, 8009dc8 <_strtoul_l.isra.0+0xdc>
 8009dc4:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009dc8:	6011      	str	r1, [r2, #0]
 8009dca:	e7f2      	b.n	8009db2 <_strtoul_l.isra.0+0xc6>
 8009dcc:	2430      	movs	r4, #48	; 0x30
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1b1      	bne.n	8009d36 <_strtoul_l.isra.0+0x4a>
 8009dd2:	2308      	movs	r3, #8
 8009dd4:	e7af      	b.n	8009d36 <_strtoul_l.isra.0+0x4a>
 8009dd6:	2c30      	cmp	r4, #48	; 0x30
 8009dd8:	d0a2      	beq.n	8009d20 <_strtoul_l.isra.0+0x34>
 8009dda:	230a      	movs	r3, #10
 8009ddc:	e7ab      	b.n	8009d36 <_strtoul_l.isra.0+0x4a>
 8009dde:	bf00      	nop
 8009de0:	0800ac31 	.word	0x0800ac31

08009de4 <_strtoul_r>:
 8009de4:	f7ff bf82 	b.w	8009cec <_strtoul_l.isra.0>

08009de8 <__submore>:
 8009de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dec:	460c      	mov	r4, r1
 8009dee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009df4:	4299      	cmp	r1, r3
 8009df6:	d11b      	bne.n	8009e30 <__submore+0x48>
 8009df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009dfc:	f7ff fa2e 	bl	800925c <_malloc_r>
 8009e00:	b918      	cbnz	r0, 8009e0a <__submore+0x22>
 8009e02:	f04f 30ff 	mov.w	r0, #4294967295
 8009e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e0e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009e10:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009e14:	6360      	str	r0, [r4, #52]	; 0x34
 8009e16:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009e1a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009e1e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009e22:	7043      	strb	r3, [r0, #1]
 8009e24:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009e28:	7003      	strb	r3, [r0, #0]
 8009e2a:	6020      	str	r0, [r4, #0]
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	e7ea      	b.n	8009e06 <__submore+0x1e>
 8009e30:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009e32:	0077      	lsls	r7, r6, #1
 8009e34:	463a      	mov	r2, r7
 8009e36:	f000 fa2d 	bl	800a294 <_realloc_r>
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d0e0      	beq.n	8009e02 <__submore+0x1a>
 8009e40:	eb00 0806 	add.w	r8, r0, r6
 8009e44:	4601      	mov	r1, r0
 8009e46:	4632      	mov	r2, r6
 8009e48:	4640      	mov	r0, r8
 8009e4a:	f7fe fce7 	bl	800881c <memcpy>
 8009e4e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009e52:	f8c4 8000 	str.w	r8, [r4]
 8009e56:	e7e9      	b.n	8009e2c <__submore+0x44>

08009e58 <__ascii_wctomb>:
 8009e58:	4603      	mov	r3, r0
 8009e5a:	4608      	mov	r0, r1
 8009e5c:	b141      	cbz	r1, 8009e70 <__ascii_wctomb+0x18>
 8009e5e:	2aff      	cmp	r2, #255	; 0xff
 8009e60:	d904      	bls.n	8009e6c <__ascii_wctomb+0x14>
 8009e62:	228a      	movs	r2, #138	; 0x8a
 8009e64:	f04f 30ff 	mov.w	r0, #4294967295
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	4770      	bx	lr
 8009e6c:	2001      	movs	r0, #1
 8009e6e:	700a      	strb	r2, [r1, #0]
 8009e70:	4770      	bx	lr
	...

08009e74 <__assert_func>:
 8009e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e76:	4614      	mov	r4, r2
 8009e78:	461a      	mov	r2, r3
 8009e7a:	4b09      	ldr	r3, [pc, #36]	; (8009ea0 <__assert_func+0x2c>)
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68d8      	ldr	r0, [r3, #12]
 8009e82:	b14c      	cbz	r4, 8009e98 <__assert_func+0x24>
 8009e84:	4b07      	ldr	r3, [pc, #28]	; (8009ea4 <__assert_func+0x30>)
 8009e86:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e8a:	9100      	str	r1, [sp, #0]
 8009e8c:	462b      	mov	r3, r5
 8009e8e:	4906      	ldr	r1, [pc, #24]	; (8009ea8 <__assert_func+0x34>)
 8009e90:	f000 f9a6 	bl	800a1e0 <fiprintf>
 8009e94:	f000 fc3c 	bl	800a710 <abort>
 8009e98:	4b04      	ldr	r3, [pc, #16]	; (8009eac <__assert_func+0x38>)
 8009e9a:	461c      	mov	r4, r3
 8009e9c:	e7f3      	b.n	8009e86 <__assert_func+0x12>
 8009e9e:	bf00      	nop
 8009ea0:	2000000c 	.word	0x2000000c
 8009ea4:	0800afd0 	.word	0x0800afd0
 8009ea8:	0800afdd 	.word	0x0800afdd
 8009eac:	0800b00b 	.word	0x0800b00b

08009eb0 <__sflush_r>:
 8009eb0:	898a      	ldrh	r2, [r1, #12]
 8009eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	0710      	lsls	r0, r2, #28
 8009eba:	460c      	mov	r4, r1
 8009ebc:	d458      	bmi.n	8009f70 <__sflush_r+0xc0>
 8009ebe:	684b      	ldr	r3, [r1, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	dc05      	bgt.n	8009ed0 <__sflush_r+0x20>
 8009ec4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	dc02      	bgt.n	8009ed0 <__sflush_r+0x20>
 8009eca:	2000      	movs	r0, #0
 8009ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ed2:	2e00      	cmp	r6, #0
 8009ed4:	d0f9      	beq.n	8009eca <__sflush_r+0x1a>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009edc:	682f      	ldr	r7, [r5, #0]
 8009ede:	602b      	str	r3, [r5, #0]
 8009ee0:	d032      	beq.n	8009f48 <__sflush_r+0x98>
 8009ee2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ee4:	89a3      	ldrh	r3, [r4, #12]
 8009ee6:	075a      	lsls	r2, r3, #29
 8009ee8:	d505      	bpl.n	8009ef6 <__sflush_r+0x46>
 8009eea:	6863      	ldr	r3, [r4, #4]
 8009eec:	1ac0      	subs	r0, r0, r3
 8009eee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ef0:	b10b      	cbz	r3, 8009ef6 <__sflush_r+0x46>
 8009ef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ef4:	1ac0      	subs	r0, r0, r3
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	4602      	mov	r2, r0
 8009efa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009efc:	4628      	mov	r0, r5
 8009efe:	6a21      	ldr	r1, [r4, #32]
 8009f00:	47b0      	blx	r6
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	89a3      	ldrh	r3, [r4, #12]
 8009f06:	d106      	bne.n	8009f16 <__sflush_r+0x66>
 8009f08:	6829      	ldr	r1, [r5, #0]
 8009f0a:	291d      	cmp	r1, #29
 8009f0c:	d82c      	bhi.n	8009f68 <__sflush_r+0xb8>
 8009f0e:	4a2a      	ldr	r2, [pc, #168]	; (8009fb8 <__sflush_r+0x108>)
 8009f10:	40ca      	lsrs	r2, r1
 8009f12:	07d6      	lsls	r6, r2, #31
 8009f14:	d528      	bpl.n	8009f68 <__sflush_r+0xb8>
 8009f16:	2200      	movs	r2, #0
 8009f18:	6062      	str	r2, [r4, #4]
 8009f1a:	6922      	ldr	r2, [r4, #16]
 8009f1c:	04d9      	lsls	r1, r3, #19
 8009f1e:	6022      	str	r2, [r4, #0]
 8009f20:	d504      	bpl.n	8009f2c <__sflush_r+0x7c>
 8009f22:	1c42      	adds	r2, r0, #1
 8009f24:	d101      	bne.n	8009f2a <__sflush_r+0x7a>
 8009f26:	682b      	ldr	r3, [r5, #0]
 8009f28:	b903      	cbnz	r3, 8009f2c <__sflush_r+0x7c>
 8009f2a:	6560      	str	r0, [r4, #84]	; 0x54
 8009f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f2e:	602f      	str	r7, [r5, #0]
 8009f30:	2900      	cmp	r1, #0
 8009f32:	d0ca      	beq.n	8009eca <__sflush_r+0x1a>
 8009f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f38:	4299      	cmp	r1, r3
 8009f3a:	d002      	beq.n	8009f42 <__sflush_r+0x92>
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	f7ff f941 	bl	80091c4 <_free_r>
 8009f42:	2000      	movs	r0, #0
 8009f44:	6360      	str	r0, [r4, #52]	; 0x34
 8009f46:	e7c1      	b.n	8009ecc <__sflush_r+0x1c>
 8009f48:	6a21      	ldr	r1, [r4, #32]
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	47b0      	blx	r6
 8009f50:	1c41      	adds	r1, r0, #1
 8009f52:	d1c7      	bne.n	8009ee4 <__sflush_r+0x34>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d0c4      	beq.n	8009ee4 <__sflush_r+0x34>
 8009f5a:	2b1d      	cmp	r3, #29
 8009f5c:	d001      	beq.n	8009f62 <__sflush_r+0xb2>
 8009f5e:	2b16      	cmp	r3, #22
 8009f60:	d101      	bne.n	8009f66 <__sflush_r+0xb6>
 8009f62:	602f      	str	r7, [r5, #0]
 8009f64:	e7b1      	b.n	8009eca <__sflush_r+0x1a>
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f6c:	81a3      	strh	r3, [r4, #12]
 8009f6e:	e7ad      	b.n	8009ecc <__sflush_r+0x1c>
 8009f70:	690f      	ldr	r7, [r1, #16]
 8009f72:	2f00      	cmp	r7, #0
 8009f74:	d0a9      	beq.n	8009eca <__sflush_r+0x1a>
 8009f76:	0793      	lsls	r3, r2, #30
 8009f78:	bf18      	it	ne
 8009f7a:	2300      	movne	r3, #0
 8009f7c:	680e      	ldr	r6, [r1, #0]
 8009f7e:	bf08      	it	eq
 8009f80:	694b      	ldreq	r3, [r1, #20]
 8009f82:	eba6 0807 	sub.w	r8, r6, r7
 8009f86:	600f      	str	r7, [r1, #0]
 8009f88:	608b      	str	r3, [r1, #8]
 8009f8a:	f1b8 0f00 	cmp.w	r8, #0
 8009f8e:	dd9c      	ble.n	8009eca <__sflush_r+0x1a>
 8009f90:	4643      	mov	r3, r8
 8009f92:	463a      	mov	r2, r7
 8009f94:	4628      	mov	r0, r5
 8009f96:	6a21      	ldr	r1, [r4, #32]
 8009f98:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f9a:	47b0      	blx	r6
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	dc06      	bgt.n	8009fae <__sflush_r+0xfe>
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009faa:	81a3      	strh	r3, [r4, #12]
 8009fac:	e78e      	b.n	8009ecc <__sflush_r+0x1c>
 8009fae:	4407      	add	r7, r0
 8009fb0:	eba8 0800 	sub.w	r8, r8, r0
 8009fb4:	e7e9      	b.n	8009f8a <__sflush_r+0xda>
 8009fb6:	bf00      	nop
 8009fb8:	20400001 	.word	0x20400001

08009fbc <_fflush_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	690b      	ldr	r3, [r1, #16]
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	b913      	cbnz	r3, 8009fcc <_fflush_r+0x10>
 8009fc6:	2500      	movs	r5, #0
 8009fc8:	4628      	mov	r0, r5
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	b118      	cbz	r0, 8009fd6 <_fflush_r+0x1a>
 8009fce:	6983      	ldr	r3, [r0, #24]
 8009fd0:	b90b      	cbnz	r3, 8009fd6 <_fflush_r+0x1a>
 8009fd2:	f000 f887 	bl	800a0e4 <__sinit>
 8009fd6:	4b14      	ldr	r3, [pc, #80]	; (800a028 <_fflush_r+0x6c>)
 8009fd8:	429c      	cmp	r4, r3
 8009fda:	d11b      	bne.n	800a014 <_fflush_r+0x58>
 8009fdc:	686c      	ldr	r4, [r5, #4]
 8009fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d0ef      	beq.n	8009fc6 <_fflush_r+0xa>
 8009fe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fe8:	07d0      	lsls	r0, r2, #31
 8009fea:	d404      	bmi.n	8009ff6 <_fflush_r+0x3a>
 8009fec:	0599      	lsls	r1, r3, #22
 8009fee:	d402      	bmi.n	8009ff6 <_fflush_r+0x3a>
 8009ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ff2:	f000 f927 	bl	800a244 <__retarget_lock_acquire_recursive>
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	f7ff ff59 	bl	8009eb0 <__sflush_r>
 8009ffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a000:	4605      	mov	r5, r0
 800a002:	07da      	lsls	r2, r3, #31
 800a004:	d4e0      	bmi.n	8009fc8 <_fflush_r+0xc>
 800a006:	89a3      	ldrh	r3, [r4, #12]
 800a008:	059b      	lsls	r3, r3, #22
 800a00a:	d4dd      	bmi.n	8009fc8 <_fflush_r+0xc>
 800a00c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a00e:	f000 f91a 	bl	800a246 <__retarget_lock_release_recursive>
 800a012:	e7d9      	b.n	8009fc8 <_fflush_r+0xc>
 800a014:	4b05      	ldr	r3, [pc, #20]	; (800a02c <_fflush_r+0x70>)
 800a016:	429c      	cmp	r4, r3
 800a018:	d101      	bne.n	800a01e <_fflush_r+0x62>
 800a01a:	68ac      	ldr	r4, [r5, #8]
 800a01c:	e7df      	b.n	8009fde <_fflush_r+0x22>
 800a01e:	4b04      	ldr	r3, [pc, #16]	; (800a030 <_fflush_r+0x74>)
 800a020:	429c      	cmp	r4, r3
 800a022:	bf08      	it	eq
 800a024:	68ec      	ldreq	r4, [r5, #12]
 800a026:	e7da      	b.n	8009fde <_fflush_r+0x22>
 800a028:	0800b02c 	.word	0x0800b02c
 800a02c:	0800b04c 	.word	0x0800b04c
 800a030:	0800b00c 	.word	0x0800b00c

0800a034 <std>:
 800a034:	2300      	movs	r3, #0
 800a036:	b510      	push	{r4, lr}
 800a038:	4604      	mov	r4, r0
 800a03a:	e9c0 3300 	strd	r3, r3, [r0]
 800a03e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a042:	6083      	str	r3, [r0, #8]
 800a044:	8181      	strh	r1, [r0, #12]
 800a046:	6643      	str	r3, [r0, #100]	; 0x64
 800a048:	81c2      	strh	r2, [r0, #14]
 800a04a:	6183      	str	r3, [r0, #24]
 800a04c:	4619      	mov	r1, r3
 800a04e:	2208      	movs	r2, #8
 800a050:	305c      	adds	r0, #92	; 0x5c
 800a052:	f7fb fbb9 	bl	80057c8 <memset>
 800a056:	4b05      	ldr	r3, [pc, #20]	; (800a06c <std+0x38>)
 800a058:	6224      	str	r4, [r4, #32]
 800a05a:	6263      	str	r3, [r4, #36]	; 0x24
 800a05c:	4b04      	ldr	r3, [pc, #16]	; (800a070 <std+0x3c>)
 800a05e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a060:	4b04      	ldr	r3, [pc, #16]	; (800a074 <std+0x40>)
 800a062:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a064:	4b04      	ldr	r3, [pc, #16]	; (800a078 <std+0x44>)
 800a066:	6323      	str	r3, [r4, #48]	; 0x30
 800a068:	bd10      	pop	{r4, pc}
 800a06a:	bf00      	nop
 800a06c:	080065c1 	.word	0x080065c1
 800a070:	080065e7 	.word	0x080065e7
 800a074:	0800661f 	.word	0x0800661f
 800a078:	08006643 	.word	0x08006643

0800a07c <_cleanup_r>:
 800a07c:	4901      	ldr	r1, [pc, #4]	; (800a084 <_cleanup_r+0x8>)
 800a07e:	f000 b8c1 	b.w	800a204 <_fwalk_reent>
 800a082:	bf00      	nop
 800a084:	08009fbd 	.word	0x08009fbd

0800a088 <__sfmoreglue>:
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	2568      	movs	r5, #104	; 0x68
 800a08c:	1e4a      	subs	r2, r1, #1
 800a08e:	4355      	muls	r5, r2
 800a090:	460e      	mov	r6, r1
 800a092:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a096:	f7ff f8e1 	bl	800925c <_malloc_r>
 800a09a:	4604      	mov	r4, r0
 800a09c:	b140      	cbz	r0, 800a0b0 <__sfmoreglue+0x28>
 800a09e:	2100      	movs	r1, #0
 800a0a0:	e9c0 1600 	strd	r1, r6, [r0]
 800a0a4:	300c      	adds	r0, #12
 800a0a6:	60a0      	str	r0, [r4, #8]
 800a0a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0ac:	f7fb fb8c 	bl	80057c8 <memset>
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	bd70      	pop	{r4, r5, r6, pc}

0800a0b4 <__sfp_lock_acquire>:
 800a0b4:	4801      	ldr	r0, [pc, #4]	; (800a0bc <__sfp_lock_acquire+0x8>)
 800a0b6:	f000 b8c5 	b.w	800a244 <__retarget_lock_acquire_recursive>
 800a0ba:	bf00      	nop
 800a0bc:	200003ac 	.word	0x200003ac

0800a0c0 <__sfp_lock_release>:
 800a0c0:	4801      	ldr	r0, [pc, #4]	; (800a0c8 <__sfp_lock_release+0x8>)
 800a0c2:	f000 b8c0 	b.w	800a246 <__retarget_lock_release_recursive>
 800a0c6:	bf00      	nop
 800a0c8:	200003ac 	.word	0x200003ac

0800a0cc <__sinit_lock_acquire>:
 800a0cc:	4801      	ldr	r0, [pc, #4]	; (800a0d4 <__sinit_lock_acquire+0x8>)
 800a0ce:	f000 b8b9 	b.w	800a244 <__retarget_lock_acquire_recursive>
 800a0d2:	bf00      	nop
 800a0d4:	200003a7 	.word	0x200003a7

0800a0d8 <__sinit_lock_release>:
 800a0d8:	4801      	ldr	r0, [pc, #4]	; (800a0e0 <__sinit_lock_release+0x8>)
 800a0da:	f000 b8b4 	b.w	800a246 <__retarget_lock_release_recursive>
 800a0de:	bf00      	nop
 800a0e0:	200003a7 	.word	0x200003a7

0800a0e4 <__sinit>:
 800a0e4:	b510      	push	{r4, lr}
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	f7ff fff0 	bl	800a0cc <__sinit_lock_acquire>
 800a0ec:	69a3      	ldr	r3, [r4, #24]
 800a0ee:	b11b      	cbz	r3, 800a0f8 <__sinit+0x14>
 800a0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f4:	f7ff bff0 	b.w	800a0d8 <__sinit_lock_release>
 800a0f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0fc:	6523      	str	r3, [r4, #80]	; 0x50
 800a0fe:	4b13      	ldr	r3, [pc, #76]	; (800a14c <__sinit+0x68>)
 800a100:	4a13      	ldr	r2, [pc, #76]	; (800a150 <__sinit+0x6c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	62a2      	str	r2, [r4, #40]	; 0x28
 800a106:	42a3      	cmp	r3, r4
 800a108:	bf08      	it	eq
 800a10a:	2301      	moveq	r3, #1
 800a10c:	4620      	mov	r0, r4
 800a10e:	bf08      	it	eq
 800a110:	61a3      	streq	r3, [r4, #24]
 800a112:	f000 f81f 	bl	800a154 <__sfp>
 800a116:	6060      	str	r0, [r4, #4]
 800a118:	4620      	mov	r0, r4
 800a11a:	f000 f81b 	bl	800a154 <__sfp>
 800a11e:	60a0      	str	r0, [r4, #8]
 800a120:	4620      	mov	r0, r4
 800a122:	f000 f817 	bl	800a154 <__sfp>
 800a126:	2200      	movs	r2, #0
 800a128:	2104      	movs	r1, #4
 800a12a:	60e0      	str	r0, [r4, #12]
 800a12c:	6860      	ldr	r0, [r4, #4]
 800a12e:	f7ff ff81 	bl	800a034 <std>
 800a132:	2201      	movs	r2, #1
 800a134:	2109      	movs	r1, #9
 800a136:	68a0      	ldr	r0, [r4, #8]
 800a138:	f7ff ff7c 	bl	800a034 <std>
 800a13c:	2202      	movs	r2, #2
 800a13e:	2112      	movs	r1, #18
 800a140:	68e0      	ldr	r0, [r4, #12]
 800a142:	f7ff ff77 	bl	800a034 <std>
 800a146:	2301      	movs	r3, #1
 800a148:	61a3      	str	r3, [r4, #24]
 800a14a:	e7d1      	b.n	800a0f0 <__sinit+0xc>
 800a14c:	0800aba0 	.word	0x0800aba0
 800a150:	0800a07d 	.word	0x0800a07d

0800a154 <__sfp>:
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a156:	4607      	mov	r7, r0
 800a158:	f7ff ffac 	bl	800a0b4 <__sfp_lock_acquire>
 800a15c:	4b1e      	ldr	r3, [pc, #120]	; (800a1d8 <__sfp+0x84>)
 800a15e:	681e      	ldr	r6, [r3, #0]
 800a160:	69b3      	ldr	r3, [r6, #24]
 800a162:	b913      	cbnz	r3, 800a16a <__sfp+0x16>
 800a164:	4630      	mov	r0, r6
 800a166:	f7ff ffbd 	bl	800a0e4 <__sinit>
 800a16a:	3648      	adds	r6, #72	; 0x48
 800a16c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a170:	3b01      	subs	r3, #1
 800a172:	d503      	bpl.n	800a17c <__sfp+0x28>
 800a174:	6833      	ldr	r3, [r6, #0]
 800a176:	b30b      	cbz	r3, 800a1bc <__sfp+0x68>
 800a178:	6836      	ldr	r6, [r6, #0]
 800a17a:	e7f7      	b.n	800a16c <__sfp+0x18>
 800a17c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a180:	b9d5      	cbnz	r5, 800a1b8 <__sfp+0x64>
 800a182:	4b16      	ldr	r3, [pc, #88]	; (800a1dc <__sfp+0x88>)
 800a184:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a188:	60e3      	str	r3, [r4, #12]
 800a18a:	6665      	str	r5, [r4, #100]	; 0x64
 800a18c:	f000 f859 	bl	800a242 <__retarget_lock_init_recursive>
 800a190:	f7ff ff96 	bl	800a0c0 <__sfp_lock_release>
 800a194:	2208      	movs	r2, #8
 800a196:	4629      	mov	r1, r5
 800a198:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a19c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a1a0:	6025      	str	r5, [r4, #0]
 800a1a2:	61a5      	str	r5, [r4, #24]
 800a1a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a1a8:	f7fb fb0e 	bl	80057c8 <memset>
 800a1ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a1b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1b8:	3468      	adds	r4, #104	; 0x68
 800a1ba:	e7d9      	b.n	800a170 <__sfp+0x1c>
 800a1bc:	2104      	movs	r1, #4
 800a1be:	4638      	mov	r0, r7
 800a1c0:	f7ff ff62 	bl	800a088 <__sfmoreglue>
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	6030      	str	r0, [r6, #0]
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d1d5      	bne.n	800a178 <__sfp+0x24>
 800a1cc:	f7ff ff78 	bl	800a0c0 <__sfp_lock_release>
 800a1d0:	230c      	movs	r3, #12
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	e7ee      	b.n	800a1b4 <__sfp+0x60>
 800a1d6:	bf00      	nop
 800a1d8:	0800aba0 	.word	0x0800aba0
 800a1dc:	ffff0001 	.word	0xffff0001

0800a1e0 <fiprintf>:
 800a1e0:	b40e      	push	{r1, r2, r3}
 800a1e2:	b503      	push	{r0, r1, lr}
 800a1e4:	4601      	mov	r1, r0
 800a1e6:	ab03      	add	r3, sp, #12
 800a1e8:	4805      	ldr	r0, [pc, #20]	; (800a200 <fiprintf+0x20>)
 800a1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ee:	6800      	ldr	r0, [r0, #0]
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	f000 f89d 	bl	800a330 <_vfiprintf_r>
 800a1f6:	b002      	add	sp, #8
 800a1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1fc:	b003      	add	sp, #12
 800a1fe:	4770      	bx	lr
 800a200:	2000000c 	.word	0x2000000c

0800a204 <_fwalk_reent>:
 800a204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a208:	4606      	mov	r6, r0
 800a20a:	4688      	mov	r8, r1
 800a20c:	2700      	movs	r7, #0
 800a20e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a212:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a216:	f1b9 0901 	subs.w	r9, r9, #1
 800a21a:	d505      	bpl.n	800a228 <_fwalk_reent+0x24>
 800a21c:	6824      	ldr	r4, [r4, #0]
 800a21e:	2c00      	cmp	r4, #0
 800a220:	d1f7      	bne.n	800a212 <_fwalk_reent+0xe>
 800a222:	4638      	mov	r0, r7
 800a224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a228:	89ab      	ldrh	r3, [r5, #12]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d907      	bls.n	800a23e <_fwalk_reent+0x3a>
 800a22e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a232:	3301      	adds	r3, #1
 800a234:	d003      	beq.n	800a23e <_fwalk_reent+0x3a>
 800a236:	4629      	mov	r1, r5
 800a238:	4630      	mov	r0, r6
 800a23a:	47c0      	blx	r8
 800a23c:	4307      	orrs	r7, r0
 800a23e:	3568      	adds	r5, #104	; 0x68
 800a240:	e7e9      	b.n	800a216 <_fwalk_reent+0x12>

0800a242 <__retarget_lock_init_recursive>:
 800a242:	4770      	bx	lr

0800a244 <__retarget_lock_acquire_recursive>:
 800a244:	4770      	bx	lr

0800a246 <__retarget_lock_release_recursive>:
 800a246:	4770      	bx	lr

0800a248 <memmove>:
 800a248:	4288      	cmp	r0, r1
 800a24a:	b510      	push	{r4, lr}
 800a24c:	eb01 0402 	add.w	r4, r1, r2
 800a250:	d902      	bls.n	800a258 <memmove+0x10>
 800a252:	4284      	cmp	r4, r0
 800a254:	4623      	mov	r3, r4
 800a256:	d807      	bhi.n	800a268 <memmove+0x20>
 800a258:	1e43      	subs	r3, r0, #1
 800a25a:	42a1      	cmp	r1, r4
 800a25c:	d008      	beq.n	800a270 <memmove+0x28>
 800a25e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a262:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a266:	e7f8      	b.n	800a25a <memmove+0x12>
 800a268:	4601      	mov	r1, r0
 800a26a:	4402      	add	r2, r0
 800a26c:	428a      	cmp	r2, r1
 800a26e:	d100      	bne.n	800a272 <memmove+0x2a>
 800a270:	bd10      	pop	{r4, pc}
 800a272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a27a:	e7f7      	b.n	800a26c <memmove+0x24>

0800a27c <__malloc_lock>:
 800a27c:	4801      	ldr	r0, [pc, #4]	; (800a284 <__malloc_lock+0x8>)
 800a27e:	f7ff bfe1 	b.w	800a244 <__retarget_lock_acquire_recursive>
 800a282:	bf00      	nop
 800a284:	200003a8 	.word	0x200003a8

0800a288 <__malloc_unlock>:
 800a288:	4801      	ldr	r0, [pc, #4]	; (800a290 <__malloc_unlock+0x8>)
 800a28a:	f7ff bfdc 	b.w	800a246 <__retarget_lock_release_recursive>
 800a28e:	bf00      	nop
 800a290:	200003a8 	.word	0x200003a8

0800a294 <_realloc_r>:
 800a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a296:	4607      	mov	r7, r0
 800a298:	4614      	mov	r4, r2
 800a29a:	460e      	mov	r6, r1
 800a29c:	b921      	cbnz	r1, 800a2a8 <_realloc_r+0x14>
 800a29e:	4611      	mov	r1, r2
 800a2a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2a4:	f7fe bfda 	b.w	800925c <_malloc_r>
 800a2a8:	b922      	cbnz	r2, 800a2b4 <_realloc_r+0x20>
 800a2aa:	f7fe ff8b 	bl	80091c4 <_free_r>
 800a2ae:	4625      	mov	r5, r4
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2b4:	f000 fa98 	bl	800a7e8 <_malloc_usable_size_r>
 800a2b8:	42a0      	cmp	r0, r4
 800a2ba:	d20f      	bcs.n	800a2dc <_realloc_r+0x48>
 800a2bc:	4621      	mov	r1, r4
 800a2be:	4638      	mov	r0, r7
 800a2c0:	f7fe ffcc 	bl	800925c <_malloc_r>
 800a2c4:	4605      	mov	r5, r0
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d0f2      	beq.n	800a2b0 <_realloc_r+0x1c>
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	f7fe faa5 	bl	800881c <memcpy>
 800a2d2:	4631      	mov	r1, r6
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f7fe ff75 	bl	80091c4 <_free_r>
 800a2da:	e7e9      	b.n	800a2b0 <_realloc_r+0x1c>
 800a2dc:	4635      	mov	r5, r6
 800a2de:	e7e7      	b.n	800a2b0 <_realloc_r+0x1c>

0800a2e0 <__sfputc_r>:
 800a2e0:	6893      	ldr	r3, [r2, #8]
 800a2e2:	b410      	push	{r4}
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	6093      	str	r3, [r2, #8]
 800a2ea:	da07      	bge.n	800a2fc <__sfputc_r+0x1c>
 800a2ec:	6994      	ldr	r4, [r2, #24]
 800a2ee:	42a3      	cmp	r3, r4
 800a2f0:	db01      	blt.n	800a2f6 <__sfputc_r+0x16>
 800a2f2:	290a      	cmp	r1, #10
 800a2f4:	d102      	bne.n	800a2fc <__sfputc_r+0x1c>
 800a2f6:	bc10      	pop	{r4}
 800a2f8:	f000 b94a 	b.w	800a590 <__swbuf_r>
 800a2fc:	6813      	ldr	r3, [r2, #0]
 800a2fe:	1c58      	adds	r0, r3, #1
 800a300:	6010      	str	r0, [r2, #0]
 800a302:	7019      	strb	r1, [r3, #0]
 800a304:	4608      	mov	r0, r1
 800a306:	bc10      	pop	{r4}
 800a308:	4770      	bx	lr

0800a30a <__sfputs_r>:
 800a30a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30c:	4606      	mov	r6, r0
 800a30e:	460f      	mov	r7, r1
 800a310:	4614      	mov	r4, r2
 800a312:	18d5      	adds	r5, r2, r3
 800a314:	42ac      	cmp	r4, r5
 800a316:	d101      	bne.n	800a31c <__sfputs_r+0x12>
 800a318:	2000      	movs	r0, #0
 800a31a:	e007      	b.n	800a32c <__sfputs_r+0x22>
 800a31c:	463a      	mov	r2, r7
 800a31e:	4630      	mov	r0, r6
 800a320:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a324:	f7ff ffdc 	bl	800a2e0 <__sfputc_r>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d1f3      	bne.n	800a314 <__sfputs_r+0xa>
 800a32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a330 <_vfiprintf_r>:
 800a330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a334:	460d      	mov	r5, r1
 800a336:	4614      	mov	r4, r2
 800a338:	4698      	mov	r8, r3
 800a33a:	4606      	mov	r6, r0
 800a33c:	b09d      	sub	sp, #116	; 0x74
 800a33e:	b118      	cbz	r0, 800a348 <_vfiprintf_r+0x18>
 800a340:	6983      	ldr	r3, [r0, #24]
 800a342:	b90b      	cbnz	r3, 800a348 <_vfiprintf_r+0x18>
 800a344:	f7ff fece 	bl	800a0e4 <__sinit>
 800a348:	4b89      	ldr	r3, [pc, #548]	; (800a570 <_vfiprintf_r+0x240>)
 800a34a:	429d      	cmp	r5, r3
 800a34c:	d11b      	bne.n	800a386 <_vfiprintf_r+0x56>
 800a34e:	6875      	ldr	r5, [r6, #4]
 800a350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a352:	07d9      	lsls	r1, r3, #31
 800a354:	d405      	bmi.n	800a362 <_vfiprintf_r+0x32>
 800a356:	89ab      	ldrh	r3, [r5, #12]
 800a358:	059a      	lsls	r2, r3, #22
 800a35a:	d402      	bmi.n	800a362 <_vfiprintf_r+0x32>
 800a35c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a35e:	f7ff ff71 	bl	800a244 <__retarget_lock_acquire_recursive>
 800a362:	89ab      	ldrh	r3, [r5, #12]
 800a364:	071b      	lsls	r3, r3, #28
 800a366:	d501      	bpl.n	800a36c <_vfiprintf_r+0x3c>
 800a368:	692b      	ldr	r3, [r5, #16]
 800a36a:	b9eb      	cbnz	r3, 800a3a8 <_vfiprintf_r+0x78>
 800a36c:	4629      	mov	r1, r5
 800a36e:	4630      	mov	r0, r6
 800a370:	f000 f960 	bl	800a634 <__swsetup_r>
 800a374:	b1c0      	cbz	r0, 800a3a8 <_vfiprintf_r+0x78>
 800a376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a378:	07dc      	lsls	r4, r3, #31
 800a37a:	d50e      	bpl.n	800a39a <_vfiprintf_r+0x6a>
 800a37c:	f04f 30ff 	mov.w	r0, #4294967295
 800a380:	b01d      	add	sp, #116	; 0x74
 800a382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a386:	4b7b      	ldr	r3, [pc, #492]	; (800a574 <_vfiprintf_r+0x244>)
 800a388:	429d      	cmp	r5, r3
 800a38a:	d101      	bne.n	800a390 <_vfiprintf_r+0x60>
 800a38c:	68b5      	ldr	r5, [r6, #8]
 800a38e:	e7df      	b.n	800a350 <_vfiprintf_r+0x20>
 800a390:	4b79      	ldr	r3, [pc, #484]	; (800a578 <_vfiprintf_r+0x248>)
 800a392:	429d      	cmp	r5, r3
 800a394:	bf08      	it	eq
 800a396:	68f5      	ldreq	r5, [r6, #12]
 800a398:	e7da      	b.n	800a350 <_vfiprintf_r+0x20>
 800a39a:	89ab      	ldrh	r3, [r5, #12]
 800a39c:	0598      	lsls	r0, r3, #22
 800a39e:	d4ed      	bmi.n	800a37c <_vfiprintf_r+0x4c>
 800a3a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3a2:	f7ff ff50 	bl	800a246 <__retarget_lock_release_recursive>
 800a3a6:	e7e9      	b.n	800a37c <_vfiprintf_r+0x4c>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ac:	2320      	movs	r3, #32
 800a3ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3b2:	2330      	movs	r3, #48	; 0x30
 800a3b4:	f04f 0901 	mov.w	r9, #1
 800a3b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3bc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a57c <_vfiprintf_r+0x24c>
 800a3c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3c4:	4623      	mov	r3, r4
 800a3c6:	469a      	mov	sl, r3
 800a3c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3cc:	b10a      	cbz	r2, 800a3d2 <_vfiprintf_r+0xa2>
 800a3ce:	2a25      	cmp	r2, #37	; 0x25
 800a3d0:	d1f9      	bne.n	800a3c6 <_vfiprintf_r+0x96>
 800a3d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a3d6:	d00b      	beq.n	800a3f0 <_vfiprintf_r+0xc0>
 800a3d8:	465b      	mov	r3, fp
 800a3da:	4622      	mov	r2, r4
 800a3dc:	4629      	mov	r1, r5
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f7ff ff93 	bl	800a30a <__sfputs_r>
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	f000 80aa 	beq.w	800a53e <_vfiprintf_r+0x20e>
 800a3ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3ec:	445a      	add	r2, fp
 800a3ee:	9209      	str	r2, [sp, #36]	; 0x24
 800a3f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f000 80a2 	beq.w	800a53e <_vfiprintf_r+0x20e>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a404:	f10a 0a01 	add.w	sl, sl, #1
 800a408:	9304      	str	r3, [sp, #16]
 800a40a:	9307      	str	r3, [sp, #28]
 800a40c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a410:	931a      	str	r3, [sp, #104]	; 0x68
 800a412:	4654      	mov	r4, sl
 800a414:	2205      	movs	r2, #5
 800a416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a41a:	4858      	ldr	r0, [pc, #352]	; (800a57c <_vfiprintf_r+0x24c>)
 800a41c:	f7fe f9f0 	bl	8008800 <memchr>
 800a420:	9a04      	ldr	r2, [sp, #16]
 800a422:	b9d8      	cbnz	r0, 800a45c <_vfiprintf_r+0x12c>
 800a424:	06d1      	lsls	r1, r2, #27
 800a426:	bf44      	itt	mi
 800a428:	2320      	movmi	r3, #32
 800a42a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a42e:	0713      	lsls	r3, r2, #28
 800a430:	bf44      	itt	mi
 800a432:	232b      	movmi	r3, #43	; 0x2b
 800a434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a438:	f89a 3000 	ldrb.w	r3, [sl]
 800a43c:	2b2a      	cmp	r3, #42	; 0x2a
 800a43e:	d015      	beq.n	800a46c <_vfiprintf_r+0x13c>
 800a440:	4654      	mov	r4, sl
 800a442:	2000      	movs	r0, #0
 800a444:	f04f 0c0a 	mov.w	ip, #10
 800a448:	9a07      	ldr	r2, [sp, #28]
 800a44a:	4621      	mov	r1, r4
 800a44c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a450:	3b30      	subs	r3, #48	; 0x30
 800a452:	2b09      	cmp	r3, #9
 800a454:	d94e      	bls.n	800a4f4 <_vfiprintf_r+0x1c4>
 800a456:	b1b0      	cbz	r0, 800a486 <_vfiprintf_r+0x156>
 800a458:	9207      	str	r2, [sp, #28]
 800a45a:	e014      	b.n	800a486 <_vfiprintf_r+0x156>
 800a45c:	eba0 0308 	sub.w	r3, r0, r8
 800a460:	fa09 f303 	lsl.w	r3, r9, r3
 800a464:	4313      	orrs	r3, r2
 800a466:	46a2      	mov	sl, r4
 800a468:	9304      	str	r3, [sp, #16]
 800a46a:	e7d2      	b.n	800a412 <_vfiprintf_r+0xe2>
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	1d19      	adds	r1, r3, #4
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	9103      	str	r1, [sp, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	bfbb      	ittet	lt
 800a478:	425b      	neglt	r3, r3
 800a47a:	f042 0202 	orrlt.w	r2, r2, #2
 800a47e:	9307      	strge	r3, [sp, #28]
 800a480:	9307      	strlt	r3, [sp, #28]
 800a482:	bfb8      	it	lt
 800a484:	9204      	strlt	r2, [sp, #16]
 800a486:	7823      	ldrb	r3, [r4, #0]
 800a488:	2b2e      	cmp	r3, #46	; 0x2e
 800a48a:	d10c      	bne.n	800a4a6 <_vfiprintf_r+0x176>
 800a48c:	7863      	ldrb	r3, [r4, #1]
 800a48e:	2b2a      	cmp	r3, #42	; 0x2a
 800a490:	d135      	bne.n	800a4fe <_vfiprintf_r+0x1ce>
 800a492:	9b03      	ldr	r3, [sp, #12]
 800a494:	3402      	adds	r4, #2
 800a496:	1d1a      	adds	r2, r3, #4
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	9203      	str	r2, [sp, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	bfb8      	it	lt
 800a4a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4a4:	9305      	str	r3, [sp, #20]
 800a4a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a58c <_vfiprintf_r+0x25c>
 800a4aa:	2203      	movs	r2, #3
 800a4ac:	4650      	mov	r0, sl
 800a4ae:	7821      	ldrb	r1, [r4, #0]
 800a4b0:	f7fe f9a6 	bl	8008800 <memchr>
 800a4b4:	b140      	cbz	r0, 800a4c8 <_vfiprintf_r+0x198>
 800a4b6:	2340      	movs	r3, #64	; 0x40
 800a4b8:	eba0 000a 	sub.w	r0, r0, sl
 800a4bc:	fa03 f000 	lsl.w	r0, r3, r0
 800a4c0:	9b04      	ldr	r3, [sp, #16]
 800a4c2:	3401      	adds	r4, #1
 800a4c4:	4303      	orrs	r3, r0
 800a4c6:	9304      	str	r3, [sp, #16]
 800a4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4cc:	2206      	movs	r2, #6
 800a4ce:	482c      	ldr	r0, [pc, #176]	; (800a580 <_vfiprintf_r+0x250>)
 800a4d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4d4:	f7fe f994 	bl	8008800 <memchr>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d03f      	beq.n	800a55c <_vfiprintf_r+0x22c>
 800a4dc:	4b29      	ldr	r3, [pc, #164]	; (800a584 <_vfiprintf_r+0x254>)
 800a4de:	bb1b      	cbnz	r3, 800a528 <_vfiprintf_r+0x1f8>
 800a4e0:	9b03      	ldr	r3, [sp, #12]
 800a4e2:	3307      	adds	r3, #7
 800a4e4:	f023 0307 	bic.w	r3, r3, #7
 800a4e8:	3308      	adds	r3, #8
 800a4ea:	9303      	str	r3, [sp, #12]
 800a4ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ee:	443b      	add	r3, r7
 800a4f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f2:	e767      	b.n	800a3c4 <_vfiprintf_r+0x94>
 800a4f4:	460c      	mov	r4, r1
 800a4f6:	2001      	movs	r0, #1
 800a4f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4fc:	e7a5      	b.n	800a44a <_vfiprintf_r+0x11a>
 800a4fe:	2300      	movs	r3, #0
 800a500:	f04f 0c0a 	mov.w	ip, #10
 800a504:	4619      	mov	r1, r3
 800a506:	3401      	adds	r4, #1
 800a508:	9305      	str	r3, [sp, #20]
 800a50a:	4620      	mov	r0, r4
 800a50c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a510:	3a30      	subs	r2, #48	; 0x30
 800a512:	2a09      	cmp	r2, #9
 800a514:	d903      	bls.n	800a51e <_vfiprintf_r+0x1ee>
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0c5      	beq.n	800a4a6 <_vfiprintf_r+0x176>
 800a51a:	9105      	str	r1, [sp, #20]
 800a51c:	e7c3      	b.n	800a4a6 <_vfiprintf_r+0x176>
 800a51e:	4604      	mov	r4, r0
 800a520:	2301      	movs	r3, #1
 800a522:	fb0c 2101 	mla	r1, ip, r1, r2
 800a526:	e7f0      	b.n	800a50a <_vfiprintf_r+0x1da>
 800a528:	ab03      	add	r3, sp, #12
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	462a      	mov	r2, r5
 800a52e:	4630      	mov	r0, r6
 800a530:	4b15      	ldr	r3, [pc, #84]	; (800a588 <_vfiprintf_r+0x258>)
 800a532:	a904      	add	r1, sp, #16
 800a534:	f7fb f9ee 	bl	8005914 <_printf_float>
 800a538:	4607      	mov	r7, r0
 800a53a:	1c78      	adds	r0, r7, #1
 800a53c:	d1d6      	bne.n	800a4ec <_vfiprintf_r+0x1bc>
 800a53e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a540:	07d9      	lsls	r1, r3, #31
 800a542:	d405      	bmi.n	800a550 <_vfiprintf_r+0x220>
 800a544:	89ab      	ldrh	r3, [r5, #12]
 800a546:	059a      	lsls	r2, r3, #22
 800a548:	d402      	bmi.n	800a550 <_vfiprintf_r+0x220>
 800a54a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a54c:	f7ff fe7b 	bl	800a246 <__retarget_lock_release_recursive>
 800a550:	89ab      	ldrh	r3, [r5, #12]
 800a552:	065b      	lsls	r3, r3, #25
 800a554:	f53f af12 	bmi.w	800a37c <_vfiprintf_r+0x4c>
 800a558:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a55a:	e711      	b.n	800a380 <_vfiprintf_r+0x50>
 800a55c:	ab03      	add	r3, sp, #12
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	462a      	mov	r2, r5
 800a562:	4630      	mov	r0, r6
 800a564:	4b08      	ldr	r3, [pc, #32]	; (800a588 <_vfiprintf_r+0x258>)
 800a566:	a904      	add	r1, sp, #16
 800a568:	f7fb fc70 	bl	8005e4c <_printf_i>
 800a56c:	e7e4      	b.n	800a538 <_vfiprintf_r+0x208>
 800a56e:	bf00      	nop
 800a570:	0800b02c 	.word	0x0800b02c
 800a574:	0800b04c 	.word	0x0800b04c
 800a578:	0800b00c 	.word	0x0800b00c
 800a57c:	0800afa4 	.word	0x0800afa4
 800a580:	0800afae 	.word	0x0800afae
 800a584:	08005915 	.word	0x08005915
 800a588:	0800a30b 	.word	0x0800a30b
 800a58c:	0800afaa 	.word	0x0800afaa

0800a590 <__swbuf_r>:
 800a590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a592:	460e      	mov	r6, r1
 800a594:	4614      	mov	r4, r2
 800a596:	4605      	mov	r5, r0
 800a598:	b118      	cbz	r0, 800a5a2 <__swbuf_r+0x12>
 800a59a:	6983      	ldr	r3, [r0, #24]
 800a59c:	b90b      	cbnz	r3, 800a5a2 <__swbuf_r+0x12>
 800a59e:	f7ff fda1 	bl	800a0e4 <__sinit>
 800a5a2:	4b21      	ldr	r3, [pc, #132]	; (800a628 <__swbuf_r+0x98>)
 800a5a4:	429c      	cmp	r4, r3
 800a5a6:	d12b      	bne.n	800a600 <__swbuf_r+0x70>
 800a5a8:	686c      	ldr	r4, [r5, #4]
 800a5aa:	69a3      	ldr	r3, [r4, #24]
 800a5ac:	60a3      	str	r3, [r4, #8]
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	071a      	lsls	r2, r3, #28
 800a5b2:	d52f      	bpl.n	800a614 <__swbuf_r+0x84>
 800a5b4:	6923      	ldr	r3, [r4, #16]
 800a5b6:	b36b      	cbz	r3, 800a614 <__swbuf_r+0x84>
 800a5b8:	6923      	ldr	r3, [r4, #16]
 800a5ba:	6820      	ldr	r0, [r4, #0]
 800a5bc:	b2f6      	uxtb	r6, r6
 800a5be:	1ac0      	subs	r0, r0, r3
 800a5c0:	6963      	ldr	r3, [r4, #20]
 800a5c2:	4637      	mov	r7, r6
 800a5c4:	4283      	cmp	r3, r0
 800a5c6:	dc04      	bgt.n	800a5d2 <__swbuf_r+0x42>
 800a5c8:	4621      	mov	r1, r4
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	f7ff fcf6 	bl	8009fbc <_fflush_r>
 800a5d0:	bb30      	cbnz	r0, 800a620 <__swbuf_r+0x90>
 800a5d2:	68a3      	ldr	r3, [r4, #8]
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	60a3      	str	r3, [r4, #8]
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	6022      	str	r2, [r4, #0]
 800a5e0:	701e      	strb	r6, [r3, #0]
 800a5e2:	6963      	ldr	r3, [r4, #20]
 800a5e4:	4283      	cmp	r3, r0
 800a5e6:	d004      	beq.n	800a5f2 <__swbuf_r+0x62>
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	07db      	lsls	r3, r3, #31
 800a5ec:	d506      	bpl.n	800a5fc <__swbuf_r+0x6c>
 800a5ee:	2e0a      	cmp	r6, #10
 800a5f0:	d104      	bne.n	800a5fc <__swbuf_r+0x6c>
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	f7ff fce1 	bl	8009fbc <_fflush_r>
 800a5fa:	b988      	cbnz	r0, 800a620 <__swbuf_r+0x90>
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a600:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <__swbuf_r+0x9c>)
 800a602:	429c      	cmp	r4, r3
 800a604:	d101      	bne.n	800a60a <__swbuf_r+0x7a>
 800a606:	68ac      	ldr	r4, [r5, #8]
 800a608:	e7cf      	b.n	800a5aa <__swbuf_r+0x1a>
 800a60a:	4b09      	ldr	r3, [pc, #36]	; (800a630 <__swbuf_r+0xa0>)
 800a60c:	429c      	cmp	r4, r3
 800a60e:	bf08      	it	eq
 800a610:	68ec      	ldreq	r4, [r5, #12]
 800a612:	e7ca      	b.n	800a5aa <__swbuf_r+0x1a>
 800a614:	4621      	mov	r1, r4
 800a616:	4628      	mov	r0, r5
 800a618:	f000 f80c 	bl	800a634 <__swsetup_r>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d0cb      	beq.n	800a5b8 <__swbuf_r+0x28>
 800a620:	f04f 37ff 	mov.w	r7, #4294967295
 800a624:	e7ea      	b.n	800a5fc <__swbuf_r+0x6c>
 800a626:	bf00      	nop
 800a628:	0800b02c 	.word	0x0800b02c
 800a62c:	0800b04c 	.word	0x0800b04c
 800a630:	0800b00c 	.word	0x0800b00c

0800a634 <__swsetup_r>:
 800a634:	4b32      	ldr	r3, [pc, #200]	; (800a700 <__swsetup_r+0xcc>)
 800a636:	b570      	push	{r4, r5, r6, lr}
 800a638:	681d      	ldr	r5, [r3, #0]
 800a63a:	4606      	mov	r6, r0
 800a63c:	460c      	mov	r4, r1
 800a63e:	b125      	cbz	r5, 800a64a <__swsetup_r+0x16>
 800a640:	69ab      	ldr	r3, [r5, #24]
 800a642:	b913      	cbnz	r3, 800a64a <__swsetup_r+0x16>
 800a644:	4628      	mov	r0, r5
 800a646:	f7ff fd4d 	bl	800a0e4 <__sinit>
 800a64a:	4b2e      	ldr	r3, [pc, #184]	; (800a704 <__swsetup_r+0xd0>)
 800a64c:	429c      	cmp	r4, r3
 800a64e:	d10f      	bne.n	800a670 <__swsetup_r+0x3c>
 800a650:	686c      	ldr	r4, [r5, #4]
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a658:	0719      	lsls	r1, r3, #28
 800a65a:	d42c      	bmi.n	800a6b6 <__swsetup_r+0x82>
 800a65c:	06dd      	lsls	r5, r3, #27
 800a65e:	d411      	bmi.n	800a684 <__swsetup_r+0x50>
 800a660:	2309      	movs	r3, #9
 800a662:	6033      	str	r3, [r6, #0]
 800a664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a668:	f04f 30ff 	mov.w	r0, #4294967295
 800a66c:	81a3      	strh	r3, [r4, #12]
 800a66e:	e03e      	b.n	800a6ee <__swsetup_r+0xba>
 800a670:	4b25      	ldr	r3, [pc, #148]	; (800a708 <__swsetup_r+0xd4>)
 800a672:	429c      	cmp	r4, r3
 800a674:	d101      	bne.n	800a67a <__swsetup_r+0x46>
 800a676:	68ac      	ldr	r4, [r5, #8]
 800a678:	e7eb      	b.n	800a652 <__swsetup_r+0x1e>
 800a67a:	4b24      	ldr	r3, [pc, #144]	; (800a70c <__swsetup_r+0xd8>)
 800a67c:	429c      	cmp	r4, r3
 800a67e:	bf08      	it	eq
 800a680:	68ec      	ldreq	r4, [r5, #12]
 800a682:	e7e6      	b.n	800a652 <__swsetup_r+0x1e>
 800a684:	0758      	lsls	r0, r3, #29
 800a686:	d512      	bpl.n	800a6ae <__swsetup_r+0x7a>
 800a688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a68a:	b141      	cbz	r1, 800a69e <__swsetup_r+0x6a>
 800a68c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a690:	4299      	cmp	r1, r3
 800a692:	d002      	beq.n	800a69a <__swsetup_r+0x66>
 800a694:	4630      	mov	r0, r6
 800a696:	f7fe fd95 	bl	80091c4 <_free_r>
 800a69a:	2300      	movs	r3, #0
 800a69c:	6363      	str	r3, [r4, #52]	; 0x34
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6a4:	81a3      	strh	r3, [r4, #12]
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	6063      	str	r3, [r4, #4]
 800a6aa:	6923      	ldr	r3, [r4, #16]
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	f043 0308 	orr.w	r3, r3, #8
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	6923      	ldr	r3, [r4, #16]
 800a6b8:	b94b      	cbnz	r3, 800a6ce <__swsetup_r+0x9a>
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6c4:	d003      	beq.n	800a6ce <__swsetup_r+0x9a>
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f000 f84d 	bl	800a768 <__smakebuf_r>
 800a6ce:	89a0      	ldrh	r0, [r4, #12]
 800a6d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6d4:	f010 0301 	ands.w	r3, r0, #1
 800a6d8:	d00a      	beq.n	800a6f0 <__swsetup_r+0xbc>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	60a3      	str	r3, [r4, #8]
 800a6de:	6963      	ldr	r3, [r4, #20]
 800a6e0:	425b      	negs	r3, r3
 800a6e2:	61a3      	str	r3, [r4, #24]
 800a6e4:	6923      	ldr	r3, [r4, #16]
 800a6e6:	b943      	cbnz	r3, 800a6fa <__swsetup_r+0xc6>
 800a6e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6ec:	d1ba      	bne.n	800a664 <__swsetup_r+0x30>
 800a6ee:	bd70      	pop	{r4, r5, r6, pc}
 800a6f0:	0781      	lsls	r1, r0, #30
 800a6f2:	bf58      	it	pl
 800a6f4:	6963      	ldrpl	r3, [r4, #20]
 800a6f6:	60a3      	str	r3, [r4, #8]
 800a6f8:	e7f4      	b.n	800a6e4 <__swsetup_r+0xb0>
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	e7f7      	b.n	800a6ee <__swsetup_r+0xba>
 800a6fe:	bf00      	nop
 800a700:	2000000c 	.word	0x2000000c
 800a704:	0800b02c 	.word	0x0800b02c
 800a708:	0800b04c 	.word	0x0800b04c
 800a70c:	0800b00c 	.word	0x0800b00c

0800a710 <abort>:
 800a710:	2006      	movs	r0, #6
 800a712:	b508      	push	{r3, lr}
 800a714:	f000 f898 	bl	800a848 <raise>
 800a718:	2001      	movs	r0, #1
 800a71a:	f7f7 fe52 	bl	80023c2 <_exit>

0800a71e <__swhatbuf_r>:
 800a71e:	b570      	push	{r4, r5, r6, lr}
 800a720:	460e      	mov	r6, r1
 800a722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a726:	4614      	mov	r4, r2
 800a728:	2900      	cmp	r1, #0
 800a72a:	461d      	mov	r5, r3
 800a72c:	b096      	sub	sp, #88	; 0x58
 800a72e:	da07      	bge.n	800a740 <__swhatbuf_r+0x22>
 800a730:	2300      	movs	r3, #0
 800a732:	602b      	str	r3, [r5, #0]
 800a734:	89b3      	ldrh	r3, [r6, #12]
 800a736:	061a      	lsls	r2, r3, #24
 800a738:	d410      	bmi.n	800a75c <__swhatbuf_r+0x3e>
 800a73a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a73e:	e00e      	b.n	800a75e <__swhatbuf_r+0x40>
 800a740:	466a      	mov	r2, sp
 800a742:	f000 f89d 	bl	800a880 <_fstat_r>
 800a746:	2800      	cmp	r0, #0
 800a748:	dbf2      	blt.n	800a730 <__swhatbuf_r+0x12>
 800a74a:	9a01      	ldr	r2, [sp, #4]
 800a74c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a750:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a754:	425a      	negs	r2, r3
 800a756:	415a      	adcs	r2, r3
 800a758:	602a      	str	r2, [r5, #0]
 800a75a:	e7ee      	b.n	800a73a <__swhatbuf_r+0x1c>
 800a75c:	2340      	movs	r3, #64	; 0x40
 800a75e:	2000      	movs	r0, #0
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	b016      	add	sp, #88	; 0x58
 800a764:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a768 <__smakebuf_r>:
 800a768:	898b      	ldrh	r3, [r1, #12]
 800a76a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a76c:	079d      	lsls	r5, r3, #30
 800a76e:	4606      	mov	r6, r0
 800a770:	460c      	mov	r4, r1
 800a772:	d507      	bpl.n	800a784 <__smakebuf_r+0x1c>
 800a774:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	6123      	str	r3, [r4, #16]
 800a77c:	2301      	movs	r3, #1
 800a77e:	6163      	str	r3, [r4, #20]
 800a780:	b002      	add	sp, #8
 800a782:	bd70      	pop	{r4, r5, r6, pc}
 800a784:	466a      	mov	r2, sp
 800a786:	ab01      	add	r3, sp, #4
 800a788:	f7ff ffc9 	bl	800a71e <__swhatbuf_r>
 800a78c:	9900      	ldr	r1, [sp, #0]
 800a78e:	4605      	mov	r5, r0
 800a790:	4630      	mov	r0, r6
 800a792:	f7fe fd63 	bl	800925c <_malloc_r>
 800a796:	b948      	cbnz	r0, 800a7ac <__smakebuf_r+0x44>
 800a798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a79c:	059a      	lsls	r2, r3, #22
 800a79e:	d4ef      	bmi.n	800a780 <__smakebuf_r+0x18>
 800a7a0:	f023 0303 	bic.w	r3, r3, #3
 800a7a4:	f043 0302 	orr.w	r3, r3, #2
 800a7a8:	81a3      	strh	r3, [r4, #12]
 800a7aa:	e7e3      	b.n	800a774 <__smakebuf_r+0xc>
 800a7ac:	4b0d      	ldr	r3, [pc, #52]	; (800a7e4 <__smakebuf_r+0x7c>)
 800a7ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7b0:	89a3      	ldrh	r3, [r4, #12]
 800a7b2:	6020      	str	r0, [r4, #0]
 800a7b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7b8:	81a3      	strh	r3, [r4, #12]
 800a7ba:	9b00      	ldr	r3, [sp, #0]
 800a7bc:	6120      	str	r0, [r4, #16]
 800a7be:	6163      	str	r3, [r4, #20]
 800a7c0:	9b01      	ldr	r3, [sp, #4]
 800a7c2:	b15b      	cbz	r3, 800a7dc <__smakebuf_r+0x74>
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7ca:	f000 f86b 	bl	800a8a4 <_isatty_r>
 800a7ce:	b128      	cbz	r0, 800a7dc <__smakebuf_r+0x74>
 800a7d0:	89a3      	ldrh	r3, [r4, #12]
 800a7d2:	f023 0303 	bic.w	r3, r3, #3
 800a7d6:	f043 0301 	orr.w	r3, r3, #1
 800a7da:	81a3      	strh	r3, [r4, #12]
 800a7dc:	89a0      	ldrh	r0, [r4, #12]
 800a7de:	4305      	orrs	r5, r0
 800a7e0:	81a5      	strh	r5, [r4, #12]
 800a7e2:	e7cd      	b.n	800a780 <__smakebuf_r+0x18>
 800a7e4:	0800a07d 	.word	0x0800a07d

0800a7e8 <_malloc_usable_size_r>:
 800a7e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ec:	1f18      	subs	r0, r3, #4
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	bfbc      	itt	lt
 800a7f2:	580b      	ldrlt	r3, [r1, r0]
 800a7f4:	18c0      	addlt	r0, r0, r3
 800a7f6:	4770      	bx	lr

0800a7f8 <_raise_r>:
 800a7f8:	291f      	cmp	r1, #31
 800a7fa:	b538      	push	{r3, r4, r5, lr}
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	460d      	mov	r5, r1
 800a800:	d904      	bls.n	800a80c <_raise_r+0x14>
 800a802:	2316      	movs	r3, #22
 800a804:	6003      	str	r3, [r0, #0]
 800a806:	f04f 30ff 	mov.w	r0, #4294967295
 800a80a:	bd38      	pop	{r3, r4, r5, pc}
 800a80c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a80e:	b112      	cbz	r2, 800a816 <_raise_r+0x1e>
 800a810:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a814:	b94b      	cbnz	r3, 800a82a <_raise_r+0x32>
 800a816:	4620      	mov	r0, r4
 800a818:	f000 f830 	bl	800a87c <_getpid_r>
 800a81c:	462a      	mov	r2, r5
 800a81e:	4601      	mov	r1, r0
 800a820:	4620      	mov	r0, r4
 800a822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a826:	f000 b817 	b.w	800a858 <_kill_r>
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d00a      	beq.n	800a844 <_raise_r+0x4c>
 800a82e:	1c59      	adds	r1, r3, #1
 800a830:	d103      	bne.n	800a83a <_raise_r+0x42>
 800a832:	2316      	movs	r3, #22
 800a834:	6003      	str	r3, [r0, #0]
 800a836:	2001      	movs	r0, #1
 800a838:	e7e7      	b.n	800a80a <_raise_r+0x12>
 800a83a:	2400      	movs	r4, #0
 800a83c:	4628      	mov	r0, r5
 800a83e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a842:	4798      	blx	r3
 800a844:	2000      	movs	r0, #0
 800a846:	e7e0      	b.n	800a80a <_raise_r+0x12>

0800a848 <raise>:
 800a848:	4b02      	ldr	r3, [pc, #8]	; (800a854 <raise+0xc>)
 800a84a:	4601      	mov	r1, r0
 800a84c:	6818      	ldr	r0, [r3, #0]
 800a84e:	f7ff bfd3 	b.w	800a7f8 <_raise_r>
 800a852:	bf00      	nop
 800a854:	2000000c 	.word	0x2000000c

0800a858 <_kill_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	2300      	movs	r3, #0
 800a85c:	4d06      	ldr	r5, [pc, #24]	; (800a878 <_kill_r+0x20>)
 800a85e:	4604      	mov	r4, r0
 800a860:	4608      	mov	r0, r1
 800a862:	4611      	mov	r1, r2
 800a864:	602b      	str	r3, [r5, #0]
 800a866:	f7f7 fd9c 	bl	80023a2 <_kill>
 800a86a:	1c43      	adds	r3, r0, #1
 800a86c:	d102      	bne.n	800a874 <_kill_r+0x1c>
 800a86e:	682b      	ldr	r3, [r5, #0]
 800a870:	b103      	cbz	r3, 800a874 <_kill_r+0x1c>
 800a872:	6023      	str	r3, [r4, #0]
 800a874:	bd38      	pop	{r3, r4, r5, pc}
 800a876:	bf00      	nop
 800a878:	200003a0 	.word	0x200003a0

0800a87c <_getpid_r>:
 800a87c:	f7f7 bd8a 	b.w	8002394 <_getpid>

0800a880 <_fstat_r>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	2300      	movs	r3, #0
 800a884:	4d06      	ldr	r5, [pc, #24]	; (800a8a0 <_fstat_r+0x20>)
 800a886:	4604      	mov	r4, r0
 800a888:	4608      	mov	r0, r1
 800a88a:	4611      	mov	r1, r2
 800a88c:	602b      	str	r3, [r5, #0]
 800a88e:	f7f7 fde6 	bl	800245e <_fstat>
 800a892:	1c43      	adds	r3, r0, #1
 800a894:	d102      	bne.n	800a89c <_fstat_r+0x1c>
 800a896:	682b      	ldr	r3, [r5, #0]
 800a898:	b103      	cbz	r3, 800a89c <_fstat_r+0x1c>
 800a89a:	6023      	str	r3, [r4, #0]
 800a89c:	bd38      	pop	{r3, r4, r5, pc}
 800a89e:	bf00      	nop
 800a8a0:	200003a0 	.word	0x200003a0

0800a8a4 <_isatty_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	4d05      	ldr	r5, [pc, #20]	; (800a8c0 <_isatty_r+0x1c>)
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	602b      	str	r3, [r5, #0]
 800a8b0:	f7f7 fde4 	bl	800247c <_isatty>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d102      	bne.n	800a8be <_isatty_r+0x1a>
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	b103      	cbz	r3, 800a8be <_isatty_r+0x1a>
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	200003a0 	.word	0x200003a0

0800a8c4 <_init>:
 800a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c6:	bf00      	nop
 800a8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ca:	bc08      	pop	{r3}
 800a8cc:	469e      	mov	lr, r3
 800a8ce:	4770      	bx	lr

0800a8d0 <_fini>:
 800a8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d2:	bf00      	nop
 800a8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8d6:	bc08      	pop	{r3}
 800a8d8:	469e      	mov	lr, r3
 800a8da:	4770      	bx	lr
