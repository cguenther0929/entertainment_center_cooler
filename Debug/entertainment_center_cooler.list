
entertainment_center_cooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000589c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08005a84  08005a84  00015a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e80  08005e80  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e88  08005e88  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e8c  08005e8c  00015e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000070  08005f00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005f00  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001553b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267f  00000000  00000000  000355d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00037c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00038ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff4b  00000000  00000000  00039850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fe1  00000000  00000000  0005979b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5c7c  00000000  00000000  0006a77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001203f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004718  00000000  00000000  0012044c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	08005a6c 	.word	0x08005a6c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	08005a6c 	.word	0x08005a6c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__aeabi_d2f>:
 80009d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009dc:	bf24      	itt	cs
 80009de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009e6:	d90d      	bls.n	8000a04 <__aeabi_d2f+0x30>
 80009e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009fc:	bf08      	it	eq
 80009fe:	f020 0001 	biceq.w	r0, r0, #1
 8000a02:	4770      	bx	lr
 8000a04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a08:	d121      	bne.n	8000a4e <__aeabi_d2f+0x7a>
 8000a0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a0e:	bfbc      	itt	lt
 8000a10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a14:	4770      	bxlt	lr
 8000a16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a1e:	f1c2 0218 	rsb	r2, r2, #24
 8000a22:	f1c2 0c20 	rsb	ip, r2, #32
 8000a26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a2e:	bf18      	it	ne
 8000a30:	f040 0001 	orrne.w	r0, r0, #1
 8000a34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a40:	ea40 000c 	orr.w	r0, r0, ip
 8000a44:	fa23 f302 	lsr.w	r3, r3, r2
 8000a48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a4c:	e7cc      	b.n	80009e8 <__aeabi_d2f+0x14>
 8000a4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a52:	d107      	bne.n	8000a64 <__aeabi_d2f+0x90>
 8000a54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a58:	bf1e      	ittt	ne
 8000a5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a62:	4770      	bxne	lr
 8000a64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_frsub>:
 8000a74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a78:	e002      	b.n	8000a80 <__addsf3>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_fsub>:
 8000a7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a80 <__addsf3>:
 8000a80:	0042      	lsls	r2, r0, #1
 8000a82:	bf1f      	itttt	ne
 8000a84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a88:	ea92 0f03 	teqne	r2, r3
 8000a8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a94:	d06a      	beq.n	8000b6c <__addsf3+0xec>
 8000a96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a9e:	bfc1      	itttt	gt
 8000aa0:	18d2      	addgt	r2, r2, r3
 8000aa2:	4041      	eorgt	r1, r0
 8000aa4:	4048      	eorgt	r0, r1
 8000aa6:	4041      	eorgt	r1, r0
 8000aa8:	bfb8      	it	lt
 8000aaa:	425b      	neglt	r3, r3
 8000aac:	2b19      	cmp	r3, #25
 8000aae:	bf88      	it	hi
 8000ab0:	4770      	bxhi	lr
 8000ab2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ab6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ace:	bf18      	it	ne
 8000ad0:	4249      	negne	r1, r1
 8000ad2:	ea92 0f03 	teq	r2, r3
 8000ad6:	d03f      	beq.n	8000b58 <__addsf3+0xd8>
 8000ad8:	f1a2 0201 	sub.w	r2, r2, #1
 8000adc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae0:	eb10 000c 	adds.w	r0, r0, ip
 8000ae4:	f1c3 0320 	rsb	r3, r3, #32
 8000ae8:	fa01 f103 	lsl.w	r1, r1, r3
 8000aec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af0:	d502      	bpl.n	8000af8 <__addsf3+0x78>
 8000af2:	4249      	negs	r1, r1
 8000af4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000af8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000afc:	d313      	bcc.n	8000b26 <__addsf3+0xa6>
 8000afe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b02:	d306      	bcc.n	8000b12 <__addsf3+0x92>
 8000b04:	0840      	lsrs	r0, r0, #1
 8000b06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b0a:	f102 0201 	add.w	r2, r2, #1
 8000b0e:	2afe      	cmp	r2, #254	; 0xfe
 8000b10:	d251      	bcs.n	8000bb6 <__addsf3+0x136>
 8000b12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1a:	bf08      	it	eq
 8000b1c:	f020 0001 	biceq.w	r0, r0, #1
 8000b20:	ea40 0003 	orr.w	r0, r0, r3
 8000b24:	4770      	bx	lr
 8000b26:	0049      	lsls	r1, r1, #1
 8000b28:	eb40 0000 	adc.w	r0, r0, r0
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	bf28      	it	cs
 8000b30:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b34:	d2ed      	bcs.n	8000b12 <__addsf3+0x92>
 8000b36:	fab0 fc80 	clz	ip, r0
 8000b3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b46:	bfaa      	itet	ge
 8000b48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b4c:	4252      	neglt	r2, r2
 8000b4e:	4318      	orrge	r0, r3
 8000b50:	bfbc      	itt	lt
 8000b52:	40d0      	lsrlt	r0, r2
 8000b54:	4318      	orrlt	r0, r3
 8000b56:	4770      	bx	lr
 8000b58:	f092 0f00 	teq	r2, #0
 8000b5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b60:	bf06      	itte	eq
 8000b62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b66:	3201      	addeq	r2, #1
 8000b68:	3b01      	subne	r3, #1
 8000b6a:	e7b5      	b.n	8000ad8 <__addsf3+0x58>
 8000b6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b74:	bf18      	it	ne
 8000b76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7a:	d021      	beq.n	8000bc0 <__addsf3+0x140>
 8000b7c:	ea92 0f03 	teq	r2, r3
 8000b80:	d004      	beq.n	8000b8c <__addsf3+0x10c>
 8000b82:	f092 0f00 	teq	r2, #0
 8000b86:	bf08      	it	eq
 8000b88:	4608      	moveq	r0, r1
 8000b8a:	4770      	bx	lr
 8000b8c:	ea90 0f01 	teq	r0, r1
 8000b90:	bf1c      	itt	ne
 8000b92:	2000      	movne	r0, #0
 8000b94:	4770      	bxne	lr
 8000b96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b9a:	d104      	bne.n	8000ba6 <__addsf3+0x126>
 8000b9c:	0040      	lsls	r0, r0, #1
 8000b9e:	bf28      	it	cs
 8000ba0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	4770      	bx	lr
 8000ba6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000baa:	bf3c      	itt	cc
 8000bac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bxcc	lr
 8000bb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbe:	4770      	bx	lr
 8000bc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bc4:	bf16      	itet	ne
 8000bc6:	4608      	movne	r0, r1
 8000bc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bcc:	4601      	movne	r1, r0
 8000bce:	0242      	lsls	r2, r0, #9
 8000bd0:	bf06      	itte	eq
 8000bd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bd6:	ea90 0f01 	teqeq	r0, r1
 8000bda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_ui2f>:
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	e004      	b.n	8000bf0 <__aeabi_i2f+0x8>
 8000be6:	bf00      	nop

08000be8 <__aeabi_i2f>:
 8000be8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bec:	bf48      	it	mi
 8000bee:	4240      	negmi	r0, r0
 8000bf0:	ea5f 0c00 	movs.w	ip, r0
 8000bf4:	bf08      	it	eq
 8000bf6:	4770      	bxeq	lr
 8000bf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bfc:	4601      	mov	r1, r0
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	e01c      	b.n	8000c3e <__aeabi_l2f+0x2a>

08000c04 <__aeabi_ul2f>:
 8000c04:	ea50 0201 	orrs.w	r2, r0, r1
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f04f 0300 	mov.w	r3, #0
 8000c10:	e00a      	b.n	8000c28 <__aeabi_l2f+0x14>
 8000c12:	bf00      	nop

08000c14 <__aeabi_l2f>:
 8000c14:	ea50 0201 	orrs.w	r2, r0, r1
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c20:	d502      	bpl.n	8000c28 <__aeabi_l2f+0x14>
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	ea5f 0c01 	movs.w	ip, r1
 8000c2c:	bf02      	ittt	eq
 8000c2e:	4684      	moveq	ip, r0
 8000c30:	4601      	moveq	r1, r0
 8000c32:	2000      	moveq	r0, #0
 8000c34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c38:	bf08      	it	eq
 8000c3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c42:	fabc f28c 	clz	r2, ip
 8000c46:	3a08      	subs	r2, #8
 8000c48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c4c:	db10      	blt.n	8000c70 <__aeabi_l2f+0x5c>
 8000c4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c52:	4463      	add	r3, ip
 8000c54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c58:	f1c2 0220 	rsb	r2, r2, #32
 8000c5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c60:	fa20 f202 	lsr.w	r2, r0, r2
 8000c64:	eb43 0002 	adc.w	r0, r3, r2
 8000c68:	bf08      	it	eq
 8000c6a:	f020 0001 	biceq.w	r0, r0, #1
 8000c6e:	4770      	bx	lr
 8000c70:	f102 0220 	add.w	r2, r2, #32
 8000c74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c80:	fa21 f202 	lsr.w	r2, r1, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_fmul>:
 8000c90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c98:	bf1e      	ittt	ne
 8000c9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c9e:	ea92 0f0c 	teqne	r2, ip
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d06f      	beq.n	8000d88 <__aeabi_fmul+0xf8>
 8000ca8:	441a      	add	r2, r3
 8000caa:	ea80 0c01 	eor.w	ip, r0, r1
 8000cae:	0240      	lsls	r0, r0, #9
 8000cb0:	bf18      	it	ne
 8000cb2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cb6:	d01e      	beq.n	8000cf6 <__aeabi_fmul+0x66>
 8000cb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cbc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cc0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cc4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cc8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ccc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cd0:	bf3e      	ittt	cc
 8000cd2:	0049      	lslcc	r1, r1, #1
 8000cd4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cd8:	005b      	lslcc	r3, r3, #1
 8000cda:	ea40 0001 	orr.w	r0, r0, r1
 8000cde:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ce2:	2afd      	cmp	r2, #253	; 0xfd
 8000ce4:	d81d      	bhi.n	8000d22 <__aeabi_fmul+0x92>
 8000ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	4770      	bx	lr
 8000cf6:	f090 0f00 	teq	r0, #0
 8000cfa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cfe:	bf08      	it	eq
 8000d00:	0249      	lsleq	r1, r1, #9
 8000d02:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d06:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d0a:	3a7f      	subs	r2, #127	; 0x7f
 8000d0c:	bfc2      	ittt	gt
 8000d0e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d12:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d16:	4770      	bxgt	lr
 8000d18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	3a01      	subs	r2, #1
 8000d22:	dc5d      	bgt.n	8000de0 <__aeabi_fmul+0x150>
 8000d24:	f112 0f19 	cmn.w	r2, #25
 8000d28:	bfdc      	itt	le
 8000d2a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d2e:	4770      	bxle	lr
 8000d30:	f1c2 0200 	rsb	r2, r2, #0
 8000d34:	0041      	lsls	r1, r0, #1
 8000d36:	fa21 f102 	lsr.w	r1, r1, r2
 8000d3a:	f1c2 0220 	rsb	r2, r2, #32
 8000d3e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d42:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d46:	f140 0000 	adc.w	r0, r0, #0
 8000d4a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d4e:	bf08      	it	eq
 8000d50:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d54:	4770      	bx	lr
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d5e:	bf02      	ittt	eq
 8000d60:	0040      	lsleq	r0, r0, #1
 8000d62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d66:	3a01      	subeq	r2, #1
 8000d68:	d0f9      	beq.n	8000d5e <__aeabi_fmul+0xce>
 8000d6a:	ea40 000c 	orr.w	r0, r0, ip
 8000d6e:	f093 0f00 	teq	r3, #0
 8000d72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d76:	bf02      	ittt	eq
 8000d78:	0049      	lsleq	r1, r1, #1
 8000d7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d7e:	3b01      	subeq	r3, #1
 8000d80:	d0f9      	beq.n	8000d76 <__aeabi_fmul+0xe6>
 8000d82:	ea41 010c 	orr.w	r1, r1, ip
 8000d86:	e78f      	b.n	8000ca8 <__aeabi_fmul+0x18>
 8000d88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d8c:	ea92 0f0c 	teq	r2, ip
 8000d90:	bf18      	it	ne
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d00a      	beq.n	8000dae <__aeabi_fmul+0x11e>
 8000d98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d9c:	bf18      	it	ne
 8000d9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000da2:	d1d8      	bne.n	8000d56 <__aeabi_fmul+0xc6>
 8000da4:	ea80 0001 	eor.w	r0, r0, r1
 8000da8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	bf17      	itett	ne
 8000db4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000db8:	4608      	moveq	r0, r1
 8000dba:	f091 0f00 	teqne	r1, #0
 8000dbe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dc2:	d014      	beq.n	8000dee <__aeabi_fmul+0x15e>
 8000dc4:	ea92 0f0c 	teq	r2, ip
 8000dc8:	d101      	bne.n	8000dce <__aeabi_fmul+0x13e>
 8000dca:	0242      	lsls	r2, r0, #9
 8000dcc:	d10f      	bne.n	8000dee <__aeabi_fmul+0x15e>
 8000dce:	ea93 0f0c 	teq	r3, ip
 8000dd2:	d103      	bne.n	8000ddc <__aeabi_fmul+0x14c>
 8000dd4:	024b      	lsls	r3, r1, #9
 8000dd6:	bf18      	it	ne
 8000dd8:	4608      	movne	r0, r1
 8000dda:	d108      	bne.n	8000dee <__aeabi_fmul+0x15e>
 8000ddc:	ea80 0001 	eor.w	r0, r0, r1
 8000de0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dec:	4770      	bx	lr
 8000dee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000df6:	4770      	bx	lr

08000df8 <__aeabi_fdiv>:
 8000df8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e00:	bf1e      	ittt	ne
 8000e02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e06:	ea92 0f0c 	teqne	r2, ip
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d069      	beq.n	8000ee4 <__aeabi_fdiv+0xec>
 8000e10:	eba2 0203 	sub.w	r2, r2, r3
 8000e14:	ea80 0c01 	eor.w	ip, r0, r1
 8000e18:	0249      	lsls	r1, r1, #9
 8000e1a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e1e:	d037      	beq.n	8000e90 <__aeabi_fdiv+0x98>
 8000e20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e24:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e28:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e30:	428b      	cmp	r3, r1
 8000e32:	bf38      	it	cc
 8000e34:	005b      	lslcc	r3, r3, #1
 8000e36:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e3a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	bf24      	itt	cs
 8000e42:	1a5b      	subcs	r3, r3, r1
 8000e44:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e48:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e4c:	bf24      	itt	cs
 8000e4e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e52:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e56:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e5a:	bf24      	itt	cs
 8000e5c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e68:	bf24      	itt	cs
 8000e6a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e6e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e7a:	d1e0      	bne.n	8000e3e <__aeabi_fdiv+0x46>
 8000e7c:	2afd      	cmp	r2, #253	; 0xfd
 8000e7e:	f63f af50 	bhi.w	8000d22 <__aeabi_fmul+0x92>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e88:	bf08      	it	eq
 8000e8a:	f020 0001 	biceq.w	r0, r0, #1
 8000e8e:	4770      	bx	lr
 8000e90:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e94:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e98:	327f      	adds	r2, #127	; 0x7f
 8000e9a:	bfc2      	ittt	gt
 8000e9c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea4:	4770      	bxgt	lr
 8000ea6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	3a01      	subs	r2, #1
 8000eb0:	e737      	b.n	8000d22 <__aeabi_fmul+0x92>
 8000eb2:	f092 0f00 	teq	r2, #0
 8000eb6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eba:	bf02      	ittt	eq
 8000ebc:	0040      	lsleq	r0, r0, #1
 8000ebe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ec2:	3a01      	subeq	r2, #1
 8000ec4:	d0f9      	beq.n	8000eba <__aeabi_fdiv+0xc2>
 8000ec6:	ea40 000c 	orr.w	r0, r0, ip
 8000eca:	f093 0f00 	teq	r3, #0
 8000ece:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed2:	bf02      	ittt	eq
 8000ed4:	0049      	lsleq	r1, r1, #1
 8000ed6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eda:	3b01      	subeq	r3, #1
 8000edc:	d0f9      	beq.n	8000ed2 <__aeabi_fdiv+0xda>
 8000ede:	ea41 010c 	orr.w	r1, r1, ip
 8000ee2:	e795      	b.n	8000e10 <__aeabi_fdiv+0x18>
 8000ee4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d108      	bne.n	8000f00 <__aeabi_fdiv+0x108>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	f47f af7d 	bne.w	8000dee <__aeabi_fmul+0x15e>
 8000ef4:	ea93 0f0c 	teq	r3, ip
 8000ef8:	f47f af70 	bne.w	8000ddc <__aeabi_fmul+0x14c>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e776      	b.n	8000dee <__aeabi_fmul+0x15e>
 8000f00:	ea93 0f0c 	teq	r3, ip
 8000f04:	d104      	bne.n	8000f10 <__aeabi_fdiv+0x118>
 8000f06:	024b      	lsls	r3, r1, #9
 8000f08:	f43f af4c 	beq.w	8000da4 <__aeabi_fmul+0x114>
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	e76e      	b.n	8000dee <__aeabi_fmul+0x15e>
 8000f10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f14:	bf18      	it	ne
 8000f16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f1a:	d1ca      	bne.n	8000eb2 <__aeabi_fdiv+0xba>
 8000f1c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f20:	f47f af5c 	bne.w	8000ddc <__aeabi_fmul+0x14c>
 8000f24:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f28:	f47f af3c 	bne.w	8000da4 <__aeabi_fmul+0x114>
 8000f2c:	e75f      	b.n	8000dee <__aeabi_fmul+0x15e>
 8000f2e:	bf00      	nop

08000f30 <__gesf2>:
 8000f30:	f04f 3cff 	mov.w	ip, #4294967295
 8000f34:	e006      	b.n	8000f44 <__cmpsf2+0x4>
 8000f36:	bf00      	nop

08000f38 <__lesf2>:
 8000f38:	f04f 0c01 	mov.w	ip, #1
 8000f3c:	e002      	b.n	8000f44 <__cmpsf2+0x4>
 8000f3e:	bf00      	nop

08000f40 <__cmpsf2>:
 8000f40:	f04f 0c01 	mov.w	ip, #1
 8000f44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f54:	bf18      	it	ne
 8000f56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f5a:	d011      	beq.n	8000f80 <__cmpsf2+0x40>
 8000f5c:	b001      	add	sp, #4
 8000f5e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f62:	bf18      	it	ne
 8000f64:	ea90 0f01 	teqne	r0, r1
 8000f68:	bf58      	it	pl
 8000f6a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f6e:	bf88      	it	hi
 8000f70:	17c8      	asrhi	r0, r1, #31
 8000f72:	bf38      	it	cc
 8000f74:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f78:	bf18      	it	ne
 8000f7a:	f040 0001 	orrne.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f84:	d102      	bne.n	8000f8c <__cmpsf2+0x4c>
 8000f86:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f8a:	d105      	bne.n	8000f98 <__cmpsf2+0x58>
 8000f8c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f90:	d1e4      	bne.n	8000f5c <__cmpsf2+0x1c>
 8000f92:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f96:	d0e1      	beq.n	8000f5c <__cmpsf2+0x1c>
 8000f98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_cfrcmple>:
 8000fa0:	4684      	mov	ip, r0
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	4661      	mov	r1, ip
 8000fa6:	e7ff      	b.n	8000fa8 <__aeabi_cfcmpeq>

08000fa8 <__aeabi_cfcmpeq>:
 8000fa8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000faa:	f7ff ffc9 	bl	8000f40 <__cmpsf2>
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	bf48      	it	mi
 8000fb2:	f110 0f00 	cmnmi.w	r0, #0
 8000fb6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fb8 <__aeabi_fcmpeq>:
 8000fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fbc:	f7ff fff4 	bl	8000fa8 <__aeabi_cfcmpeq>
 8000fc0:	bf0c      	ite	eq
 8000fc2:	2001      	moveq	r0, #1
 8000fc4:	2000      	movne	r0, #0
 8000fc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fca:	bf00      	nop

08000fcc <__aeabi_fcmplt>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff ffea 	bl	8000fa8 <__aeabi_cfcmpeq>
 8000fd4:	bf34      	ite	cc
 8000fd6:	2001      	movcc	r0, #1
 8000fd8:	2000      	movcs	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmple>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffe0 	bl	8000fa8 <__aeabi_cfcmpeq>
 8000fe8:	bf94      	ite	ls
 8000fea:	2001      	movls	r0, #1
 8000fec:	2000      	movhi	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmpge>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffd2 	bl	8000fa0 <__aeabi_cfrcmple>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpgt>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffc8 	bl	8000fa0 <__aeabi_cfrcmple>
 8001010:	bf34      	ite	cc
 8001012:	2001      	movcc	r0, #1
 8001014:	2000      	movcs	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_uldivmod>:
 800101c:	b953      	cbnz	r3, 8001034 <__aeabi_uldivmod+0x18>
 800101e:	b94a      	cbnz	r2, 8001034 <__aeabi_uldivmod+0x18>
 8001020:	2900      	cmp	r1, #0
 8001022:	bf08      	it	eq
 8001024:	2800      	cmpeq	r0, #0
 8001026:	bf1c      	itt	ne
 8001028:	f04f 31ff 	movne.w	r1, #4294967295
 800102c:	f04f 30ff 	movne.w	r0, #4294967295
 8001030:	f000 b96e 	b.w	8001310 <__aeabi_idiv0>
 8001034:	f1ad 0c08 	sub.w	ip, sp, #8
 8001038:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800103c:	f000 f806 	bl	800104c <__udivmoddi4>
 8001040:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001044:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001048:	b004      	add	sp, #16
 800104a:	4770      	bx	lr

0800104c <__udivmoddi4>:
 800104c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001050:	9e08      	ldr	r6, [sp, #32]
 8001052:	460d      	mov	r5, r1
 8001054:	4604      	mov	r4, r0
 8001056:	468e      	mov	lr, r1
 8001058:	2b00      	cmp	r3, #0
 800105a:	f040 8083 	bne.w	8001164 <__udivmoddi4+0x118>
 800105e:	428a      	cmp	r2, r1
 8001060:	4617      	mov	r7, r2
 8001062:	d947      	bls.n	80010f4 <__udivmoddi4+0xa8>
 8001064:	fab2 f382 	clz	r3, r2
 8001068:	b14b      	cbz	r3, 800107e <__udivmoddi4+0x32>
 800106a:	f1c3 0120 	rsb	r1, r3, #32
 800106e:	fa05 fe03 	lsl.w	lr, r5, r3
 8001072:	fa20 f101 	lsr.w	r1, r0, r1
 8001076:	409f      	lsls	r7, r3
 8001078:	ea41 0e0e 	orr.w	lr, r1, lr
 800107c:	409c      	lsls	r4, r3
 800107e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001082:	fbbe fcf8 	udiv	ip, lr, r8
 8001086:	fa1f f987 	uxth.w	r9, r7
 800108a:	fb08 e21c 	mls	r2, r8, ip, lr
 800108e:	fb0c f009 	mul.w	r0, ip, r9
 8001092:	0c21      	lsrs	r1, r4, #16
 8001094:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001098:	4290      	cmp	r0, r2
 800109a:	d90a      	bls.n	80010b2 <__udivmoddi4+0x66>
 800109c:	18ba      	adds	r2, r7, r2
 800109e:	f10c 31ff 	add.w	r1, ip, #4294967295
 80010a2:	f080 8118 	bcs.w	80012d6 <__udivmoddi4+0x28a>
 80010a6:	4290      	cmp	r0, r2
 80010a8:	f240 8115 	bls.w	80012d6 <__udivmoddi4+0x28a>
 80010ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80010b0:	443a      	add	r2, r7
 80010b2:	1a12      	subs	r2, r2, r0
 80010b4:	fbb2 f0f8 	udiv	r0, r2, r8
 80010b8:	fb08 2210 	mls	r2, r8, r0, r2
 80010bc:	fb00 f109 	mul.w	r1, r0, r9
 80010c0:	b2a4      	uxth	r4, r4
 80010c2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010c6:	42a1      	cmp	r1, r4
 80010c8:	d909      	bls.n	80010de <__udivmoddi4+0x92>
 80010ca:	193c      	adds	r4, r7, r4
 80010cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80010d0:	f080 8103 	bcs.w	80012da <__udivmoddi4+0x28e>
 80010d4:	42a1      	cmp	r1, r4
 80010d6:	f240 8100 	bls.w	80012da <__udivmoddi4+0x28e>
 80010da:	3802      	subs	r0, #2
 80010dc:	443c      	add	r4, r7
 80010de:	1a64      	subs	r4, r4, r1
 80010e0:	2100      	movs	r1, #0
 80010e2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010e6:	b11e      	cbz	r6, 80010f0 <__udivmoddi4+0xa4>
 80010e8:	2200      	movs	r2, #0
 80010ea:	40dc      	lsrs	r4, r3
 80010ec:	e9c6 4200 	strd	r4, r2, [r6]
 80010f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f4:	b902      	cbnz	r2, 80010f8 <__udivmoddi4+0xac>
 80010f6:	deff      	udf	#255	; 0xff
 80010f8:	fab2 f382 	clz	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d14f      	bne.n	80011a0 <__udivmoddi4+0x154>
 8001100:	1a8d      	subs	r5, r1, r2
 8001102:	2101      	movs	r1, #1
 8001104:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001108:	fa1f f882 	uxth.w	r8, r2
 800110c:	fbb5 fcfe 	udiv	ip, r5, lr
 8001110:	fb0e 551c 	mls	r5, lr, ip, r5
 8001114:	fb08 f00c 	mul.w	r0, r8, ip
 8001118:	0c22      	lsrs	r2, r4, #16
 800111a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800111e:	42a8      	cmp	r0, r5
 8001120:	d907      	bls.n	8001132 <__udivmoddi4+0xe6>
 8001122:	197d      	adds	r5, r7, r5
 8001124:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001128:	d202      	bcs.n	8001130 <__udivmoddi4+0xe4>
 800112a:	42a8      	cmp	r0, r5
 800112c:	f200 80e9 	bhi.w	8001302 <__udivmoddi4+0x2b6>
 8001130:	4694      	mov	ip, r2
 8001132:	1a2d      	subs	r5, r5, r0
 8001134:	fbb5 f0fe 	udiv	r0, r5, lr
 8001138:	fb0e 5510 	mls	r5, lr, r0, r5
 800113c:	fb08 f800 	mul.w	r8, r8, r0
 8001140:	b2a4      	uxth	r4, r4
 8001142:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001146:	45a0      	cmp	r8, r4
 8001148:	d907      	bls.n	800115a <__udivmoddi4+0x10e>
 800114a:	193c      	adds	r4, r7, r4
 800114c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001150:	d202      	bcs.n	8001158 <__udivmoddi4+0x10c>
 8001152:	45a0      	cmp	r8, r4
 8001154:	f200 80d9 	bhi.w	800130a <__udivmoddi4+0x2be>
 8001158:	4610      	mov	r0, r2
 800115a:	eba4 0408 	sub.w	r4, r4, r8
 800115e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001162:	e7c0      	b.n	80010e6 <__udivmoddi4+0x9a>
 8001164:	428b      	cmp	r3, r1
 8001166:	d908      	bls.n	800117a <__udivmoddi4+0x12e>
 8001168:	2e00      	cmp	r6, #0
 800116a:	f000 80b1 	beq.w	80012d0 <__udivmoddi4+0x284>
 800116e:	2100      	movs	r1, #0
 8001170:	e9c6 0500 	strd	r0, r5, [r6]
 8001174:	4608      	mov	r0, r1
 8001176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117a:	fab3 f183 	clz	r1, r3
 800117e:	2900      	cmp	r1, #0
 8001180:	d14b      	bne.n	800121a <__udivmoddi4+0x1ce>
 8001182:	42ab      	cmp	r3, r5
 8001184:	d302      	bcc.n	800118c <__udivmoddi4+0x140>
 8001186:	4282      	cmp	r2, r0
 8001188:	f200 80b9 	bhi.w	80012fe <__udivmoddi4+0x2b2>
 800118c:	1a84      	subs	r4, r0, r2
 800118e:	eb65 0303 	sbc.w	r3, r5, r3
 8001192:	2001      	movs	r0, #1
 8001194:	469e      	mov	lr, r3
 8001196:	2e00      	cmp	r6, #0
 8001198:	d0aa      	beq.n	80010f0 <__udivmoddi4+0xa4>
 800119a:	e9c6 4e00 	strd	r4, lr, [r6]
 800119e:	e7a7      	b.n	80010f0 <__udivmoddi4+0xa4>
 80011a0:	409f      	lsls	r7, r3
 80011a2:	f1c3 0220 	rsb	r2, r3, #32
 80011a6:	40d1      	lsrs	r1, r2
 80011a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011ac:	fbb1 f0fe 	udiv	r0, r1, lr
 80011b0:	fa1f f887 	uxth.w	r8, r7
 80011b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80011b8:	fa24 f202 	lsr.w	r2, r4, r2
 80011bc:	409d      	lsls	r5, r3
 80011be:	fb00 fc08 	mul.w	ip, r0, r8
 80011c2:	432a      	orrs	r2, r5
 80011c4:	0c15      	lsrs	r5, r2, #16
 80011c6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80011ca:	45ac      	cmp	ip, r5
 80011cc:	fa04 f403 	lsl.w	r4, r4, r3
 80011d0:	d909      	bls.n	80011e6 <__udivmoddi4+0x19a>
 80011d2:	197d      	adds	r5, r7, r5
 80011d4:	f100 31ff 	add.w	r1, r0, #4294967295
 80011d8:	f080 808f 	bcs.w	80012fa <__udivmoddi4+0x2ae>
 80011dc:	45ac      	cmp	ip, r5
 80011de:	f240 808c 	bls.w	80012fa <__udivmoddi4+0x2ae>
 80011e2:	3802      	subs	r0, #2
 80011e4:	443d      	add	r5, r7
 80011e6:	eba5 050c 	sub.w	r5, r5, ip
 80011ea:	fbb5 f1fe 	udiv	r1, r5, lr
 80011ee:	fb0e 5c11 	mls	ip, lr, r1, r5
 80011f2:	fb01 f908 	mul.w	r9, r1, r8
 80011f6:	b295      	uxth	r5, r2
 80011f8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80011fc:	45a9      	cmp	r9, r5
 80011fe:	d907      	bls.n	8001210 <__udivmoddi4+0x1c4>
 8001200:	197d      	adds	r5, r7, r5
 8001202:	f101 32ff 	add.w	r2, r1, #4294967295
 8001206:	d274      	bcs.n	80012f2 <__udivmoddi4+0x2a6>
 8001208:	45a9      	cmp	r9, r5
 800120a:	d972      	bls.n	80012f2 <__udivmoddi4+0x2a6>
 800120c:	3902      	subs	r1, #2
 800120e:	443d      	add	r5, r7
 8001210:	eba5 0509 	sub.w	r5, r5, r9
 8001214:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001218:	e778      	b.n	800110c <__udivmoddi4+0xc0>
 800121a:	f1c1 0720 	rsb	r7, r1, #32
 800121e:	408b      	lsls	r3, r1
 8001220:	fa22 fc07 	lsr.w	ip, r2, r7
 8001224:	ea4c 0c03 	orr.w	ip, ip, r3
 8001228:	fa25 f407 	lsr.w	r4, r5, r7
 800122c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001230:	fbb4 f9fe 	udiv	r9, r4, lr
 8001234:	fa1f f88c 	uxth.w	r8, ip
 8001238:	fb0e 4419 	mls	r4, lr, r9, r4
 800123c:	fa20 f307 	lsr.w	r3, r0, r7
 8001240:	fb09 fa08 	mul.w	sl, r9, r8
 8001244:	408d      	lsls	r5, r1
 8001246:	431d      	orrs	r5, r3
 8001248:	0c2b      	lsrs	r3, r5, #16
 800124a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800124e:	45a2      	cmp	sl, r4
 8001250:	fa02 f201 	lsl.w	r2, r2, r1
 8001254:	fa00 f301 	lsl.w	r3, r0, r1
 8001258:	d909      	bls.n	800126e <__udivmoddi4+0x222>
 800125a:	eb1c 0404 	adds.w	r4, ip, r4
 800125e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001262:	d248      	bcs.n	80012f6 <__udivmoddi4+0x2aa>
 8001264:	45a2      	cmp	sl, r4
 8001266:	d946      	bls.n	80012f6 <__udivmoddi4+0x2aa>
 8001268:	f1a9 0902 	sub.w	r9, r9, #2
 800126c:	4464      	add	r4, ip
 800126e:	eba4 040a 	sub.w	r4, r4, sl
 8001272:	fbb4 f0fe 	udiv	r0, r4, lr
 8001276:	fb0e 4410 	mls	r4, lr, r0, r4
 800127a:	fb00 fa08 	mul.w	sl, r0, r8
 800127e:	b2ad      	uxth	r5, r5
 8001280:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001284:	45a2      	cmp	sl, r4
 8001286:	d908      	bls.n	800129a <__udivmoddi4+0x24e>
 8001288:	eb1c 0404 	adds.w	r4, ip, r4
 800128c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001290:	d22d      	bcs.n	80012ee <__udivmoddi4+0x2a2>
 8001292:	45a2      	cmp	sl, r4
 8001294:	d92b      	bls.n	80012ee <__udivmoddi4+0x2a2>
 8001296:	3802      	subs	r0, #2
 8001298:	4464      	add	r4, ip
 800129a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800129e:	fba0 8902 	umull	r8, r9, r0, r2
 80012a2:	eba4 040a 	sub.w	r4, r4, sl
 80012a6:	454c      	cmp	r4, r9
 80012a8:	46c6      	mov	lr, r8
 80012aa:	464d      	mov	r5, r9
 80012ac:	d319      	bcc.n	80012e2 <__udivmoddi4+0x296>
 80012ae:	d016      	beq.n	80012de <__udivmoddi4+0x292>
 80012b0:	b15e      	cbz	r6, 80012ca <__udivmoddi4+0x27e>
 80012b2:	ebb3 020e 	subs.w	r2, r3, lr
 80012b6:	eb64 0405 	sbc.w	r4, r4, r5
 80012ba:	fa04 f707 	lsl.w	r7, r4, r7
 80012be:	fa22 f301 	lsr.w	r3, r2, r1
 80012c2:	431f      	orrs	r7, r3
 80012c4:	40cc      	lsrs	r4, r1
 80012c6:	e9c6 7400 	strd	r7, r4, [r6]
 80012ca:	2100      	movs	r1, #0
 80012cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d0:	4631      	mov	r1, r6
 80012d2:	4630      	mov	r0, r6
 80012d4:	e70c      	b.n	80010f0 <__udivmoddi4+0xa4>
 80012d6:	468c      	mov	ip, r1
 80012d8:	e6eb      	b.n	80010b2 <__udivmoddi4+0x66>
 80012da:	4610      	mov	r0, r2
 80012dc:	e6ff      	b.n	80010de <__udivmoddi4+0x92>
 80012de:	4543      	cmp	r3, r8
 80012e0:	d2e6      	bcs.n	80012b0 <__udivmoddi4+0x264>
 80012e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80012e6:	eb69 050c 	sbc.w	r5, r9, ip
 80012ea:	3801      	subs	r0, #1
 80012ec:	e7e0      	b.n	80012b0 <__udivmoddi4+0x264>
 80012ee:	4628      	mov	r0, r5
 80012f0:	e7d3      	b.n	800129a <__udivmoddi4+0x24e>
 80012f2:	4611      	mov	r1, r2
 80012f4:	e78c      	b.n	8001210 <__udivmoddi4+0x1c4>
 80012f6:	4681      	mov	r9, r0
 80012f8:	e7b9      	b.n	800126e <__udivmoddi4+0x222>
 80012fa:	4608      	mov	r0, r1
 80012fc:	e773      	b.n	80011e6 <__udivmoddi4+0x19a>
 80012fe:	4608      	mov	r0, r1
 8001300:	e749      	b.n	8001196 <__udivmoddi4+0x14a>
 8001302:	f1ac 0c02 	sub.w	ip, ip, #2
 8001306:	443d      	add	r5, r7
 8001308:	e713      	b.n	8001132 <__udivmoddi4+0xe6>
 800130a:	3802      	subs	r0, #2
 800130c:	443c      	add	r4, r7
 800130e:	e724      	b.n	800115a <__udivmoddi4+0x10e>

08001310 <__aeabi_idiv0>:
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <get_uint8>:

struct UARTMembers uart;
struct TEMPMembers temp;


uint8_t get_uint8 ( void ) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
    uint8_t number      = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	71bb      	strb	r3, [r7, #6]
    uint8_t timeout     = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	71fb      	strb	r3, [r7, #7]

    reset_rx_buffer();
 8001322:	f001 f80d 	bl	8002340 <reset_rx_buffer>
    
    uart.rxchar = '\0';
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <get_uint8+0x78>)
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while(uart.rxchar == '\0'){}                   // Wait for keyboard input 
 800132e:	bf00      	nop
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <get_uint8+0x78>)
 8001332:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0fa      	beq.n	8001330 <get_uint8+0x1c>
    
    while (timeout < 20) {
 800133a:	e00b      	b.n	8001354 <get_uint8+0x40>
        if(uart.rxchar == ENTER_KEY) break;
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <get_uint8+0x78>)
 800133e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001342:	2b0d      	cmp	r3, #13
 8001344:	d00a      	beq.n	800135c <get_uint8+0x48>

        blocking_ms_delay(1000);
 8001346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800134a:	f000 fe7f 	bl	800204c <blocking_ms_delay>
        timeout++;
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	3301      	adds	r3, #1
 8001352:	71fb      	strb	r3, [r7, #7]
    while (timeout < 20) {
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b13      	cmp	r3, #19
 8001358:	d9f0      	bls.n	800133c <get_uint8+0x28>
 800135a:	e000      	b.n	800135e <get_uint8+0x4a>
        if(uart.rxchar == ENTER_KEY) break;
 800135c:	bf00      	nop
    }

    sscanf(uart.rxbuf,"%d",&number);
 800135e:	1dbb      	adds	r3, r7, #6
 8001360:	461a      	mov	r2, r3
 8001362:	490b      	ldr	r1, [pc, #44]	; (8001390 <get_uint8+0x7c>)
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <get_uint8+0x78>)
 8001366:	f003 faa5 	bl	80048b4 <siscanf>

    print_string("Number Received: ",0);
 800136a:	2100      	movs	r1, #0
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <get_uint8+0x80>)
 800136e:	f000 ff27 	bl	80021c0 <print_string>
    print_unsigned_decimal(number, LF);
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	b29b      	uxth	r3, r3
 8001376:	2101      	movs	r1, #1
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fecf 	bl	800211c <print_unsigned_decimal>

    reset_rx_buffer();
 800137e:	f000 ffdf 	bl	8002340 <reset_rx_buffer>
    return(number);
 8001382:	79bb      	ldrb	r3, [r7, #6]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200000c0 	.word	0x200000c0
 8001390:	08005a84 	.word	0x08005a84
 8001394:	08005a88 	.word	0x08005a88

08001398 <console_menu>:
    return(number);

}

void console_menu( void ) 
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
     * used for the main application.  reset_rx_buffer() is called
     * in main.c just prior to entering this routine. 
     * 
     */

	uint8_t     usr_number_u8       = 0;        // Number user has entered will be stored here
 800139e:	2300      	movs	r3, #0
 80013a0:	71fb      	strb	r3, [r7, #7]
    // float       temp_float          = 0.0;
    
    uart.rxchar = '\0';                  
 80013a2:	4b87      	ldr	r3, [pc, #540]	; (80015c0 <console_menu+0x228>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    reset_terminal();                            // Clear all the contents on the terminal
 80013aa:	f000 ff7b 	bl	80022a4 <reset_terminal>

    
    blocking_ms_delay(10);
 80013ae:	200a      	movs	r0, #10
 80013b0:	f000 fe4c 	bl	800204c <blocking_ms_delay>
    cursor_top_left();
 80013b4:	f000 ff5e 	bl	8002274 <cursor_top_left>
    blocking_ms_delay(10);
 80013b8:	200a      	movs	r0, #10
 80013ba:	f000 fe47 	bl	800204c <blocking_ms_delay>

    while(usr_number_u8 != 99) 
 80013be:	e0f2      	b.n	80015a6 <console_menu+0x20e>
    {
        print_string("1 --- View HW version.",LF);
 80013c0:	2101      	movs	r1, #1
 80013c2:	4880      	ldr	r0, [pc, #512]	; (80015c4 <console_menu+0x22c>)
 80013c4:	f000 fefc 	bl	80021c0 <print_string>
        print_string("2 --- View SW version.",LF);
 80013c8:	2101      	movs	r1, #1
 80013ca:	487f      	ldr	r0, [pc, #508]	; (80015c8 <console_menu+0x230>)
 80013cc:	f000 fef8 	bl	80021c0 <print_string>
        print_string("3 --- Report temperature values.",LF);
 80013d0:	2101      	movs	r1, #1
 80013d2:	487e      	ldr	r0, [pc, #504]	; (80015cc <console_menu+0x234>)
 80013d4:	f000 fef4 	bl	80021c0 <print_string>
        print_string("       press \'x\' to quit.",LF);
 80013d8:	2101      	movs	r1, #1
 80013da:	487d      	ldr	r0, [pc, #500]	; (80015d0 <console_menu+0x238>)
 80013dc:	f000 fef0 	bl	80021c0 <print_string>
        print_string("4 --- View temperature trip point.",LF);
 80013e0:	2101      	movs	r1, #1
 80013e2:	487c      	ldr	r0, [pc, #496]	; (80015d4 <console_menu+0x23c>)
 80013e4:	f000 feec 	bl	80021c0 <print_string>
        print_string("5 --- Enable fan.",LF);
 80013e8:	2101      	movs	r1, #1
 80013ea:	487b      	ldr	r0, [pc, #492]	; (80015d8 <console_menu+0x240>)
 80013ec:	f000 fee8 	bl	80021c0 <print_string>
        print_string("6 --- Disable the fan.",LF);
 80013f0:	2101      	movs	r1, #1
 80013f2:	487a      	ldr	r0, [pc, #488]	; (80015dc <console_menu+0x244>)
 80013f4:	f000 fee4 	bl	80021c0 <print_string>
        
        print_string("99 -- Exit menu.",LF);  
 80013f8:	2101      	movs	r1, #1
 80013fa:	4879      	ldr	r0, [pc, #484]	; (80015e0 <console_menu+0x248>)
 80013fc:	f000 fee0 	bl	80021c0 <print_string>
        insert_line_feed(2);
 8001400:	2002      	movs	r0, #2
 8001402:	f000 ff67 	bl	80022d4 <insert_line_feed>
        
        print_string("Enter Selection:  ",0);
 8001406:	2100      	movs	r1, #0
 8001408:	4876      	ldr	r0, [pc, #472]	; (80015e4 <console_menu+0x24c>)
 800140a:	f000 fed9 	bl	80021c0 <print_string>
        usr_number_u8 = get_uint8();
 800140e:	f7ff ff81 	bl	8001314 <get_uint8>
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]

       
        switch(usr_number_u8) 
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b06      	cmp	r3, #6
 800141a:	dc15      	bgt.n	8001448 <console_menu+0xb0>
 800141c:	2b00      	cmp	r3, #0
 800141e:	f340 80c0 	ble.w	80015a2 <console_menu+0x20a>
 8001422:	3b01      	subs	r3, #1
 8001424:	2b05      	cmp	r3, #5
 8001426:	f200 80bc 	bhi.w	80015a2 <console_menu+0x20a>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <console_menu+0x98>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001451 	.word	0x08001451
 8001434:	080014af 	.word	0x080014af
 8001438:	080014cd 	.word	0x080014cd
 800143c:	0800152b 	.word	0x0800152b
 8001440:	08001549 	.word	0x08001549
 8001444:	08001569 	.word	0x08001569
 8001448:	2b63      	cmp	r3, #99	; 0x63
 800144a:	f000 809d 	beq.w	8001588 <console_menu+0x1f0>
 800144e:	e0a8      	b.n	80015a2 <console_menu+0x20a>
            /**
             * View HW version
             */
            case 1:
            {
                uint8_t version = 0;    
 8001450:	2300      	movs	r3, #0
 8001452:	71bb      	strb	r3, [r7, #6]
                clear_screen();
 8001454:	f000 fef6 	bl	8002244 <clear_screen>
                cursor_top_left();
 8001458:	f000 ff0c 	bl	8002274 <cursor_top_left>
                insert_line_separator();
 800145c:	f000 ff66 	bl	800232c <insert_line_separator>
                
                version = (HAL_GPIO_ReadPin(ID_B2_GPIO_Port, ID_B2_Pin) << 2) |
 8001460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001464:	4860      	ldr	r0, [pc, #384]	; (80015e8 <console_menu+0x250>)
 8001466:	f001 fa9f 	bl	80029a8 <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	b25c      	sxtb	r4, r3
                (HAL_GPIO_ReadPin(ID_B0_GPIO_Port, ID_B0_Pin) << 1) |
 8001470:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001474:	485c      	ldr	r0, [pc, #368]	; (80015e8 <console_menu+0x250>)
 8001476:	f001 fa97 	bl	80029a8 <HAL_GPIO_ReadPin>
 800147a:	4603      	mov	r3, r0
 800147c:	005b      	lsls	r3, r3, #1
                version = (HAL_GPIO_ReadPin(ID_B2_GPIO_Port, ID_B2_Pin) << 2) |
 800147e:	b25b      	sxtb	r3, r3
 8001480:	4323      	orrs	r3, r4
 8001482:	b25c      	sxtb	r4, r3
                HAL_GPIO_ReadPin(ID_B0_GPIO_Port, ID_B0_Pin);
 8001484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001488:	4857      	ldr	r0, [pc, #348]	; (80015e8 <console_menu+0x250>)
 800148a:	f001 fa8d 	bl	80029a8 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	b25b      	sxtb	r3, r3
                (HAL_GPIO_ReadPin(ID_B0_GPIO_Port, ID_B0_Pin) << 1) |
 8001492:	4323      	orrs	r3, r4
 8001494:	b25b      	sxtb	r3, r3
                version = (HAL_GPIO_ReadPin(ID_B2_GPIO_Port, ID_B2_Pin) << 2) |
 8001496:	71bb      	strb	r3, [r7, #6]
                
                
                print_string("HW vrsion: ", 0);
 8001498:	2100      	movs	r1, #0
 800149a:	4854      	ldr	r0, [pc, #336]	; (80015ec <console_menu+0x254>)
 800149c:	f000 fe90 	bl	80021c0 <print_string>
                print_unsigned_decimal(version, LF);
 80014a0:	79bb      	ldrb	r3, [r7, #6]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	2101      	movs	r1, #1
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fe38 	bl	800211c <print_unsigned_decimal>
                break;
 80014ac:	e07b      	b.n	80015a6 <console_menu+0x20e>
            
            /**
             * View SW version
             */
            case 2:
                clear_screen();
 80014ae:	f000 fec9 	bl	8002244 <clear_screen>
                cursor_top_left();
 80014b2:	f000 fedf 	bl	8002274 <cursor_top_left>
                insert_line_separator();
 80014b6:	f000 ff39 	bl	800232c <insert_line_separator>
                
                print_string("SW version",0);
 80014ba:	2100      	movs	r1, #0
 80014bc:	484c      	ldr	r0, [pc, #304]	; (80015f0 <console_menu+0x258>)
 80014be:	f000 fe7f 	bl	80021c0 <print_string>
                print_string(SW_VERSION,LF);
 80014c2:	2101      	movs	r1, #1
 80014c4:	484b      	ldr	r0, [pc, #300]	; (80015f4 <console_menu+0x25c>)
 80014c6:	f000 fe7b 	bl	80021c0 <print_string>
            break;
 80014ca:	e06c      	b.n	80015a6 <console_menu+0x20e>
            
            /**
             * Report temperature values
             */
            case 3:
                clear_screen();
 80014cc:	f000 feba 	bl	8002244 <clear_screen>
                cursor_top_left();
 80014d0:	f000 fed0 	bl	8002274 <cursor_top_left>
                insert_line_separator();
 80014d4:	f000 ff2a 	bl	800232c <insert_line_separator>
                
                uart.rxchar = '\0';
 80014d8:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <console_menu+0x228>)
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                while (uart.rxchar != 'x')
 80014e0:	e019      	b.n	8001516 <console_menu+0x17e>
                {
                    if (get_temperature_reading () == false) {
 80014e2:	f000 fb41 	bl	8001b68 <get_temperature_reading>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f083 0301 	eor.w	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <console_menu+0x162>
                        print_string("Error retreving temp value", LF);
 80014f2:	2101      	movs	r1, #1
 80014f4:	4840      	ldr	r0, [pc, #256]	; (80015f8 <console_menu+0x260>)
 80014f6:	f000 fe63 	bl	80021c0 <print_string>
                    }

                    print_string("Temp value: ", 0);
 80014fa:	2100      	movs	r1, #0
 80014fc:	483f      	ldr	r0, [pc, #252]	; (80015fc <console_menu+0x264>)
 80014fe:	f000 fe5f 	bl	80021c0 <print_string>
                    print_float(temp.flt_temp_value, LF);
 8001502:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <console_menu+0x268>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2101      	movs	r1, #1
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fdbf 	bl	800208c <print_float>
                    
                    blocking_ms_delay(1000);
 800150e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001512:	f000 fd9b 	bl	800204c <blocking_ms_delay>
                while (uart.rxchar != 'x')
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <console_menu+0x228>)
 8001518:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800151c:	2b78      	cmp	r3, #120	; 0x78
 800151e:	d1e0      	bne.n	80014e2 <console_menu+0x14a>

                }
                print_string("Not implemented yet",LF);
 8001520:	2101      	movs	r1, #1
 8001522:	4838      	ldr	r0, [pc, #224]	; (8001604 <console_menu+0x26c>)
 8001524:	f000 fe4c 	bl	80021c0 <print_string>
            break;
 8001528:	e03d      	b.n	80015a6 <console_menu+0x20e>
            
            /**
             * View temperature trip point
             */
            case 4:
                clear_screen();
 800152a:	f000 fe8b 	bl	8002244 <clear_screen>
                cursor_top_left();
 800152e:	f000 fea1 	bl	8002274 <cursor_top_left>
                insert_line_separator();
 8001532:	f000 fefb 	bl	800232c <insert_line_separator>
                
                print_string("Temperature trip point: ",0);
 8001536:	2100      	movs	r1, #0
 8001538:	4833      	ldr	r0, [pc, #204]	; (8001608 <console_menu+0x270>)
 800153a:	f000 fe41 	bl	80021c0 <print_string>
                print_unsigned_decimal(TEMP_TRIP_POINT_F,LF);
 800153e:	2101      	movs	r1, #1
 8001540:	2050      	movs	r0, #80	; 0x50
 8001542:	f000 fdeb 	bl	800211c <print_unsigned_decimal>
            break;
 8001546:	e02e      	b.n	80015a6 <console_menu+0x20e>
            
            /**
             * Enable the fan
             */
            case 5:
                clear_screen();
 8001548:	f000 fe7c 	bl	8002244 <clear_screen>
                cursor_top_left();
 800154c:	f000 fe92 	bl	8002274 <cursor_top_left>
                insert_line_separator();
 8001550:	f000 feec 	bl	800232c <insert_line_separator>
                print_string("Enabling the fan",LF);
 8001554:	2101      	movs	r1, #1
 8001556:	482d      	ldr	r0, [pc, #180]	; (800160c <console_menu+0x274>)
 8001558:	f000 fe32 	bl	80021c0 <print_string>

                HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	2140      	movs	r1, #64	; 0x40
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <console_menu+0x250>)
 8001562:	f001 fa38 	bl	80029d6 <HAL_GPIO_WritePin>
            break;
 8001566:	e01e      	b.n	80015a6 <console_menu+0x20e>
                
            /**
             * Disable the fan
             */
            case 6:
                clear_screen();
 8001568:	f000 fe6c 	bl	8002244 <clear_screen>
                cursor_top_left();
 800156c:	f000 fe82 	bl	8002274 <cursor_top_left>
                insert_line_separator();
 8001570:	f000 fedc 	bl	800232c <insert_line_separator>
                print_string("Disabling the fan",LF);
 8001574:	2101      	movs	r1, #1
 8001576:	4826      	ldr	r0, [pc, #152]	; (8001610 <console_menu+0x278>)
 8001578:	f000 fe22 	bl	80021c0 <print_string>
                
                HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	2140      	movs	r1, #64	; 0x40
 8001580:	4819      	ldr	r0, [pc, #100]	; (80015e8 <console_menu+0x250>)
 8001582:	f001 fa28 	bl	80029d6 <HAL_GPIO_WritePin>
            break;
 8001586:	e00e      	b.n	80015a6 <console_menu+0x20e>

            case 99:
                reset_terminal();              //Leaving menu, so clear the screen so not to confuse user
 8001588:	f000 fe8c 	bl	80022a4 <reset_terminal>
                blocking_ms_delay(1);
 800158c:	2001      	movs	r0, #1
 800158e:	f000 fd5d 	bl	800204c <blocking_ms_delay>
                cursor_top_left();        //Make sure the cursor is in the Top Left position
 8001592:	f000 fe6f 	bl	8002274 <cursor_top_left>
                blocking_ms_delay(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f000 fd58 	bl	800204c <blocking_ms_delay>
                usr_number_u8 = 99;
 800159c:	2363      	movs	r3, #99	; 0x63
 800159e:	71fb      	strb	r3, [r7, #7]
            break;
 80015a0:	e001      	b.n	80015a6 <console_menu+0x20e>

            default:
                usr_number_u8 = 99;
 80015a2:	2363      	movs	r3, #99	; 0x63
 80015a4:	71fb      	strb	r3, [r7, #7]
    while(usr_number_u8 != 99) 
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b63      	cmp	r3, #99	; 0x63
 80015aa:	f47f af09 	bne.w	80013c0 <console_menu+0x28>
        }   //END Switch(usr_number_u8)
    }  //END while(glbinfo.rxchar != 99)

    print_string("Leaving console.",LF);
 80015ae:	2101      	movs	r1, #1
 80015b0:	4818      	ldr	r0, [pc, #96]	; (8001614 <console_menu+0x27c>)
 80015b2:	f000 fe05 	bl	80021c0 <print_string>

}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd90      	pop	{r4, r7, pc}
 80015be:	bf00      	nop
 80015c0:	200000c0 	.word	0x200000c0
 80015c4:	08005aa4 	.word	0x08005aa4
 80015c8:	08005abc 	.word	0x08005abc
 80015cc:	08005ad4 	.word	0x08005ad4
 80015d0:	08005af8 	.word	0x08005af8
 80015d4:	08005b14 	.word	0x08005b14
 80015d8:	08005b38 	.word	0x08005b38
 80015dc:	08005b4c 	.word	0x08005b4c
 80015e0:	08005b64 	.word	0x08005b64
 80015e4:	08005b78 	.word	0x08005b78
 80015e8:	40011000 	.word	0x40011000
 80015ec:	08005b8c 	.word	0x08005b8c
 80015f0:	08005b98 	.word	0x08005b98
 80015f4:	08005ba4 	.word	0x08005ba4
 80015f8:	08005bac 	.word	0x08005bac
 80015fc:	08005bc8 	.word	0x08005bc8
 8001600:	20000098 	.word	0x20000098
 8001604:	08005bd8 	.word	0x08005bd8
 8001608:	08005bec 	.word	0x08005bec
 800160c:	08005c08 	.word	0x08005c08
 8001610:	08005c1c 	.word	0x08005c1c
 8001614:	08005c30 	.word	0x08005c30

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161c:	f000 fed0 	bl	80023c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_timer ();
 8001620:	f000 fcfa 	bl	8002018 <init_timer>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001624:	f000 f872 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001628:	f000 f9c0 	bl	80019ac <MX_GPIO_Init>
  MX_TIM1_Init();
 800162c:	f000 f8f8 	bl	8001820 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001630:	f000 f8c0 	bl	80017b4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001634:	f000 f990 	bl	8001958 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001638:	f000 f942 	bl	80018c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);     // Main tick counter
 800163c:	4829      	ldr	r0, [pc, #164]	; (80016e4 <main+0xcc>)
 800163e:	f002 faa9 	bl	8003b94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);     // Used for us counter
 8001642:	4829      	ldr	r0, [pc, #164]	; (80016e8 <main+0xd0>)
 8001644:	f002 fa54 	bl	8003af0 <HAL_TIM_Base_Start>


  HAL_GPIO_WritePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	2101      	movs	r1, #1
 800164c:	4827      	ldr	r0, [pc, #156]	; (80016ec <main+0xd4>)
 800164e:	f001 f9c2 	bl	80029d6 <HAL_GPIO_WritePin>

  // Must use Base Start IT if using interrupts
  HAL_UART_Receive_IT(&huart1, &uart.rxchar, 1);  // UART to console interface
 8001652:	2201      	movs	r2, #1
 8001654:	4926      	ldr	r1, [pc, #152]	; (80016f0 <main+0xd8>)
 8001656:	4827      	ldr	r0, [pc, #156]	; (80016f4 <main+0xdc>)
 8001658:	f002 ff33 	bl	80044c2 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(time.flag_10ms_tick) 
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <main+0xe0>)
 800165e:	78db      	ldrb	r3, [r3, #3]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d01f      	beq.n	80016a4 <main+0x8c>
    {
		  time.flag_10ms_tick = false;
 8001664:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <main+0xe0>)
 8001666:	2200      	movs	r2, #0
 8001668:	70da      	strb	r2, [r3, #3]
      
      /** Enable fan it temp is to high */
      if(temp.flt_temp_value > TEMP_TRIP_POINT_F) 
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <main+0xe4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4924      	ldr	r1, [pc, #144]	; (8001700 <main+0xe8>)
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fcc9 	bl	8001008 <__aeabi_fcmpgt>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <main+0x70>
      {
        HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	481a      	ldr	r0, [pc, #104]	; (80016ec <main+0xd4>)
 8001682:	f001 f9a8 	bl	80029d6 <HAL_GPIO_WritePin>
 8001686:	e00d      	b.n	80016a4 <main+0x8c>
      }

      /** Disable the fan when the temp is cool enough */
      else if(temp.flt_temp_value < (TEMP_TRIP_POINT_F - TEMP_HYSTERESIS_F))
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <main+0xe4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	491d      	ldr	r1, [pc, #116]	; (8001704 <main+0xec>)
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fc9c 	bl	8000fcc <__aeabi_fcmplt>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d004      	beq.n	80016a4 <main+0x8c>
      {
        HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2140      	movs	r1, #64	; 0x40
 800169e:	4813      	ldr	r0, [pc, #76]	; (80016ec <main+0xd4>)
 80016a0:	f001 f999 	bl	80029d6 <HAL_GPIO_WritePin>
      }

	  }

	  if(time.flag_100ms_tick) 
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <main+0xe0>)
 80016a6:	791b      	ldrb	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <main+0xbc>
    {
      time.flag_100ms_tick = false;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <main+0xe0>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	711a      	strb	r2, [r3, #4]
      HAL_GPIO_TogglePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin);
 80016b2:	2101      	movs	r1, #1
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <main+0xd4>)
 80016b6:	f001 f9a6 	bl	8002a06 <HAL_GPIO_TogglePin>
      get_temperature_reading();
 80016ba:	f000 fa55 	bl	8001b68 <get_temperature_reading>
      if(uart.rxchar == 'z')
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <main+0xf0>)
 80016c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016c4:	2b7a      	cmp	r3, #122	; 0x7a
 80016c6:	d105      	bne.n	80016d4 <main+0xbc>
      {
        uart.rxchar = '\0';
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <main+0xf0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        console_menu();
 80016d0:	f7ff fe62 	bl	8001398 <console_menu>
      }
	  }

    if(time.flag_500ms_tick) {
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <main+0xe0>)
 80016d6:	795b      	ldrb	r3, [r3, #5]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0bf      	beq.n	800165c <main+0x44>
      time.flag_500ms_tick = false;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <main+0xe0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	715a      	strb	r2, [r3, #5]
	  if(time.flag_10ms_tick) 
 80016e2:	e7bb      	b.n	800165c <main+0x44>
 80016e4:	20000138 	.word	0x20000138
 80016e8:	200001e0 	.word	0x200001e0
 80016ec:	40011000 	.word	0x40011000
 80016f0:	200000e1 	.word	0x200000e1
 80016f4:	200000f0 	.word	0x200000f0
 80016f8:	20000180 	.word	0x20000180
 80016fc:	20000098 	.word	0x20000098
 8001700:	42a00000 	.word	0x42a00000
 8001704:	429c0000 	.word	0x429c0000
 8001708:	200000c0 	.word	0x200000c0

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b094      	sub	sp, #80	; 0x50
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 0318 	add.w	r3, r7, #24
 8001716:	2238      	movs	r2, #56	; 0x38
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f003 f8a2 	bl	8004864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172e:	2301      	movs	r3, #1
 8001730:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8001738:	2304      	movs	r3, #4
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800173c:	2301      	movs	r3, #1
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8001740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001744:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001746:	2302      	movs	r3, #2
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001750:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001754:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8001756:	2302      	movs	r3, #2
 8001758:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL10;
 800175a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800175e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV4;
 8001760:	2330      	movs	r3, #48	; 0x30
 8001762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	4618      	mov	r0, r3
 800176a:	f001 f965 	bl	8002a38 <HAL_RCC_OscConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001774:	f000 f9dc 	bl	8001b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001778:	230f      	movs	r3, #15
 800177a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177c:	2302      	movs	r3, #2
 800177e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2102      	movs	r1, #2
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fc66 	bl	8003064 <HAL_RCC_ClockConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800179e:	f000 f9c7 	bl	8001b30 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80017a2:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <SystemClock_Config+0xa4>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
}
 80017a8:	bf00      	nop
 80017aa:	3750      	adds	r7, #80	; 0x50
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	42420070 	.word	0x42420070

080017b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_SPI1_Init+0x64>)
 80017ba:	4a18      	ldr	r2, [pc, #96]	; (800181c <MX_SPI1_Init+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_SPI1_Init+0x64>)
 80017c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_SPI1_Init+0x64>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_SPI1_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_SPI1_Init+0x64>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_SPI1_Init+0x64>)
 80017da:	2201      	movs	r2, #1
 80017dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_SPI1_Init+0x64>)
 80017e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_SPI1_Init+0x64>)
 80017e8:	2230      	movs	r2, #48	; 0x30
 80017ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_SPI1_Init+0x64>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <MX_SPI1_Init+0x64>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_SPI1_Init+0x64>)
 8001800:	220a      	movs	r2, #10
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <MX_SPI1_Init+0x64>)
 8001806:	f001 fe3d 	bl	8003484 <HAL_SPI_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001810:	f000 f98e 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000188 	.word	0x20000188
 800181c:	40013000 	.word	0x40013000

08001820 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001826:	f107 0308 	add.w	r3, r7, #8
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	463b      	mov	r3, r7
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <MX_TIM1_Init+0x98>)
 800183e:	4a1f      	ldr	r2, [pc, #124]	; (80018bc <MX_TIM1_Init+0x9c>)
 8001840:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_TIM1_Init+0x98>)
 8001844:	2247      	movs	r2, #71	; 0x47
 8001846:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <MX_TIM1_Init+0x98>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_TIM1_Init+0x98>)
 8001850:	f242 720f 	movw	r2, #9999	; 0x270f
 8001854:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_TIM1_Init+0x98>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800185c:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <MX_TIM1_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <MX_TIM1_Init+0x98>)
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001868:	4813      	ldr	r0, [pc, #76]	; (80018b8 <MX_TIM1_Init+0x98>)
 800186a:	f002 f8f2 	bl	8003a52 <HAL_TIM_Base_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001874:	f000 f95c 	bl	8001b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	4619      	mov	r1, r3
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <MX_TIM1_Init+0x98>)
 8001886:	f002 facf 	bl	8003e28 <HAL_TIM_ConfigClockSource>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001890:	f000 f94e 	bl	8001b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800189c:	463b      	mov	r3, r7
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_TIM1_Init+0x98>)
 80018a2:	f002 fcbb 	bl	800421c <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018ac:	f000 f940 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000138 	.word	0x20000138
 80018bc:	40012c00 	.word	0x40012c00

080018c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c6:	f107 0308 	add.w	r3, r7, #8
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	463b      	mov	r3, r7
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <MX_TIM2_Init+0x94>)
 80018de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <MX_TIM2_Init+0x94>)
 80018e6:	2247      	movs	r2, #71	; 0x47
 80018e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <MX_TIM2_Init+0x94>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <MX_TIM2_Init+0x94>)
 80018f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <MX_TIM2_Init+0x94>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_TIM2_Init+0x94>)
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001904:	4813      	ldr	r0, [pc, #76]	; (8001954 <MX_TIM2_Init+0x94>)
 8001906:	f002 f8a4 	bl	8003a52 <HAL_TIM_Base_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001910:	f000 f90e 	bl	8001b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001918:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	4619      	mov	r1, r3
 8001920:	480c      	ldr	r0, [pc, #48]	; (8001954 <MX_TIM2_Init+0x94>)
 8001922:	f002 fa81 	bl	8003e28 <HAL_TIM_ConfigClockSource>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800192c:	f000 f900 	bl	8001b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_TIM2_Init+0x94>)
 800193e:	f002 fc6d 	bl	800421c <HAL_TIMEx_MasterConfigSynchronization>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001948:	f000 f8f2 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200001e0 	.word	0x200001e0

08001958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_USART1_UART_Init+0x50>)
 8001960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001990:	f002 fcbc 	bl	800430c <HAL_UART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800199a:	f000 f8c9 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200000f0 	.word	0x200000f0
 80019a8:	40013800 	.word	0x40013800

080019ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c0:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <MX_GPIO_Init+0xf0>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a35      	ldr	r2, [pc, #212]	; (8001a9c <MX_GPIO_Init+0xf0>)
 80019c6:	f043 0310 	orr.w	r3, r3, #16
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <MX_GPIO_Init+0xf0>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d8:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <MX_GPIO_Init+0xf0>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a2f      	ldr	r2, [pc, #188]	; (8001a9c <MX_GPIO_Init+0xf0>)
 80019de:	f043 0320 	orr.w	r3, r3, #32
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <MX_GPIO_Init+0xf0>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <MX_GPIO_Init+0xf0>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a29      	ldr	r2, [pc, #164]	; (8001a9c <MX_GPIO_Init+0xf0>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <MX_GPIO_Init+0xf0>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <MX_GPIO_Init+0xf0>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a23      	ldr	r2, [pc, #140]	; (8001a9c <MX_GPIO_Init+0xf0>)
 8001a0e:	f043 0308 	orr.w	r3, r3, #8
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <MX_GPIO_Init+0xf0>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HLTH_LED_GPIO_Port, HLTH_LED_Pin, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	2101      	movs	r1, #1
 8001a24:	481e      	ldr	r0, [pc, #120]	; (8001aa0 <MX_GPIO_Init+0xf4>)
 8001a26:	f000 ffd6 	bl	80029d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_EN_GPIO_Port, FAN_EN_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2140      	movs	r1, #64	; 0x40
 8001a2e:	481c      	ldr	r0, [pc, #112]	; (8001aa0 <MX_GPIO_Init+0xf4>)
 8001a30:	f000 ffd1 	bl	80029d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEMP_CS_GPIO_Port, TEMP_CS_Pin, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a3a:	481a      	ldr	r0, [pc, #104]	; (8001aa4 <MX_GPIO_Init+0xf8>)
 8001a3c:	f000 ffcb 	bl	80029d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ID_B0_Pin ID_B1_Pin ID_B2_Pin */
  GPIO_InitStruct.Pin = ID_B0_Pin|ID_B1_Pin|ID_B2_Pin;
 8001a40:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	4619      	mov	r1, r3
 8001a54:	4812      	ldr	r0, [pc, #72]	; (8001aa0 <MX_GPIO_Init+0xf4>)
 8001a56:	f000 fe23 	bl	80026a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HLTH_LED_Pin FAN_EN_Pin */
  GPIO_InitStruct.Pin = HLTH_LED_Pin|FAN_EN_Pin;
 8001a5a:	2341      	movs	r3, #65	; 0x41
 8001a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <MX_GPIO_Init+0xf4>)
 8001a72:	f000 fe15 	bl	80026a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_CS_Pin */
  GPIO_InitStruct.Pin = TEMP_CS_Pin;
 8001a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2302      	movs	r3, #2
 8001a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_CS_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_GPIO_Init+0xf8>)
 8001a90:	f000 fe06 	bl	80026a0 <HAL_GPIO_Init>

}
 8001a94:	bf00      	nop
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40011000 	.word	0x40011000
 8001aa4:	40010800 	.word	0x40010800

08001aa8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */
/************************************************
 *  @brief Handle timer interrupts 
 ***********************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) 
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if(htim == &htim1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d132      	bne.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x76>
  {
    time.flag_10ms_tick = true;
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	70da      	strb	r2, [r3, #3]

    if(time.ticks10ms == 9) 
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b09      	cmp	r3, #9
 8001ac4:	d125      	bne.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x6a>
    {
        time.ticks10ms = 0;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
        time.flag_100ms_tick = true;
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	711a      	strb	r2, [r3, #4]

        if(time.ticks100ms == 4) 
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001ad4:	785b      	ldrb	r3, [r3, #1]
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d114      	bne.n	8001b04 <HAL_TIM_PeriodElapsedCallback+0x5c>
        {
          time.ticks100ms = 0;
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	705a      	strb	r2, [r3, #1]
          time.flag_500ms_tick = true;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	715a      	strb	r2, [r3, #5]

          if(time.ticks500ms == 119)										// One minute worth of half seconds
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001ae8:	789b      	ldrb	r3, [r3, #2]
 8001aea:	2b77      	cmp	r3, #119	; 0x77
 8001aec:	d103      	bne.n	8001af6 <HAL_TIM_PeriodElapsedCallback+0x4e>
          {
            time.ticks500ms = 0;
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	709a      	strb	r2, [r3, #2]
    {
      time.ticks10ms += 1;
    }

  }
}
 8001af4:	e013      	b.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x76>
            time.ticks500ms += 1;
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001af8:	789b      	ldrb	r3, [r3, #2]
 8001afa:	3301      	adds	r3, #1
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001b00:	709a      	strb	r2, [r3, #2]
}
 8001b02:	e00c      	b.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x76>
          time.ticks100ms += 1;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001b06:	785b      	ldrb	r3, [r3, #1]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001b0e:	705a      	strb	r2, [r3, #1]
}
 8001b10:	e005      	b.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x76>
      time.ticks10ms += 1;
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001b1c:	701a      	strb	r2, [r3, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	20000138 	.word	0x20000138
 8001b2c:	20000180 	.word	0x20000180

08001b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b34:	b672      	cpsid	i
}
 8001b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <Error_Handler+0x8>

08001b3a <twos_convert>:
#include "timer.h"

struct TEMPMembers temp;

uint16_t twos_convert(uint16_t x) 
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	80fb      	strh	r3, [r7, #6]
    x ^= 0xFFFF;
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	80fb      	strh	r3, [r7, #6]
    x += 0x0001;
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	80fb      	strh	r3, [r7, #6]
    x &= 0x3FFF;    //Only care about the 14 temperature bits
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b56:	80fb      	strh	r3, [r7, #6]
    return(x);
 8001b58:	88fb      	ldrh	r3, [r7, #6]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	0000      	movs	r0, r0
	...

08001b68 <get_temperature_reading>:


bool get_temperature_reading( void )
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af02      	add	r7, sp, #8
    uint8_t i                   = 0;  
 8001b6e:	2300      	movs	r3, #0
 8001b70:	77fb      	strb	r3, [r7, #31]
    uint16_t signed_temp_data   = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	827b      	strh	r3, [r7, #18]
    uint32_t raw                = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]

    float temp_sum              = 0.0;
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
    float temp_value            = -0.0;
 8001b80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001b84:	617b      	str	r3, [r7, #20]

    uint8_t tx[4] = {0x00, 0x00, 0x00, 0x00};   // dummy bytes to clock data out
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
    uint8_t rx[4] = {0};
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
//   delay(10);                   //Delay in ms

    /**
     * Drop the CS line low
     */
    HAL_GPIO_WritePin(TEMP_CS_GPIO_Port, TEMP_CS_Pin, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b94:	485a      	ldr	r0, [pc, #360]	; (8001d00 <get_temperature_reading+0x198>)
 8001b96:	f000 ff1e 	bl	80029d6 <HAL_GPIO_WritePin>
    blocking_ms_delay(2); //TODO we want this in
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f000 fa56 	bl	800204c <blocking_ms_delay>
    
    if(HAL_SPI_TransmitReceive(&hspi1, tx, rx, sizeof(rx), 10) != HAL_OK)  // 10 ms timeout
 8001ba0:	1d3a      	adds	r2, r7, #4
 8001ba2:	f107 0108 	add.w	r1, r7, #8
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2304      	movs	r3, #4
 8001bac:	4855      	ldr	r0, [pc, #340]	; (8001d04 <get_temperature_reading+0x19c>)
 8001bae:	f001 fced 	bl	800358c <HAL_SPI_TransmitReceive>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <get_temperature_reading+0x54>
    {
        return false;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e097      	b.n	8001cec <get_temperature_reading+0x184>
    } 
    
    /**
     * Bring the CS pin back high
     */
    HAL_GPIO_WritePin(TEMP_CS_GPIO_Port, TEMP_CS_Pin, GPIO_PIN_SET);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc2:	484f      	ldr	r0, [pc, #316]	; (8001d00 <get_temperature_reading+0x198>)
 8001bc4:	f000 ff07 	bl	80029d6 <HAL_GPIO_WritePin>
    
    
    raw = ((uint32_t)rx[0] << 24) | ((uint32_t)rx[1] << 16)
 8001bc8:	793b      	ldrb	r3, [r7, #4]
 8001bca:	061a      	lsls	r2, r3, #24
 8001bcc:	797b      	ldrb	r3, [r7, #5]
 8001bce:	041b      	lsls	r3, r3, #16
 8001bd0:	431a      	orrs	r2, r3
    | ((uint32_t)rx[2] << 8)  |  (uint32_t)rx[3];
 8001bd2:	79bb      	ldrb	r3, [r7, #6]
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	79fa      	ldrb	r2, [r7, #7]
    raw = ((uint32_t)rx[0] << 24) | ((uint32_t)rx[1] << 16)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
    
    signed_temp_data = (uint16_t)((raw >> 18) & 0x3FFF);     // Going to pack the result as an integer
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	0c9b      	lsrs	r3, r3, #18
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001be8:	827b      	strh	r3, [r7, #18]
    
    if(signed_temp_data & (0x2000)) 
 8001bea:	8a7b      	ldrh	r3, [r7, #18]
 8001bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d017      	beq.n	8001c24 <get_temperature_reading+0xbc>
    {
        signed_temp_data = twos_convert(signed_temp_data);
 8001bf4:	8a7b      	ldrh	r3, [r7, #18]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff9f 	bl	8001b3a <twos_convert>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	827b      	strh	r3, [r7, #18]
        temp_value = (float)(signed_temp_data / -4.0);
 8001c00:	8a7b      	ldrh	r3, [r7, #18]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fc6a 	bl	80004dc <__aeabi_i2d>
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	4b3e      	ldr	r3, [pc, #248]	; (8001d08 <get_temperature_reading+0x1a0>)
 8001c0e:	f7fe fdf9 	bl	8000804 <__aeabi_ddiv>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f7fe fedb 	bl	80009d4 <__aeabi_d2f>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	e010      	b.n	8001c46 <get_temperature_reading+0xde>
    }
    else 
    {
        temp_value = (float)(signed_temp_data / 4.0);
 8001c24:	8a7b      	ldrh	r3, [r7, #18]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc58 	bl	80004dc <__aeabi_i2d>
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <get_temperature_reading+0x1a4>)
 8001c32:	f7fe fde7 	bl	8000804 <__aeabi_ddiv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7fe fec9 	bl	80009d4 <__aeabi_d2f>
 8001c42:	4603      	mov	r3, r0
 8001c44:	617b      	str	r3, [r7, #20]
    }
    
    /**
     * Convert Celsius to Fahrenheit
     */
    temp_value = (float)((temp_value * 1.8) + 32);
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7fe fc5a 	bl	8000500 <__aeabi_f2d>
 8001c4c:	a32a      	add	r3, pc, #168	; (adr r3, 8001cf8 <get_temperature_reading+0x190>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fcad 	bl	80005b0 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <get_temperature_reading+0x1a8>)
 8001c64:	f7fe faee 	bl	8000244 <__adddf3>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7fe feb0 	bl	80009d4 <__aeabi_d2f>
 8001c74:	4603      	mov	r3, r0
 8001c76:	617b      	str	r3, [r7, #20]

    temp.temperature_buffer[temp.temp_buf_index] = temp_value;   
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <get_temperature_reading+0x1ac>)
 8001c7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c7e:	4a25      	ldr	r2, [pc, #148]	; (8001d14 <get_temperature_reading+0x1ac>)
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	605a      	str	r2, [r3, #4]
    (temp.temp_buf_index >= 7) ? (temp.temp_buf_index = 0):(temp.temp_buf_index++);
 8001c88:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <get_temperature_reading+0x1ac>)
 8001c8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d904      	bls.n	8001c9c <get_temperature_reading+0x134>
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <get_temperature_reading+0x1ac>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c9a:	e007      	b.n	8001cac <get_temperature_reading+0x144>
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <get_temperature_reading+0x1ac>)
 8001c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <get_temperature_reading+0x1ac>)
 8001ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    temp_sum = 0.0;   // Reset this value in preparation to calculate the average
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
    
    for(i = 0; i < 8; i++) 
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	77fb      	strb	r3, [r7, #31]
 8001cb6:	e00d      	b.n	8001cd4 <get_temperature_reading+0x16c>
    {
        temp_sum += temp.temperature_buffer[i];
 8001cb8:	7ffb      	ldrb	r3, [r7, #31]
 8001cba:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <get_temperature_reading+0x1ac>)
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	69b8      	ldr	r0, [r7, #24]
 8001cc6:	f7fe fedb 	bl	8000a80 <__addsf3>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < 8; i++) 
 8001cce:	7ffb      	ldrb	r3, [r7, #31]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	77fb      	strb	r3, [r7, #31]
 8001cd4:	7ffb      	ldrb	r3, [r7, #31]
 8001cd6:	2b07      	cmp	r3, #7
 8001cd8:	d9ee      	bls.n	8001cb8 <get_temperature_reading+0x150>
    }

    temp.flt_temp_value = (float)(temp_sum / 8);  
 8001cda:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001cde:	69b8      	ldr	r0, [r7, #24]
 8001ce0:	f7ff f88a 	bl	8000df8 <__aeabi_fdiv>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <get_temperature_reading+0x1ac>)
 8001cea:	601a      	str	r2, [r3, #0]
    // temp_value = float(temp_sum / 8);  


    // return(temp_value);

}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	cccccccd 	.word	0xcccccccd
 8001cfc:	3ffccccc 	.word	0x3ffccccc
 8001d00:	40010800 	.word	0x40010800
 8001d04:	20000188 	.word	0x20000188
 8001d08:	c0100000 	.word	0xc0100000
 8001d0c:	40100000 	.word	0x40100000
 8001d10:	40400000 	.word	0x40400000
 8001d14:	20000098 	.word	0x20000098

08001d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6193      	str	r3, [r2, #24]
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_MspInit+0x5c>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_MspInit+0x60>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <HAL_MspInit+0x60>)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010000 	.word	0x40010000

08001d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <HAL_SPI_MspInit+0x88>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d12f      	bne.n	8001dfc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <HAL_SPI_MspInit+0x8c>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <HAL_SPI_MspInit+0x8c>)
 8001da2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001da6:	6193      	str	r3, [r2, #24]
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_SPI_MspInit+0x8c>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_SPI_MspInit+0x8c>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <HAL_SPI_MspInit+0x8c>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	6193      	str	r3, [r2, #24]
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_SPI_MspInit+0x8c>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_TEMP_SCK_Pin|SPI1_TEMP_MOSI_Pin;
 8001dcc:	23a0      	movs	r3, #160	; 0xa0
 8001dce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480b      	ldr	r0, [pc, #44]	; (8001e0c <HAL_SPI_MspInit+0x90>)
 8001de0:	f000 fc5e 	bl	80026a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_TEMP_MISO_Pin;
 8001de4:	2340      	movs	r3, #64	; 0x40
 8001de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI1_TEMP_MISO_GPIO_Port, &GPIO_InitStruct);
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	4619      	mov	r1, r3
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <HAL_SPI_MspInit+0x90>)
 8001df8:	f000 fc52 	bl	80026a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40013000 	.word	0x40013000
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010800 	.word	0x40010800

08001e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1a      	ldr	r2, [pc, #104]	; (8001e88 <HAL_TIM_Base_MspInit+0x78>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d114      	bne.n	8001e4c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_TIM_Base_MspInit+0x7c>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_TIM_Base_MspInit+0x7c>)
 8001e28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e2c:	6193      	str	r3, [r2, #24]
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_TIM_Base_MspInit+0x7c>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2019      	movs	r0, #25
 8001e40:	f000 fbf7 	bl	8002632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e44:	2019      	movs	r0, #25
 8001e46:	f000 fc10 	bl	800266a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e4a:	e018      	b.n	8001e7e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e54:	d113      	bne.n	8001e7e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_TIM_Base_MspInit+0x7c>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <HAL_TIM_Base_MspInit+0x7c>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_TIM_Base_MspInit+0x7c>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	201c      	movs	r0, #28
 8001e74:	f000 fbdd 	bl	8002632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e78:	201c      	movs	r0, #28
 8001e7a:	f000 fbf6 	bl	800266a <HAL_NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40012c00 	.word	0x40012c00
 8001e8c:	40021000 	.word	0x40021000

08001e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_UART_MspInit+0x8c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d131      	bne.n	8001f14 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_UART_MspInit+0x90>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <HAL_UART_MspInit+0x90>)
 8001eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eba:	6193      	str	r3, [r2, #24]
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_UART_MspInit+0x90>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_UART_MspInit+0x90>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <HAL_UART_MspInit+0x90>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	6193      	str	r3, [r2, #24]
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_UART_MspInit+0x90>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_RXD_MCU_TXD_Pin;
 8001ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_RXD_MCU_TXD_GPIO_Port, &GPIO_InitStruct);
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480b      	ldr	r0, [pc, #44]	; (8001f24 <HAL_UART_MspInit+0x94>)
 8001ef6:	f000 fbd3 	bl	80026a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_TXD_MCU_RXD_Pin;
 8001efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(USB_TXD_MCU_RXD_GPIO_Port, &GPIO_InitStruct);
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4805      	ldr	r0, [pc, #20]	; (8001f24 <HAL_UART_MspInit+0x94>)
 8001f10:	f000 fbc6 	bl	80026a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f14:	bf00      	nop
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010800 	.word	0x40010800

08001f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <NMI_Handler+0x4>

08001f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <HardFault_Handler+0x4>

08001f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <MemManage_Handler+0x4>

08001f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <BusFault_Handler+0x4>

08001f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <UsageFault_Handler+0x4>

08001f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6e:	f000 fa6d 	bl	800244c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <TIM1_UP_IRQHandler+0x10>)
 8001f7e:	f001 fe63 	bl	8003c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000138 	.word	0x20000138

08001f8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <TIM2_IRQHandler+0x10>)
 8001f92:	f001 fe59 	bl	8003c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200001e0 	.word	0x200001e0

08001fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd0:	f002 fc1e 	bl	8004810 <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e009      	b.n	8001ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <_sbrk+0x64>)
 8001ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20010000 	.word	0x20010000
 8002000:	00000400 	.word	0x00000400
 8002004:	2000008c 	.word	0x2000008c
 8002008:	20000240 	.word	0x20000240

0800200c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <init_timer>:

struct timing       time;

//TODO need to clean up the following

void init_timer ( void ) {
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
//   time.led_fast_blink = false; //TODO remove?  
  time.flag_10ms_tick = false;
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <init_timer+0x30>)
 800201e:	2200      	movs	r2, #0
 8002020:	70da      	strb	r2, [r3, #3]
  time.flag_100ms_tick = false;
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <init_timer+0x30>)
 8002024:	2200      	movs	r2, #0
 8002026:	711a      	strb	r2, [r3, #4]
  time.flag_500ms_tick = false;
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <init_timer+0x30>)
 800202a:	2200      	movs	r2, #0
 800202c:	715a      	strb	r2, [r3, #5]
  time.ticks10ms = 0;
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <init_timer+0x30>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
  time.ticks100ms = 0;
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <init_timer+0x30>)
 8002036:	2200      	movs	r2, #0
 8002038:	705a      	strb	r2, [r3, #1]
  time.ticks500ms = 0;
 800203a:	4b03      	ldr	r3, [pc, #12]	; (8002048 <init_timer+0x30>)
 800203c:	2200      	movs	r2, #0
 800203e:	709a      	strb	r2, [r3, #2]

}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	20000180 	.word	0x20000180

0800204c <blocking_ms_delay>:
	__HAL_TIM_SET_COUNTER(&htim2,0);    // set the counter value a 0
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // Ticks are in us
}

void blocking_ms_delay(uint32_t ms)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
    uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);   // µs counter
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <blocking_ms_delay+0x3c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	60fb      	str	r3, [r7, #12]
    uint32_t wait  = ms * 1000UL;                     // total µs
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	60bb      	str	r3, [r7, #8]

    // works across wrap-around because of unsigned subtraction
    while ((uint32_t)(__HAL_TIM_GET_COUNTER(&htim2) - start) < wait) {
 8002068:	e000      	b.n	800206c <blocking_ms_delay+0x20>
        __NOP();
 800206a:	bf00      	nop
    while ((uint32_t)(__HAL_TIM_GET_COUNTER(&htim2) - start) < wait) {
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <blocking_ms_delay+0x3c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	429a      	cmp	r2, r3
 800207a:	d8f6      	bhi.n	800206a <blocking_ms_delay+0x1e>
    }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	200001e0 	.word	0x200001e0

0800208c <print_float>:
 */
#include "uart.h"

struct UARTMembers  uart; 

void print_float (float number, uint8_t action) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]
    char temp_buffer[8];        //Define the array that will hold the ASCII values
    char c = '\0';
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]

    /* USE SPRINT F TO BUILD THE ARRAY OF ASCII CHARACTERS */
    sprintf((char *)temp_buffer, "%.4f", number);   //f tells the function we want to print a float value
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7fe fa2f 	bl	8000500 <__aeabi_f2d>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	f107 0010 	add.w	r0, r7, #16
 80020aa:	491a      	ldr	r1, [pc, #104]	; (8002114 <print_float+0x88>)
 80020ac:	f002 fbe2 	bl	8004874 <siprintf>


    HAL_UART_Transmit(&huart1, (uint8_t *)&temp_buffer, sizeof(temp_buffer), HAL_MAX_DELAY);
 80020b0:	f107 0110 	add.w	r1, r7, #16
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
 80020b8:	2208      	movs	r2, #8
 80020ba:	4817      	ldr	r0, [pc, #92]	; (8002118 <print_float+0x8c>)
 80020bc:	f002 f976 	bl	80043ac <HAL_UART_Transmit>


    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d114      	bne.n	80020f0 <print_float+0x64>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80020c6:	230d      	movs	r3, #13
 80020c8:	73fb      	strb	r3, [r7, #15]
 80020ca:	f107 010f 	add.w	r1, r7, #15
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	2201      	movs	r2, #1
 80020d4:	4810      	ldr	r0, [pc, #64]	; (8002118 <print_float+0x8c>)
 80020d6:	f002 f969 	bl	80043ac <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80020da:	230a      	movs	r3, #10
 80020dc:	73fb      	strb	r3, [r7, #15]
 80020de:	f107 010f 	add.w	r1, r7, #15
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
 80020e6:	2201      	movs	r2, #1
 80020e8:	480b      	ldr	r0, [pc, #44]	; (8002118 <print_float+0x8c>)
 80020ea:	f002 f95f 	bl	80043ac <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}
 80020ee:	e00c      	b.n	800210a <print_float+0x7e>
    else if(action == CR) {
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d109      	bne.n	800210a <print_float+0x7e>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80020f6:	230d      	movs	r3, #13
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	f107 010f 	add.w	r1, r7, #15
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	2201      	movs	r2, #1
 8002104:	4804      	ldr	r0, [pc, #16]	; (8002118 <print_float+0x8c>)
 8002106:	f002 f951 	bl	80043ac <HAL_UART_Transmit>
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	08005c44 	.word	0x08005c44
 8002118:	200000f0 	.word	0x200000f0

0800211c <print_unsigned_decimal>:
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}

void print_unsigned_decimal (uint16_t number, uint8_t action) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	460a      	mov	r2, r1
 8002126:	80fb      	strh	r3, [r7, #6]
 8002128:	4613      	mov	r3, r2
 800212a:	717b      	strb	r3, [r7, #5]
    char temphex[5];        //Define the array that will hold the ASCII values
    char c = '\r';
 800212c:	230d      	movs	r3, #13
 800212e:	73fb      	strb	r3, [r7, #15]
    uint8_t i;                
    uint8_t decimal_count;    //This is how many digits are written

    /* USE SPRINT F TO BUILD THE ARRAY OF ASCII CHARACTERS */
    decimal_count = (uint8_t)(sprintf(temphex, "%u", number)); //u tells the function we want an unsigned decimal number
 8002130:	88fa      	ldrh	r2, [r7, #6]
 8002132:	f107 0310 	add.w	r3, r7, #16
 8002136:	4920      	ldr	r1, [pc, #128]	; (80021b8 <print_unsigned_decimal+0x9c>)
 8002138:	4618      	mov	r0, r3
 800213a:	f002 fb9b 	bl	8004874 <siprintf>
 800213e:	4603      	mov	r3, r0
 8002140:	75bb      	strb	r3, [r7, #22]

    for(i = 0; i < decimal_count; i++) {    //Print out the array of ASCII characters.
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]
 8002146:	e00c      	b.n	8002162 <print_unsigned_decimal+0x46>
        // TXREG1 = (temphex[i]);
        HAL_UART_Transmit(&huart1,(uint8_t *) &temphex[i], (uint16_t) 0x01, HAL_MAX_DELAY);
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	f107 0210 	add.w	r2, r7, #16
 800214e:	18d1      	adds	r1, r2, r3
 8002150:	f04f 33ff 	mov.w	r3, #4294967295
 8002154:	2201      	movs	r2, #1
 8002156:	4819      	ldr	r0, [pc, #100]	; (80021bc <print_unsigned_decimal+0xa0>)
 8002158:	f002 f928 	bl	80043ac <HAL_UART_Transmit>
    for(i = 0; i < decimal_count; i++) {    //Print out the array of ASCII characters.
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	3301      	adds	r3, #1
 8002160:	75fb      	strb	r3, [r7, #23]
 8002162:	7dfa      	ldrb	r2, [r7, #23]
 8002164:	7dbb      	ldrb	r3, [r7, #22]
 8002166:	429a      	cmp	r2, r3
 8002168:	d3ee      	bcc.n	8002148 <print_unsigned_decimal+0x2c>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 800216a:	797b      	ldrb	r3, [r7, #5]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d112      	bne.n	8002196 <print_unsigned_decimal+0x7a>
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002170:	f107 010f 	add.w	r1, r7, #15
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	2201      	movs	r2, #1
 800217a:	4810      	ldr	r0, [pc, #64]	; (80021bc <print_unsigned_decimal+0xa0>)
 800217c:	f002 f916 	bl	80043ac <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002180:	230a      	movs	r3, #10
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	f107 010f 	add.w	r1, r7, #15
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	2201      	movs	r2, #1
 800218e:	480b      	ldr	r0, [pc, #44]	; (80021bc <print_unsigned_decimal+0xa0>)
 8002190:	f002 f90c 	bl	80043ac <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }
}
 8002194:	e00c      	b.n	80021b0 <print_unsigned_decimal+0x94>
    else if(action == CR) {
 8002196:	797b      	ldrb	r3, [r7, #5]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d109      	bne.n	80021b0 <print_unsigned_decimal+0x94>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 800219c:	230d      	movs	r3, #13
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	f107 010f 	add.w	r1, r7, #15
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	2201      	movs	r2, #1
 80021aa:	4804      	ldr	r0, [pc, #16]	; (80021bc <print_unsigned_decimal+0xa0>)
 80021ac:	f002 f8fe 	bl	80043ac <HAL_UART_Transmit>
}
 80021b0:	bf00      	nop
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	08005c4c 	.word	0x08005c4c
 80021bc:	200000f0 	.word	0x200000f0

080021c0 <print_string>:


void print_string(const char * s, uint8_t action) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	70fb      	strb	r3, [r7, #3]
    char c = '\0';
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]

    while(*s != '\0') {
 80021d0:	e009      	b.n	80021e6 <print_string+0x26>
        HAL_UART_Transmit(&huart1, (uint8_t *) s, (uint16_t) 0x01, HAL_MAX_DELAY);
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	2201      	movs	r2, #1
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4819      	ldr	r0, [pc, #100]	; (8002240 <print_string+0x80>)
 80021dc:	f002 f8e6 	bl	80043ac <HAL_UART_Transmit>
        s++;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3301      	adds	r3, #1
 80021e4:	607b      	str	r3, [r7, #4]
    while(*s != '\0') {
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f1      	bne.n	80021d2 <print_string+0x12>
    }

    /* CHECK TO SEE IF THE USER WISHES TO CREATE A NEW LINE */
    if(action == LF) {
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d114      	bne.n	800221e <print_string+0x5e>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80021f4:	230d      	movs	r3, #13
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	f107 010f 	add.w	r1, r7, #15
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002200:	2201      	movs	r2, #1
 8002202:	480f      	ldr	r0, [pc, #60]	; (8002240 <print_string+0x80>)
 8002204:	f002 f8d2 	bl	80043ac <HAL_UART_Transmit>
        c = '\n';  HAL_UART_Transmit(&huart1, (uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002208:	230a      	movs	r3, #10
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	f107 010f 	add.w	r1, r7, #15
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
 8002214:	2201      	movs	r2, #1
 8002216:	480a      	ldr	r0, [pc, #40]	; (8002240 <print_string+0x80>)
 8002218:	f002 f8c8 	bl	80043ac <HAL_UART_Transmit>
    }
    else if(action == CR) {
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    }

}
 800221c:	e00c      	b.n	8002238 <print_string+0x78>
    else if(action == CR) {
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d109      	bne.n	8002238 <print_string+0x78>
        c = '\r';  HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002224:	230d      	movs	r3, #13
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	f107 010f 	add.w	r1, r7, #15
 800222c:	f04f 33ff 	mov.w	r3, #4294967295
 8002230:	2201      	movs	r2, #1
 8002232:	4803      	ldr	r0, [pc, #12]	; (8002240 <print_string+0x80>)
 8002234:	f002 f8ba 	bl	80043ac <HAL_UART_Transmit>
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200000f0 	.word	0x200000f0

08002244 <clear_screen>:
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    print_string("[1J",0);        //Send the rest of the sequence to clear the screen

}

void clear_screen( void ) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
    char c = 0x1B;
 800224a:	231b      	movs	r3, #27
 800224c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 800224e:	1df9      	adds	r1, r7, #7
 8002250:	f04f 33ff 	mov.w	r3, #4294967295
 8002254:	2201      	movs	r2, #1
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <clear_screen+0x28>)
 8002258:	f002 f8a8 	bl	80043ac <HAL_UART_Transmit>
    print_string("[2J",0);        //Send the rest of the sequence to clear the screen
 800225c:	2100      	movs	r1, #0
 800225e:	4804      	ldr	r0, [pc, #16]	; (8002270 <clear_screen+0x2c>)
 8002260:	f7ff ffae 	bl	80021c0 <print_string>
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200000f0 	.word	0x200000f0
 8002270:	08005c54 	.word	0x08005c54

08002274 <cursor_top_left>:
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
    print_string("[2K",0);        //Send the rest of the sequence to clear the screen

}

void cursor_top_left( void ) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
    char c = 0x1B;
 800227a:	231b      	movs	r3, #27
 800227c:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 800227e:	1df9      	adds	r1, r7, #7
 8002280:	f04f 33ff 	mov.w	r3, #4294967295
 8002284:	2201      	movs	r2, #1
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <cursor_top_left+0x28>)
 8002288:	f002 f890 	bl	80043ac <HAL_UART_Transmit>
    print_string("[H",0);     //Send the rest of the sequence to clear the screen
 800228c:	2100      	movs	r1, #0
 800228e:	4804      	ldr	r0, [pc, #16]	; (80022a0 <cursor_top_left+0x2c>)
 8002290:	f7ff ff96 	bl	80021c0 <print_string>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200000f0 	.word	0x200000f0
 80022a0:	08005c5c 	.word	0x08005c5c

080022a4 <reset_terminal>:

void reset_terminal( void ) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
    char c = 0x1B;
 80022aa:	231b      	movs	r3, #27
 80022ac:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80022ae:	1df9      	adds	r1, r7, #7
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295
 80022b4:	2201      	movs	r2, #1
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <reset_terminal+0x28>)
 80022b8:	f002 f878 	bl	80043ac <HAL_UART_Transmit>
    print_string("c",0);      //Send the rest of the sequence to clear the screen
 80022bc:	2100      	movs	r1, #0
 80022be:	4804      	ldr	r0, [pc, #16]	; (80022d0 <reset_terminal+0x2c>)
 80022c0:	f7ff ff7e 	bl	80021c0 <print_string>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	200000f0 	.word	0x200000f0
 80022d0:	08005c60 	.word	0x08005c60

080022d4 <insert_line_feed>:

void insert_line_feed( uint8_t line_feeds ) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;         //Use this as a counter
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]
    char c = '\r';
 80022e2:	230d      	movs	r3, #13
 80022e4:	73bb      	strb	r3, [r7, #14]
    
    for(i = 0; i < line_feeds; i++){
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	e014      	b.n	8002316 <insert_line_feed+0x42>
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 80022ec:	f107 010e 	add.w	r1, r7, #14
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295
 80022f4:	2201      	movs	r2, #1
 80022f6:	480c      	ldr	r0, [pc, #48]	; (8002328 <insert_line_feed+0x54>)
 80022f8:	f002 f858 	bl	80043ac <HAL_UART_Transmit>
        c = '\n'; 
 80022fc:	230a      	movs	r3, #10
 80022fe:	73bb      	strb	r3, [r7, #14]
        HAL_UART_Transmit(&huart1,(uint8_t *) &c, (uint16_t) 0x01, HAL_MAX_DELAY);
 8002300:	f107 010e 	add.w	r1, r7, #14
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
 8002308:	2201      	movs	r2, #1
 800230a:	4807      	ldr	r0, [pc, #28]	; (8002328 <insert_line_feed+0x54>)
 800230c:	f002 f84e 	bl	80043ac <HAL_UART_Transmit>
    for(i = 0; i < line_feeds; i++){
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	3301      	adds	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	7bfa      	ldrb	r2, [r7, #15]
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	429a      	cmp	r2, r3
 800231c:	d3e6      	bcc.n	80022ec <insert_line_feed+0x18>
    }
}
 800231e:	bf00      	nop
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200000f0 	.word	0x200000f0

0800232c <insert_line_separator>:

void insert_line_separator( void ) {
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
    print_string("---------------------------------------", LF);
 8002330:	2101      	movs	r1, #1
 8002332:	4802      	ldr	r0, [pc, #8]	; (800233c <insert_line_separator+0x10>)
 8002334:	f7ff ff44 	bl	80021c0 <print_string>
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	08005c64 	.word	0x08005c64

08002340 <reset_rx_buffer>:

void reset_rx_buffer( void ) {
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0

    uart.consumer_index = uart.producer_index = 0;                              //Reset the pointers
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <reset_rx_buffer+0x30>)
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <reset_rx_buffer+0x30>)
 800234e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <reset_rx_buffer+0x30>)
 8002354:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    uart.byte_counter = 0;                                            //Reset the data counter
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <reset_rx_buffer+0x30>)
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    memset(uart.rxbuf,'\0',MAX_ELEMENTS);                           //Null out the buffer
 8002360:	2221      	movs	r2, #33	; 0x21
 8002362:	2100      	movs	r1, #0
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <reset_rx_buffer+0x30>)
 8002366:	f002 fa7d 	bl	8004864 <memset>
} /* End of ResetRxBuffer */
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200000c0 	.word	0x200000c0

08002374 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002374:	f7ff fe4a 	bl	800200c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002378:	480b      	ldr	r0, [pc, #44]	; (80023a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800237a:	490c      	ldr	r1, [pc, #48]	; (80023ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800237c:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800237e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002380:	e002      	b.n	8002388 <LoopCopyDataInit>

08002382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002386:	3304      	adds	r3, #4

08002388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800238c:	d3f9      	bcc.n	8002382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002390:	4c09      	ldr	r4, [pc, #36]	; (80023b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002394:	e001      	b.n	800239a <LoopFillZerobss>

08002396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002398:	3204      	adds	r2, #4

0800239a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800239c:	d3fb      	bcc.n	8002396 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800239e:	f002 fa3d 	bl	800481c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023a2:	f7ff f939 	bl	8001618 <main>
  bx lr
 80023a6:	4770      	bx	lr
  ldr r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80023b0:	08005e90 	.word	0x08005e90
  ldr r2, =_sbss
 80023b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80023b8:	2000023c 	.word	0x2000023c

080023bc <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC1_2_IRQHandler>
	...

080023c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_Init+0x28>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_Init+0x28>)
 80023ca:	f043 0310 	orr.w	r3, r3, #16
 80023ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f000 f923 	bl	800261c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f000 f808 	bl	80023ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023dc:	f7ff fc9c 	bl	8001d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40022000 	.word	0x40022000

080023ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_InitTick+0x54>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_InitTick+0x58>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002402:	fbb3 f3f1 	udiv	r3, r3, r1
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f93b 	bl	8002686 <HAL_SYSTICK_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00e      	b.n	8002438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0f      	cmp	r3, #15
 800241e:	d80a      	bhi.n	8002436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002420:	2200      	movs	r2, #0
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f000 f903 	bl	8002632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800242c:	4a06      	ldr	r2, [pc, #24]	; (8002448 <HAL_InitTick+0x5c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e000      	b.n	8002438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000000 	.word	0x20000000
 8002444:	20000008 	.word	0x20000008
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_IncTick+0x1c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_IncTick+0x20>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4413      	add	r3, r2
 800245c:	4a03      	ldr	r2, [pc, #12]	; (800246c <HAL_IncTick+0x20>)
 800245e:	6013      	str	r3, [r2, #0]
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	20000008 	.word	0x20000008
 800246c:	20000228 	.word	0x20000228

08002470 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return uwTick;
 8002474:	4b02      	ldr	r3, [pc, #8]	; (8002480 <HAL_GetTick+0x10>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	20000228 	.word	0x20000228

08002484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b6:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <__NVIC_GetPriorityGrouping+0x18>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 0307 	and.w	r3, r3, #7
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db0b      	blt.n	8002512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	4906      	ldr	r1, [pc, #24]	; (800251c <__NVIC_EnableIRQ+0x34>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2001      	movs	r0, #1
 800250a:	fa00 f202 	lsl.w	r2, r0, r2
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100

08002520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	; (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	; (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
         );
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e8:	d301      	bcc.n	80025ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ea:	2301      	movs	r3, #1
 80025ec:	e00f      	b.n	800260e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ee:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <SysTick_Config+0x40>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f6:	210f      	movs	r1, #15
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295
 80025fc:	f7ff ff90 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <SysTick_Config+0x40>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <SysTick_Config+0x40>)
 8002608:	2207      	movs	r2, #7
 800260a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	e000e010 	.word	0xe000e010

0800261c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ff2d 	bl	8002484 <__NVIC_SetPriorityGrouping>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002644:	f7ff ff42 	bl	80024cc <__NVIC_GetPriorityGrouping>
 8002648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	6978      	ldr	r0, [r7, #20]
 8002650:	f7ff ff90 	bl	8002574 <NVIC_EncodePriority>
 8002654:	4602      	mov	r2, r0
 8002656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff5f 	bl	8002520 <__NVIC_SetPriority>
}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff35 	bl	80024e8 <__NVIC_EnableIRQ>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ffa2 	bl	80025d8 <SysTick_Config>
 8002694:	4603      	mov	r3, r0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b08b      	sub	sp, #44	; 0x2c
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026b2:	e169      	b.n	8002988 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026b4:	2201      	movs	r2, #1
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	f040 8158 	bne.w	8002982 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4a9a      	ldr	r2, [pc, #616]	; (8002940 <HAL_GPIO_Init+0x2a0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d05e      	beq.n	800279a <HAL_GPIO_Init+0xfa>
 80026dc:	4a98      	ldr	r2, [pc, #608]	; (8002940 <HAL_GPIO_Init+0x2a0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d875      	bhi.n	80027ce <HAL_GPIO_Init+0x12e>
 80026e2:	4a98      	ldr	r2, [pc, #608]	; (8002944 <HAL_GPIO_Init+0x2a4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d058      	beq.n	800279a <HAL_GPIO_Init+0xfa>
 80026e8:	4a96      	ldr	r2, [pc, #600]	; (8002944 <HAL_GPIO_Init+0x2a4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d86f      	bhi.n	80027ce <HAL_GPIO_Init+0x12e>
 80026ee:	4a96      	ldr	r2, [pc, #600]	; (8002948 <HAL_GPIO_Init+0x2a8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d052      	beq.n	800279a <HAL_GPIO_Init+0xfa>
 80026f4:	4a94      	ldr	r2, [pc, #592]	; (8002948 <HAL_GPIO_Init+0x2a8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d869      	bhi.n	80027ce <HAL_GPIO_Init+0x12e>
 80026fa:	4a94      	ldr	r2, [pc, #592]	; (800294c <HAL_GPIO_Init+0x2ac>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d04c      	beq.n	800279a <HAL_GPIO_Init+0xfa>
 8002700:	4a92      	ldr	r2, [pc, #584]	; (800294c <HAL_GPIO_Init+0x2ac>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d863      	bhi.n	80027ce <HAL_GPIO_Init+0x12e>
 8002706:	4a92      	ldr	r2, [pc, #584]	; (8002950 <HAL_GPIO_Init+0x2b0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d046      	beq.n	800279a <HAL_GPIO_Init+0xfa>
 800270c:	4a90      	ldr	r2, [pc, #576]	; (8002950 <HAL_GPIO_Init+0x2b0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d85d      	bhi.n	80027ce <HAL_GPIO_Init+0x12e>
 8002712:	2b12      	cmp	r3, #18
 8002714:	d82a      	bhi.n	800276c <HAL_GPIO_Init+0xcc>
 8002716:	2b12      	cmp	r3, #18
 8002718:	d859      	bhi.n	80027ce <HAL_GPIO_Init+0x12e>
 800271a:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <HAL_GPIO_Init+0x80>)
 800271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002720:	0800279b 	.word	0x0800279b
 8002724:	08002775 	.word	0x08002775
 8002728:	08002787 	.word	0x08002787
 800272c:	080027c9 	.word	0x080027c9
 8002730:	080027cf 	.word	0x080027cf
 8002734:	080027cf 	.word	0x080027cf
 8002738:	080027cf 	.word	0x080027cf
 800273c:	080027cf 	.word	0x080027cf
 8002740:	080027cf 	.word	0x080027cf
 8002744:	080027cf 	.word	0x080027cf
 8002748:	080027cf 	.word	0x080027cf
 800274c:	080027cf 	.word	0x080027cf
 8002750:	080027cf 	.word	0x080027cf
 8002754:	080027cf 	.word	0x080027cf
 8002758:	080027cf 	.word	0x080027cf
 800275c:	080027cf 	.word	0x080027cf
 8002760:	080027cf 	.word	0x080027cf
 8002764:	0800277d 	.word	0x0800277d
 8002768:	08002791 	.word	0x08002791
 800276c:	4a79      	ldr	r2, [pc, #484]	; (8002954 <HAL_GPIO_Init+0x2b4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002772:	e02c      	b.n	80027ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	623b      	str	r3, [r7, #32]
          break;
 800277a:	e029      	b.n	80027d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	3304      	adds	r3, #4
 8002782:	623b      	str	r3, [r7, #32]
          break;
 8002784:	e024      	b.n	80027d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	3308      	adds	r3, #8
 800278c:	623b      	str	r3, [r7, #32]
          break;
 800278e:	e01f      	b.n	80027d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	330c      	adds	r3, #12
 8002796:	623b      	str	r3, [r7, #32]
          break;
 8002798:	e01a      	b.n	80027d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027a2:	2304      	movs	r3, #4
 80027a4:	623b      	str	r3, [r7, #32]
          break;
 80027a6:	e013      	b.n	80027d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027b0:	2308      	movs	r3, #8
 80027b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	611a      	str	r2, [r3, #16]
          break;
 80027ba:	e009      	b.n	80027d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027bc:	2308      	movs	r3, #8
 80027be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	615a      	str	r2, [r3, #20]
          break;
 80027c6:	e003      	b.n	80027d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027c8:	2300      	movs	r3, #0
 80027ca:	623b      	str	r3, [r7, #32]
          break;
 80027cc:	e000      	b.n	80027d0 <HAL_GPIO_Init+0x130>
          break;
 80027ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2bff      	cmp	r3, #255	; 0xff
 80027d4:	d801      	bhi.n	80027da <HAL_GPIO_Init+0x13a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	e001      	b.n	80027de <HAL_GPIO_Init+0x13e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3304      	adds	r3, #4
 80027de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2bff      	cmp	r3, #255	; 0xff
 80027e4:	d802      	bhi.n	80027ec <HAL_GPIO_Init+0x14c>
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	e002      	b.n	80027f2 <HAL_GPIO_Init+0x152>
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	3b08      	subs	r3, #8
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	210f      	movs	r1, #15
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	401a      	ands	r2, r3
 8002804:	6a39      	ldr	r1, [r7, #32]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	431a      	orrs	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 80b1 	beq.w	8002982 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002820:	4b4d      	ldr	r3, [pc, #308]	; (8002958 <HAL_GPIO_Init+0x2b8>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4a4c      	ldr	r2, [pc, #304]	; (8002958 <HAL_GPIO_Init+0x2b8>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6193      	str	r3, [r2, #24]
 800282c:	4b4a      	ldr	r3, [pc, #296]	; (8002958 <HAL_GPIO_Init+0x2b8>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002838:	4a48      	ldr	r2, [pc, #288]	; (800295c <HAL_GPIO_Init+0x2bc>)
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	3302      	adds	r3, #2
 8002840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002844:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	220f      	movs	r2, #15
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a40      	ldr	r2, [pc, #256]	; (8002960 <HAL_GPIO_Init+0x2c0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d013      	beq.n	800288c <HAL_GPIO_Init+0x1ec>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a3f      	ldr	r2, [pc, #252]	; (8002964 <HAL_GPIO_Init+0x2c4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00d      	beq.n	8002888 <HAL_GPIO_Init+0x1e8>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a3e      	ldr	r2, [pc, #248]	; (8002968 <HAL_GPIO_Init+0x2c8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d007      	beq.n	8002884 <HAL_GPIO_Init+0x1e4>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a3d      	ldr	r2, [pc, #244]	; (800296c <HAL_GPIO_Init+0x2cc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d101      	bne.n	8002880 <HAL_GPIO_Init+0x1e0>
 800287c:	2303      	movs	r3, #3
 800287e:	e006      	b.n	800288e <HAL_GPIO_Init+0x1ee>
 8002880:	2304      	movs	r3, #4
 8002882:	e004      	b.n	800288e <HAL_GPIO_Init+0x1ee>
 8002884:	2302      	movs	r3, #2
 8002886:	e002      	b.n	800288e <HAL_GPIO_Init+0x1ee>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <HAL_GPIO_Init+0x1ee>
 800288c:	2300      	movs	r3, #0
 800288e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002890:	f002 0203 	and.w	r2, r2, #3
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	4093      	lsls	r3, r2
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800289e:	492f      	ldr	r1, [pc, #188]	; (800295c <HAL_GPIO_Init+0x2bc>)
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	3302      	adds	r3, #2
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d006      	beq.n	80028c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028b8:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <HAL_GPIO_Init+0x2d0>)
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	492c      	ldr	r1, [pc, #176]	; (8002970 <HAL_GPIO_Init+0x2d0>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028c6:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <HAL_GPIO_Init+0x2d0>)
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	4928      	ldr	r1, [pc, #160]	; (8002970 <HAL_GPIO_Init+0x2d0>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028e0:	4b23      	ldr	r3, [pc, #140]	; (8002970 <HAL_GPIO_Init+0x2d0>)
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	4922      	ldr	r1, [pc, #136]	; (8002970 <HAL_GPIO_Init+0x2d0>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
 80028ec:	e006      	b.n	80028fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_GPIO_Init+0x2d0>)
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	491e      	ldr	r1, [pc, #120]	; (8002970 <HAL_GPIO_Init+0x2d0>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d006      	beq.n	8002916 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_GPIO_Init+0x2d0>)
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4918      	ldr	r1, [pc, #96]	; (8002970 <HAL_GPIO_Init+0x2d0>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <HAL_GPIO_Init+0x2d0>)
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	43db      	mvns	r3, r3
 800291e:	4914      	ldr	r1, [pc, #80]	; (8002970 <HAL_GPIO_Init+0x2d0>)
 8002920:	4013      	ands	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d021      	beq.n	8002974 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_GPIO_Init+0x2d0>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	490e      	ldr	r1, [pc, #56]	; (8002970 <HAL_GPIO_Init+0x2d0>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
 800293c:	e021      	b.n	8002982 <HAL_GPIO_Init+0x2e2>
 800293e:	bf00      	nop
 8002940:	10320000 	.word	0x10320000
 8002944:	10310000 	.word	0x10310000
 8002948:	10220000 	.word	0x10220000
 800294c:	10210000 	.word	0x10210000
 8002950:	10120000 	.word	0x10120000
 8002954:	10110000 	.word	0x10110000
 8002958:	40021000 	.word	0x40021000
 800295c:	40010000 	.word	0x40010000
 8002960:	40010800 	.word	0x40010800
 8002964:	40010c00 	.word	0x40010c00
 8002968:	40011000 	.word	0x40011000
 800296c:	40011400 	.word	0x40011400
 8002970:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_GPIO_Init+0x304>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	43db      	mvns	r3, r3
 800297c:	4909      	ldr	r1, [pc, #36]	; (80029a4 <HAL_GPIO_Init+0x304>)
 800297e:	4013      	ands	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	3301      	adds	r3, #1
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	fa22 f303 	lsr.w	r3, r2, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	f47f ae8e 	bne.w	80026b4 <HAL_GPIO_Init+0x14>
  }
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	372c      	adds	r7, #44	; 0x2c
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	40010400 	.word	0x40010400

080029a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	887b      	ldrh	r3, [r7, #2]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	e001      	b.n	80029ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	807b      	strh	r3, [r7, #2]
 80029e2:	4613      	mov	r3, r2
 80029e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029e6:	787b      	ldrb	r3, [r7, #1]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ec:	887a      	ldrh	r2, [r7, #2]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029f2:	e003      	b.n	80029fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029f4:	887b      	ldrh	r3, [r7, #2]
 80029f6:	041a      	lsls	r2, r3, #16
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	611a      	str	r2, [r3, #16]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a18:	887a      	ldrh	r2, [r7, #2]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	041a      	lsls	r2, r3, #16
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	43d9      	mvns	r1, r3
 8002a24:	887b      	ldrh	r3, [r7, #2]
 8002a26:	400b      	ands	r3, r1
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	611a      	str	r2, [r3, #16]
}
 8002a2e:	bf00      	nop
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e304      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8087 	beq.w	8002b66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a58:	4b92      	ldr	r3, [pc, #584]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d00c      	beq.n	8002a7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a64:	4b8f      	ldr	r3, [pc, #572]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d112      	bne.n	8002a96 <HAL_RCC_OscConfig+0x5e>
 8002a70:	4b8c      	ldr	r3, [pc, #560]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7c:	d10b      	bne.n	8002a96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7e:	4b89      	ldr	r3, [pc, #548]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d06c      	beq.n	8002b64 <HAL_RCC_OscConfig+0x12c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d168      	bne.n	8002b64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e2de      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_OscConfig+0x76>
 8002aa0:	4b80      	ldr	r3, [pc, #512]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a7f      	ldr	r2, [pc, #508]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	e02e      	b.n	8002b0c <HAL_RCC_OscConfig+0xd4>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x98>
 8002ab6:	4b7b      	ldr	r3, [pc, #492]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a7a      	ldr	r2, [pc, #488]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b78      	ldr	r3, [pc, #480]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a77      	ldr	r2, [pc, #476]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e01d      	b.n	8002b0c <HAL_RCC_OscConfig+0xd4>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0xbc>
 8002ada:	4b72      	ldr	r3, [pc, #456]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a71      	ldr	r2, [pc, #452]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b6f      	ldr	r3, [pc, #444]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a6e      	ldr	r2, [pc, #440]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0xd4>
 8002af4:	4b6b      	ldr	r3, [pc, #428]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a6a      	ldr	r2, [pc, #424]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a67      	ldr	r2, [pc, #412]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7ff fcac 	bl	8002470 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7ff fca8 	bl	8002470 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e292      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0xe4>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7ff fc98 	bl	8002470 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b44:	f7ff fc94 	bl	8002470 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	; 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e27e      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b56:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x10c>
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d063      	beq.n	8002c3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b72:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b7e:	4b49      	ldr	r3, [pc, #292]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d11c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x18c>
 8002b8a:	4b46      	ldr	r3, [pc, #280]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d116      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b96:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_RCC_OscConfig+0x176>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e252      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bae:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4939      	ldr	r1, [pc, #228]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc2:	e03a      	b.n	8002c3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d020      	beq.n	8002c0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bcc:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <HAL_RCC_OscConfig+0x270>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7ff fc4d 	bl	8002470 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bda:	f7ff fc49 	bl	8002470 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e233      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bec:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf8:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4927      	ldr	r1, [pc, #156]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]
 8002c0c:	e015      	b.n	8002c3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0e:	4b26      	ldr	r3, [pc, #152]	; (8002ca8 <HAL_RCC_OscConfig+0x270>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7ff fc2c 	bl	8002470 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1c:	f7ff fc28 	bl	8002470 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e212      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d03a      	beq.n	8002cbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d019      	beq.n	8002c82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <HAL_RCC_OscConfig+0x274>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c54:	f7ff fc0c 	bl	8002470 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7ff fc08 	bl	8002470 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e1f2      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f000 fbe4 	bl	8003448 <RCC_Delay>
 8002c80:	e01c      	b.n	8002cbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <HAL_RCC_OscConfig+0x274>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c88:	f7ff fbf2 	bl	8002470 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8e:	e00f      	b.n	8002cb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c90:	f7ff fbee 	bl	8002470 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d908      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1d8      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	42420000 	.word	0x42420000
 8002cac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb0:	4b9b      	ldr	r3, [pc, #620]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e9      	bne.n	8002c90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80a6 	beq.w	8002e16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cce:	4b94      	ldr	r3, [pc, #592]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10d      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cda:	4b91      	ldr	r3, [pc, #580]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4a90      	ldr	r2, [pc, #576]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	61d3      	str	r3, [r2, #28]
 8002ce6:	4b8e      	ldr	r3, [pc, #568]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b8b      	ldr	r3, [pc, #556]	; (8002f24 <HAL_RCC_OscConfig+0x4ec>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d118      	bne.n	8002d34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d02:	4b88      	ldr	r3, [pc, #544]	; (8002f24 <HAL_RCC_OscConfig+0x4ec>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a87      	ldr	r2, [pc, #540]	; (8002f24 <HAL_RCC_OscConfig+0x4ec>)
 8002d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0e:	f7ff fbaf 	bl	8002470 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d16:	f7ff fbab 	bl	8002470 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b64      	cmp	r3, #100	; 0x64
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e195      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	4b7e      	ldr	r3, [pc, #504]	; (8002f24 <HAL_RCC_OscConfig+0x4ec>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCC_OscConfig+0x312>
 8002d3c:	4b78      	ldr	r3, [pc, #480]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4a77      	ldr	r2, [pc, #476]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6213      	str	r3, [r2, #32]
 8002d48:	e02d      	b.n	8002da6 <HAL_RCC_OscConfig+0x36e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x334>
 8002d52:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	4a72      	ldr	r2, [pc, #456]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	6213      	str	r3, [r2, #32]
 8002d5e:	4b70      	ldr	r3, [pc, #448]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a6f      	ldr	r2, [pc, #444]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d64:	f023 0304 	bic.w	r3, r3, #4
 8002d68:	6213      	str	r3, [r2, #32]
 8002d6a:	e01c      	b.n	8002da6 <HAL_RCC_OscConfig+0x36e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d10c      	bne.n	8002d8e <HAL_RCC_OscConfig+0x356>
 8002d74:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a69      	ldr	r2, [pc, #420]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d7a:	f043 0304 	orr.w	r3, r3, #4
 8002d7e:	6213      	str	r3, [r2, #32]
 8002d80:	4b67      	ldr	r3, [pc, #412]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4a66      	ldr	r2, [pc, #408]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6213      	str	r3, [r2, #32]
 8002d8c:	e00b      	b.n	8002da6 <HAL_RCC_OscConfig+0x36e>
 8002d8e:	4b64      	ldr	r3, [pc, #400]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a63      	ldr	r2, [pc, #396]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	6213      	str	r3, [r2, #32]
 8002d9a:	4b61      	ldr	r3, [pc, #388]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4a60      	ldr	r2, [pc, #384]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002da0:	f023 0304 	bic.w	r3, r3, #4
 8002da4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d015      	beq.n	8002dda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dae:	f7ff fb5f 	bl	8002470 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7ff fb5b 	bl	8002470 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e143      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	4b54      	ldr	r3, [pc, #336]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ee      	beq.n	8002db6 <HAL_RCC_OscConfig+0x37e>
 8002dd8:	e014      	b.n	8002e04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dda:	f7ff fb49 	bl	8002470 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7ff fb45 	bl	8002470 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e12d      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df8:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1ee      	bne.n	8002de2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d105      	bne.n	8002e16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0a:	4b45      	ldr	r3, [pc, #276]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	4a44      	ldr	r2, [pc, #272]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e14:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 808c 	beq.w	8002f38 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002e20:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2c:	d10e      	bne.n	8002e4c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002e2e:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d108      	bne.n	8002e4c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002e3a:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e103      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d14e      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002e54:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002e60:	4b2f      	ldr	r3, [pc, #188]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0ef      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002e74:	4b2c      	ldr	r3, [pc, #176]	; (8002f28 <HAL_RCC_OscConfig+0x4f0>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7ff faf9 	bl	8002470 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002e82:	f7ff faf5 	bl	8002470 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b64      	cmp	r3, #100	; 0x64
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e0df      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002e94:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f0      	bne.n	8002e82 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	491c      	ldr	r1, [pc, #112]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4918      	ldr	r1, [pc, #96]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_RCC_OscConfig+0x4f0>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eca:	f7ff fad1 	bl	8002470 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002ed2:	f7ff facd 	bl	8002470 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b64      	cmp	r3, #100	; 0x64
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0b7      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x49a>
 8002ef0:	e022      	b.n	8002f38 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <HAL_RCC_OscConfig+0x4f0>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7ff fab4 	bl	8002470 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002f0a:	e00f      	b.n	8002f2c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002f0c:	f7ff fab0 	bl	8002470 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d908      	bls.n	8002f2c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e09a      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
 8002f28:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002f2c:	4b4b      	ldr	r3, [pc, #300]	; (800305c <HAL_RCC_OscConfig+0x624>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e9      	bne.n	8002f0c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 8088 	beq.w	8003052 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f42:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_RCC_OscConfig+0x624>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d068      	beq.n	8003020 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d14d      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	4b42      	ldr	r3, [pc, #264]	; (8003060 <HAL_RCC_OscConfig+0x628>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7ff fa88 	bl	8002470 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7ff fa84 	bl	8002470 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e06e      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f76:	4b39      	ldr	r3, [pc, #228]	; (800305c <HAL_RCC_OscConfig+0x624>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8a:	d10f      	bne.n	8002fac <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002f8c:	4b33      	ldr	r3, [pc, #204]	; (800305c <HAL_RCC_OscConfig+0x624>)
 8002f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4931      	ldr	r1, [pc, #196]	; (800305c <HAL_RCC_OscConfig+0x624>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f9a:	4b30      	ldr	r3, [pc, #192]	; (800305c <HAL_RCC_OscConfig+0x624>)
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	f023 020f 	bic.w	r2, r3, #15
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	492d      	ldr	r1, [pc, #180]	; (800305c <HAL_RCC_OscConfig+0x624>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fac:	4b2b      	ldr	r3, [pc, #172]	; (800305c <HAL_RCC_OscConfig+0x624>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	4927      	ldr	r1, [pc, #156]	; (800305c <HAL_RCC_OscConfig+0x624>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc4:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_RCC_OscConfig+0x628>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fca:	f7ff fa51 	bl	8002470 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7ff fa4d 	bl	8002470 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e037      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe4:	4b1d      	ldr	r3, [pc, #116]	; (800305c <HAL_RCC_OscConfig+0x624>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x59a>
 8002ff0:	e02f      	b.n	8003052 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x628>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7ff fa3a 	bl	8002470 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003000:	f7ff fa36 	bl	8002470 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e020      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003012:	4b12      	ldr	r3, [pc, #72]	; (800305c <HAL_RCC_OscConfig+0x624>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x5c8>
 800301e:	e018      	b.n	8003052 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e013      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_OscConfig+0x624>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	429a      	cmp	r2, r3
 800303e:	d106      	bne.n	800304e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d001      	beq.n	8003052 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000
 8003060:	42420060 	.word	0x42420060

08003064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0d0      	b.n	800321a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003078:	4b6a      	ldr	r3, [pc, #424]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d910      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b67      	ldr	r3, [pc, #412]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 0207 	bic.w	r2, r3, #7
 800308e:	4965      	ldr	r1, [pc, #404]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b63      	ldr	r3, [pc, #396]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0b8      	b.n	800321a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d020      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c0:	4b59      	ldr	r3, [pc, #356]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d8:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4a52      	ldr	r2, [pc, #328]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e4:	4b50      	ldr	r3, [pc, #320]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	494d      	ldr	r1, [pc, #308]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d040      	beq.n	8003184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d115      	bne.n	8003142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e07f      	b.n	800321a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003122:	4b41      	ldr	r3, [pc, #260]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e073      	b.n	800321a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003132:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e06b      	b.n	800321a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003142:	4b39      	ldr	r3, [pc, #228]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f023 0203 	bic.w	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4936      	ldr	r1, [pc, #216]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	4313      	orrs	r3, r2
 8003152:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003154:	f7ff f98c 	bl	8002470 <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315a:	e00a      	b.n	8003172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800315c:	f7ff f988 	bl	8002470 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	; 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e053      	b.n	800321a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 020c 	and.w	r2, r3, #12
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	429a      	cmp	r2, r3
 8003182:	d1eb      	bne.n	800315c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003184:	4b27      	ldr	r3, [pc, #156]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d210      	bcs.n	80031b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b24      	ldr	r3, [pc, #144]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 0207 	bic.w	r2, r3, #7
 800319a:	4922      	ldr	r1, [pc, #136]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_RCC_ClockConfig+0x1c0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e032      	b.n	800321a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4916      	ldr	r1, [pc, #88]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	490e      	ldr	r1, [pc, #56]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031f2:	f000 f821 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80031f6:	4602      	mov	r2, r0
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	490a      	ldr	r1, [pc, #40]	; (800322c <HAL_RCC_ClockConfig+0x1c8>)
 8003204:	5ccb      	ldrb	r3, [r1, r3]
 8003206:	fa22 f303 	lsr.w	r3, r2, r3
 800320a:	4a09      	ldr	r2, [pc, #36]	; (8003230 <HAL_RCC_ClockConfig+0x1cc>)
 800320c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_ClockConfig+0x1d0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff f8ea 	bl	80023ec <HAL_InitTick>

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40022000 	.word	0x40022000
 8003228:	40021000 	.word	0x40021000
 800322c:	08005c98 	.word	0x08005c98
 8003230:	20000000 	.word	0x20000000
 8003234:	20000004 	.word	0x20000004

08003238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800323c:	b089      	sub	sp, #36	; 0x24
 800323e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	2300      	movs	r3, #0
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	2300      	movs	r3, #0
 800324a:	61fb      	str	r3, [r7, #28]
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	2300      	movs	r3, #0
 800325a:	607b      	str	r3, [r7, #4]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800325c:	4b5b      	ldr	r3, [pc, #364]	; (80033cc <HAL_RCC_GetSysClockFreq+0x194>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b04      	cmp	r3, #4
 800326a:	d002      	beq.n	8003272 <HAL_RCC_GetSysClockFreq+0x3a>
 800326c:	2b08      	cmp	r3, #8
 800326e:	d003      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x40>
 8003270:	e0a2      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x180>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003272:	4b57      	ldr	r3, [pc, #348]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x198>)
 8003274:	61bb      	str	r3, [r7, #24]
      break;
 8003276:	e0a2      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x186>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	0c9b      	lsrs	r3, r3, #18
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	4a54      	ldr	r2, [pc, #336]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x19c>)
 8003282:	5cd3      	ldrb	r3, [r2, r3]
 8003284:	60fb      	str	r3, [r7, #12]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 808b 	beq.w	80033a8 <HAL_RCC_GetSysClockFreq+0x170>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003292:	4b4e      	ldr	r3, [pc, #312]	; (80033cc <HAL_RCC_GetSysClockFreq+0x194>)
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	4a4f      	ldr	r2, [pc, #316]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x1a0>)
 800329c:	5cd3      	ldrb	r3, [r2, r3]
 800329e:	613b      	str	r3, [r7, #16]
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80032a0:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_RCC_GetSysClockFreq+0x194>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d06b      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x14c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80032ac:	4b47      	ldr	r3, [pc, #284]	; (80033cc <HAL_RCC_GetSysClockFreq+0x194>)
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	3301      	adds	r3, #1
 80032b8:	60bb      	str	r3, [r7, #8]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80032ba:	4b44      	ldr	r3, [pc, #272]	; (80033cc <HAL_RCC_GetSysClockFreq+0x194>)
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	3302      	adds	r3, #2
 80032c6:	607b      	str	r3, [r7, #4]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f04f 0100 	mov.w	r1, #0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	461a      	mov	r2, r3
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	fb02 f501 	mul.w	r5, r2, r1
 80032dc:	fb00 f403 	mul.w	r4, r0, r3
 80032e0:	192e      	adds	r6, r5, r4
 80032e2:	fba0 4502 	umull	r4, r5, r0, r2
 80032e6:	1973      	adds	r3, r6, r5
 80032e8:	461d      	mov	r5, r3
 80032ea:	4620      	mov	r0, r4
 80032ec:	4629      	mov	r1, r5
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	014b      	lsls	r3, r1, #5
 80032f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032fc:	0142      	lsls	r2, r0, #5
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	1b00      	subs	r0, r0, r4
 8003304:	eb61 0105 	sbc.w	r1, r1, r5
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	018b      	lsls	r3, r1, #6
 8003312:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003316:	0182      	lsls	r2, r0, #6
 8003318:	1a12      	subs	r2, r2, r0
 800331a:	eb63 0301 	sbc.w	r3, r3, r1
 800331e:	f04f 0000 	mov.w	r0, #0
 8003322:	f04f 0100 	mov.w	r1, #0
 8003326:	00d9      	lsls	r1, r3, #3
 8003328:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800332c:	00d0      	lsls	r0, r2, #3
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	1912      	adds	r2, r2, r4
 8003334:	eb45 0303 	adc.w	r3, r5, r3
 8003338:	f04f 0000 	mov.w	r0, #0
 800333c:	f04f 0100 	mov.w	r1, #0
 8003340:	0299      	lsls	r1, r3, #10
 8003342:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003346:	0290      	lsls	r0, r2, #10
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4690      	mov	r8, r2
 800334e:	4699      	mov	r9, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	461a      	mov	r2, r3
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	fb02 f501 	mul.w	r5, r2, r1
 8003364:	fb00 f403 	mul.w	r4, r0, r3
 8003368:	442c      	add	r4, r5
 800336a:	fba0 2302 	umull	r2, r3, r0, r2
 800336e:	18e1      	adds	r1, r4, r3
 8003370:	460b      	mov	r3, r1
 8003372:	4640      	mov	r0, r8
 8003374:	4649      	mov	r1, r9
 8003376:	f7fd fe51 	bl	800101c <__aeabi_uldivmod>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4613      	mov	r3, r2
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	e007      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x15c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x198>)
 8003388:	fb02 f203 	mul.w	r2, r2, r3
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003392:	61fb      	str	r3, [r7, #28]
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003394:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x19c>)
 8003396:	7b5b      	ldrb	r3, [r3, #13]
 8003398:	461a      	mov	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4293      	cmp	r3, r2
 800339e:	d108      	bne.n	80033b2 <HAL_RCC_GetSysClockFreq+0x17a>
        {
          pllclk = pllclk / 2;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	085b      	lsrs	r3, r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	e004      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x17a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a0c      	ldr	r2, [pc, #48]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	61fb      	str	r3, [r7, #28]
      }
      sysclockfreq = pllclk;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	61bb      	str	r3, [r7, #24]
      break;
 80033b6:	e002      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x186>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033ba:	61bb      	str	r3, [r7, #24]
      break;
 80033bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033be:	69bb      	ldr	r3, [r7, #24]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3724      	adds	r7, #36	; 0x24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000
 80033d0:	00f42400 	.word	0x00f42400
 80033d4:	08005cb0 	.word	0x08005cb0
 80033d8:	08005cc0 	.word	0x08005cc0
 80033dc:	003d0900 	.word	0x003d0900
 80033e0:	007a1200 	.word	0x007a1200

080033e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e8:	4b02      	ldr	r3, [pc, #8]	; (80033f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80033ea:	681b      	ldr	r3, [r3, #0]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	20000000 	.word	0x20000000

080033f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033fc:	f7ff fff2 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8003400:	4602      	mov	r2, r0
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	0a1b      	lsrs	r3, r3, #8
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4903      	ldr	r1, [pc, #12]	; (800341c <HAL_RCC_GetPCLK1Freq+0x24>)
 800340e:	5ccb      	ldrb	r3, [r1, r3]
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	08005ca8 	.word	0x08005ca8

08003420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003424:	f7ff ffde 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	0adb      	lsrs	r3, r3, #11
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4903      	ldr	r1, [pc, #12]	; (8003444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	08005ca8 	.word	0x08005ca8

08003448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <RCC_Delay+0x34>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <RCC_Delay+0x38>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	0a5b      	lsrs	r3, r3, #9
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003464:	bf00      	nop
  }
  while (Delay --);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1e5a      	subs	r2, r3, #1
 800346a:	60fa      	str	r2, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f9      	bne.n	8003464 <RCC_Delay+0x1c>
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	20000000 	.word	0x20000000
 8003480:	10624dd3 	.word	0x10624dd3

08003484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e076      	b.n	8003584 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	d108      	bne.n	80034b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a6:	d009      	beq.n	80034bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	61da      	str	r2, [r3, #28]
 80034ae:	e005      	b.n	80034bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fc50 	bl	8001d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003540:	ea42 0103 	orr.w	r1, r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	0c1a      	lsrs	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f002 0204 	and.w	r2, r2, #4
 8003562:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003572:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800359a:	2301      	movs	r3, #1
 800359c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800359e:	f7fe ff67 	bl	8002470 <HAL_GetTick>
 80035a2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035aa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80035b2:	887b      	ldrh	r3, [r7, #2]
 80035b4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035b6:	7ffb      	ldrb	r3, [r7, #31]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d00c      	beq.n	80035d6 <HAL_SPI_TransmitReceive+0x4a>
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035c2:	d106      	bne.n	80035d2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <HAL_SPI_TransmitReceive+0x46>
 80035cc:	7ffb      	ldrb	r3, [r7, #31]
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d001      	beq.n	80035d6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
 80035d4:	e17f      	b.n	80038d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_SPI_TransmitReceive+0x5c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_SPI_TransmitReceive+0x5c>
 80035e2:	887b      	ldrh	r3, [r7, #2]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e174      	b.n	80038d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_SPI_TransmitReceive+0x6e>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e16d      	b.n	80038d6 <HAL_SPI_TransmitReceive+0x34a>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b04      	cmp	r3, #4
 800360c:	d003      	beq.n	8003616 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2205      	movs	r2, #5
 8003612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	887a      	ldrh	r2, [r7, #2]
 8003626:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	887a      	ldrh	r2, [r7, #2]
 800363e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d007      	beq.n	800366a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003668:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003672:	d17e      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_SPI_TransmitReceive+0xf6>
 800367c:	8afb      	ldrh	r3, [r7, #22]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d16c      	bne.n	800375c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	881a      	ldrh	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	1c9a      	adds	r2, r3, #2
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036a6:	e059      	b.n	800375c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d11b      	bne.n	80036ee <HAL_SPI_TransmitReceive+0x162>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d016      	beq.n	80036ee <HAL_SPI_TransmitReceive+0x162>
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d113      	bne.n	80036ee <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	881a      	ldrh	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	1c9a      	adds	r2, r3, #2
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d119      	bne.n	8003730 <HAL_SPI_TransmitReceive+0x1a4>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d014      	beq.n	8003730 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	b292      	uxth	r2, r2
 8003712:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	1c9a      	adds	r2, r3, #2
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800372c:	2301      	movs	r3, #1
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003730:	f7fe fe9e 	bl	8002470 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373c:	429a      	cmp	r2, r3
 800373e:	d80d      	bhi.n	800375c <HAL_SPI_TransmitReceive+0x1d0>
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003746:	d009      	beq.n	800375c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e0bc      	b.n	80038d6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1a0      	bne.n	80036a8 <HAL_SPI_TransmitReceive+0x11c>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d19b      	bne.n	80036a8 <HAL_SPI_TransmitReceive+0x11c>
 8003770:	e082      	b.n	8003878 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x1f4>
 800377a:	8afb      	ldrh	r3, [r7, #22]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d171      	bne.n	8003864 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	330c      	adds	r3, #12
 800378a:	7812      	ldrb	r2, [r2, #0]
 800378c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a6:	e05d      	b.n	8003864 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d11c      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x264>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d017      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x264>
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d114      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	330c      	adds	r3, #12
 80037d0:	7812      	ldrb	r2, [r2, #0]
 80037d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d119      	bne.n	8003832 <HAL_SPI_TransmitReceive+0x2a6>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d014      	beq.n	8003832 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800382e:	2301      	movs	r3, #1
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003832:	f7fe fe1d 	bl	8002470 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383e:	429a      	cmp	r2, r3
 8003840:	d803      	bhi.n	800384a <HAL_SPI_TransmitReceive+0x2be>
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d102      	bne.n	8003850 <HAL_SPI_TransmitReceive+0x2c4>
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e038      	b.n	80038d6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d19c      	bne.n	80037a8 <HAL_SPI_TransmitReceive+0x21c>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d197      	bne.n	80037a8 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003878:	6a3a      	ldr	r2, [r7, #32]
 800387a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f8b7 	bl	80039f0 <SPI_EndRxTxTransaction>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e01d      	b.n	80038d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038a2:	2300      	movs	r3, #0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80038d4:	2300      	movs	r3, #0
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3728      	adds	r7, #40	; 0x28
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038f0:	f7fe fdbe 	bl	8002470 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	4413      	add	r3, r2
 80038fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003900:	f7fe fdb6 	bl	8002470 <HAL_GetTick>
 8003904:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003906:	4b39      	ldr	r3, [pc, #228]	; (80039ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	015b      	lsls	r3, r3, #5
 800390c:	0d1b      	lsrs	r3, r3, #20
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	fb02 f303 	mul.w	r3, r2, r3
 8003914:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003916:	e054      	b.n	80039c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391e:	d050      	beq.n	80039c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003920:	f7fe fda6 	bl	8002470 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	429a      	cmp	r2, r3
 800392e:	d902      	bls.n	8003936 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d13d      	bne.n	80039b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003944:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800394e:	d111      	bne.n	8003974 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003958:	d004      	beq.n	8003964 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003962:	d107      	bne.n	8003974 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003972:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800397c:	d10f      	bne.n	800399e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800399c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e017      	b.n	80039e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	3b01      	subs	r3, #1
 80039c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4013      	ands	r3, r2
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	bf0c      	ite	eq
 80039d2:	2301      	moveq	r3, #1
 80039d4:	2300      	movne	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d19b      	bne.n	8003918 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3720      	adds	r7, #32
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000000 	.word	0x20000000

080039f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2201      	movs	r2, #1
 8003a04:	2102      	movs	r1, #2
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f7ff ff6a 	bl	80038e0 <SPI_WaitFlagStateUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	f043 0220 	orr.w	r2, r3, #32
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e013      	b.n	8003a4a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2180      	movs	r1, #128	; 0x80
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff ff57 	bl	80038e0 <SPI_WaitFlagStateUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	f043 0220 	orr.w	r2, r3, #32
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e000      	b.n	8003a4a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e041      	b.n	8003ae8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7fe f9c9 	bl	8001e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4610      	mov	r0, r2
 8003a92:	f000 fab5 	bl	8004000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d001      	beq.n	8003b08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e037      	b.n	8003b78 <HAL_TIM_Base_Start+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <HAL_TIM_Base_Start+0x94>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <HAL_TIM_Base_Start+0x52>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b22:	d00e      	beq.n	8003b42 <HAL_TIM_Base_Start+0x52>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <HAL_TIM_Base_Start+0x98>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d009      	beq.n	8003b42 <HAL_TIM_Base_Start+0x52>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <HAL_TIM_Base_Start+0x9c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_TIM_Base_Start+0x52>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <HAL_TIM_Base_Start+0xa0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d111      	bne.n	8003b66 <HAL_TIM_Base_Start+0x76>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b06      	cmp	r3, #6
 8003b52:	d010      	beq.n	8003b76 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b64:	e007      	b.n	8003b76 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0201 	orr.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40000400 	.word	0x40000400
 8003b8c:	40000800 	.word	0x40000800
 8003b90:	40000c00 	.word	0x40000c00

08003b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d001      	beq.n	8003bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e03f      	b.n	8003c2c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1b      	ldr	r2, [pc, #108]	; (8003c38 <HAL_TIM_Base_Start_IT+0xa4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <HAL_TIM_Base_Start_IT+0x62>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_TIM_Base_Start_IT+0x62>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <HAL_TIM_Base_Start_IT+0xa8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d009      	beq.n	8003bf6 <HAL_TIM_Base_Start_IT+0x62>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <HAL_TIM_Base_Start_IT+0xac>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_TIM_Base_Start_IT+0x62>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <HAL_TIM_Base_Start_IT+0xb0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d111      	bne.n	8003c1a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b06      	cmp	r3, #6
 8003c06:	d010      	beq.n	8003c2a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c18:	e007      	b.n	8003c2a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0201 	orr.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800
 8003c44:	40000c00 	.word	0x40000c00

08003c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d020      	beq.n	8003cac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01b      	beq.n	8003cac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0202 	mvn.w	r2, #2
 8003c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f998 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f98b 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f99a 	bl	8003fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d020      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01b      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0204 	mvn.w	r2, #4
 8003cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f972 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 8003ce4:	e005      	b.n	8003cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f965 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f974 	bl	8003fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d020      	beq.n	8003d44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01b      	beq.n	8003d44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0208 	mvn.w	r2, #8
 8003d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2204      	movs	r2, #4
 8003d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f94c 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 8003d30:	e005      	b.n	8003d3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f93f 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f94e 	bl	8003fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d020      	beq.n	8003d90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01b      	beq.n	8003d90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0210 	mvn.w	r2, #16
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2208      	movs	r2, #8
 8003d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f926 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f919 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f928 	bl	8003fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00c      	beq.n	8003db4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d007      	beq.n	8003db4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0201 	mvn.w	r2, #1
 8003dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd fe7a 	bl	8001aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00c      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d007      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fa91 	bl	80042fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00c      	beq.n	8003dfc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f8f8 	bl	8003fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00c      	beq.n	8003e20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d007      	beq.n	8003e20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0220 	mvn.w	r2, #32
 8003e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fa64 	bl	80042e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_TIM_ConfigClockSource+0x1c>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e0b4      	b.n	8003fae <HAL_TIM_ConfigClockSource+0x186>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e7c:	d03e      	beq.n	8003efc <HAL_TIM_ConfigClockSource+0xd4>
 8003e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e82:	f200 8087 	bhi.w	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8a:	f000 8086 	beq.w	8003f9a <HAL_TIM_ConfigClockSource+0x172>
 8003e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e92:	d87f      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b70      	cmp	r3, #112	; 0x70
 8003e96:	d01a      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0xa6>
 8003e98:	2b70      	cmp	r3, #112	; 0x70
 8003e9a:	d87b      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003e9c:	2b60      	cmp	r3, #96	; 0x60
 8003e9e:	d050      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x11a>
 8003ea0:	2b60      	cmp	r3, #96	; 0x60
 8003ea2:	d877      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea4:	2b50      	cmp	r3, #80	; 0x50
 8003ea6:	d03c      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0xfa>
 8003ea8:	2b50      	cmp	r3, #80	; 0x50
 8003eaa:	d873      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	d058      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0x13a>
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	d86f      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb4:	2b30      	cmp	r3, #48	; 0x30
 8003eb6:	d064      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x15a>
 8003eb8:	2b30      	cmp	r3, #48	; 0x30
 8003eba:	d86b      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d060      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d867      	bhi.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d05c      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d05a      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ecc:	e062      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6899      	ldr	r1, [r3, #8]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f000 f97e 	bl	80041de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ef0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	609a      	str	r2, [r3, #8]
      break;
 8003efa:	e04f      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	6899      	ldr	r1, [r3, #8]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f000 f967 	bl	80041de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f1e:	609a      	str	r2, [r3, #8]
      break;
 8003f20:	e03c      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f000 f8de 	bl	80040f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2150      	movs	r1, #80	; 0x50
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f935 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003f40:	e02c      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6859      	ldr	r1, [r3, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f000 f8fc 	bl	800414c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2160      	movs	r1, #96	; 0x60
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f925 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003f60:	e01c      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6859      	ldr	r1, [r3, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f000 f8be 	bl	80040f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2140      	movs	r1, #64	; 0x40
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f915 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003f80:	e00c      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f000 f90c 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003f92:	e003      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
      break;
 8003f98:	e000      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr
	...

08004000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a33      	ldr	r2, [pc, #204]	; (80040e0 <TIM_Base_SetConfig+0xe0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00f      	beq.n	8004038 <TIM_Base_SetConfig+0x38>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d00b      	beq.n	8004038 <TIM_Base_SetConfig+0x38>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a30      	ldr	r2, [pc, #192]	; (80040e4 <TIM_Base_SetConfig+0xe4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <TIM_Base_SetConfig+0x38>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a2f      	ldr	r2, [pc, #188]	; (80040e8 <TIM_Base_SetConfig+0xe8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_Base_SetConfig+0x38>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a2e      	ldr	r2, [pc, #184]	; (80040ec <TIM_Base_SetConfig+0xec>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d108      	bne.n	800404a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a24      	ldr	r2, [pc, #144]	; (80040e0 <TIM_Base_SetConfig+0xe0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00f      	beq.n	8004072 <TIM_Base_SetConfig+0x72>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004058:	d00b      	beq.n	8004072 <TIM_Base_SetConfig+0x72>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a21      	ldr	r2, [pc, #132]	; (80040e4 <TIM_Base_SetConfig+0xe4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <TIM_Base_SetConfig+0x72>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a20      	ldr	r2, [pc, #128]	; (80040e8 <TIM_Base_SetConfig+0xe8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <TIM_Base_SetConfig+0x72>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a1f      	ldr	r2, [pc, #124]	; (80040ec <TIM_Base_SetConfig+0xec>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d108      	bne.n	8004084 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a0d      	ldr	r2, [pc, #52]	; (80040e0 <TIM_Base_SetConfig+0xe0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d103      	bne.n	80040b8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f023 0201 	bic.w	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	611a      	str	r2, [r3, #16]
  }
}
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	40012c00 	.word	0x40012c00
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40000c00 	.word	0x40000c00

080040f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f023 0201 	bic.w	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800411a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f023 030a 	bic.w	r3, r3, #10
 800412c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f023 0210 	bic.w	r2, r3, #16
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	031b      	lsls	r3, r3, #12
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004188:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	621a      	str	r2, [r3, #32]
}
 80041a0:	bf00      	nop
 80041a2:	371c      	adds	r7, #28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f043 0307 	orr.w	r3, r3, #7
 80041cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	609a      	str	r2, [r3, #8]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr

080041de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041de:	b480      	push	{r7}
 80041e0:	b087      	sub	sp, #28
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	021a      	lsls	r2, r3, #8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	431a      	orrs	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4313      	orrs	r3, r2
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	609a      	str	r2, [r3, #8]
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004230:	2302      	movs	r3, #2
 8004232:	e04b      	b.n	80042cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a19      	ldr	r2, [pc, #100]	; (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d013      	beq.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d00e      	beq.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a15      	ldr	r2, [pc, #84]	; (80042dc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d009      	beq.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a12      	ldr	r2, [pc, #72]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d10c      	bne.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40012c00 	.word	0x40012c00
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00

080042e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr

080042fa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr

0800430c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e042      	b.n	80043a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fd fdac 	bl	8001e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2224      	movs	r2, #36	; 0x24
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800434e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f9cf 	bl	80046f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d175      	bne.n	80044b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_UART_Transmit+0x2c>
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e06e      	b.n	80044ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2221      	movs	r2, #33	; 0x21
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ea:	f7fe f841 	bl	8002470 <HAL_GetTick>
 80043ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	88fa      	ldrh	r2, [r7, #6]
 80043f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	88fa      	ldrh	r2, [r7, #6]
 80043fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004404:	d108      	bne.n	8004418 <HAL_UART_Transmit+0x6c>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d104      	bne.n	8004418 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	e003      	b.n	8004420 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800441c:	2300      	movs	r3, #0
 800441e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004420:	e02e      	b.n	8004480 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2200      	movs	r2, #0
 800442a:	2180      	movs	r1, #128	; 0x80
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f86d 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e03a      	b.n	80044ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10b      	bne.n	8004462 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004458:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	3302      	adds	r3, #2
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	e007      	b.n	8004472 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	781a      	ldrb	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	3301      	adds	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1cb      	bne.n	8004422 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	2140      	movs	r1, #64	; 0x40
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f839 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e006      	b.n	80044ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	e000      	b.n	80044ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044b8:	2302      	movs	r3, #2
  }
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3720      	adds	r7, #32
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	4613      	mov	r3, r2
 80044ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d112      	bne.n	8004502 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_UART_Receive_IT+0x26>
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e00b      	b.n	8004504 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	461a      	mov	r2, r3
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f860 	bl	80045be <UART_Start_Receive_IT>
 80044fe:	4603      	mov	r3, r0
 8004500:	e000      	b.n	8004504 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004502:	2302      	movs	r3, #2
  }
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451c:	e03b      	b.n	8004596 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d037      	beq.n	8004596 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004526:	f7fd ffa3 	bl	8002470 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	6a3a      	ldr	r2, [r7, #32]
 8004532:	429a      	cmp	r2, r3
 8004534:	d302      	bcc.n	800453c <UART_WaitOnFlagUntilTimeout+0x30>
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e03a      	b.n	80045b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d023      	beq.n	8004596 <UART_WaitOnFlagUntilTimeout+0x8a>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b80      	cmp	r3, #128	; 0x80
 8004552:	d020      	beq.n	8004596 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d01d      	beq.n	8004596 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b08      	cmp	r3, #8
 8004566:	d116      	bne.n	8004596 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f856 	bl	8004630 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2208      	movs	r2, #8
 8004588:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e00f      	b.n	80045b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4013      	ands	r3, r2
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d0b4      	beq.n	800451e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	4613      	mov	r3, r2
 80045ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	88fa      	ldrh	r2, [r7, #6]
 80045dc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2222      	movs	r2, #34	; 0x22
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004602:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695a      	ldr	r2, [r3, #20]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0220 	orr.w	r2, r2, #32
 8004622:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004630:	b480      	push	{r7}
 8004632:	b095      	sub	sp, #84	; 0x54
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800464e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004658:	643a      	str	r2, [r7, #64]	; 0x40
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800465e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e5      	bne.n	8004638 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3314      	adds	r3, #20
 8004672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	61fb      	str	r3, [r7, #28]
   return(result);
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	64bb      	str	r3, [r7, #72]	; 0x48
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3314      	adds	r3, #20
 800468a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800468c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e5      	bne.n	800466c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d119      	bne.n	80046dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	330c      	adds	r3, #12
 80046ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f023 0310 	bic.w	r3, r3, #16
 80046be:	647b      	str	r3, [r7, #68]	; 0x44
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046c8:	61ba      	str	r2, [r7, #24]
 80046ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046cc:	6979      	ldr	r1, [r7, #20]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	e841 2300 	strex	r3, r2, [r1]
 80046d4:	613b      	str	r3, [r7, #16]
   return(result);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e5      	bne.n	80046a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046ea:	bf00      	nop
 80046ec:	3754      	adds	r7, #84	; 0x54
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr

080046f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800472e:	f023 030c 	bic.w	r3, r3, #12
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6812      	ldr	r2, [r2, #0]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	430b      	orrs	r3, r1
 800473a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699a      	ldr	r2, [r3, #24]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2c      	ldr	r2, [pc, #176]	; (8004808 <UART_SetConfig+0x114>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d103      	bne.n	8004764 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800475c:	f7fe fe60 	bl	8003420 <HAL_RCC_GetPCLK2Freq>
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	e002      	b.n	800476a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004764:	f7fe fe48 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 8004768:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	009a      	lsls	r2, r3, #2
 8004774:	441a      	add	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	4a22      	ldr	r2, [pc, #136]	; (800480c <UART_SetConfig+0x118>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	0119      	lsls	r1, r3, #4
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	009a      	lsls	r2, r3, #2
 8004794:	441a      	add	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	fbb2 f2f3 	udiv	r2, r2, r3
 80047a0:	4b1a      	ldr	r3, [pc, #104]	; (800480c <UART_SetConfig+0x118>)
 80047a2:	fba3 0302 	umull	r0, r3, r3, r2
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	2064      	movs	r0, #100	; 0x64
 80047aa:	fb00 f303 	mul.w	r3, r0, r3
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	3332      	adds	r3, #50	; 0x32
 80047b4:	4a15      	ldr	r2, [pc, #84]	; (800480c <UART_SetConfig+0x118>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c0:	4419      	add	r1, r3
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009a      	lsls	r2, r3, #2
 80047cc:	441a      	add	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047d8:	4b0c      	ldr	r3, [pc, #48]	; (800480c <UART_SetConfig+0x118>)
 80047da:	fba3 0302 	umull	r0, r3, r3, r2
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	2064      	movs	r0, #100	; 0x64
 80047e2:	fb00 f303 	mul.w	r3, r0, r3
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	3332      	adds	r3, #50	; 0x32
 80047ec:	4a07      	ldr	r2, [pc, #28]	; (800480c <UART_SetConfig+0x118>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	440a      	add	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40013800 	.word	0x40013800
 800480c:	51eb851f 	.word	0x51eb851f

08004810 <__errno>:
 8004810:	4b01      	ldr	r3, [pc, #4]	; (8004818 <__errno+0x8>)
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	2000000c 	.word	0x2000000c

0800481c <__libc_init_array>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	2600      	movs	r6, #0
 8004820:	4d0c      	ldr	r5, [pc, #48]	; (8004854 <__libc_init_array+0x38>)
 8004822:	4c0d      	ldr	r4, [pc, #52]	; (8004858 <__libc_init_array+0x3c>)
 8004824:	1b64      	subs	r4, r4, r5
 8004826:	10a4      	asrs	r4, r4, #2
 8004828:	42a6      	cmp	r6, r4
 800482a:	d109      	bne.n	8004840 <__libc_init_array+0x24>
 800482c:	f001 f91e 	bl	8005a6c <_init>
 8004830:	2600      	movs	r6, #0
 8004832:	4d0a      	ldr	r5, [pc, #40]	; (800485c <__libc_init_array+0x40>)
 8004834:	4c0a      	ldr	r4, [pc, #40]	; (8004860 <__libc_init_array+0x44>)
 8004836:	1b64      	subs	r4, r4, r5
 8004838:	10a4      	asrs	r4, r4, #2
 800483a:	42a6      	cmp	r6, r4
 800483c:	d105      	bne.n	800484a <__libc_init_array+0x2e>
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	f855 3b04 	ldr.w	r3, [r5], #4
 8004844:	4798      	blx	r3
 8004846:	3601      	adds	r6, #1
 8004848:	e7ee      	b.n	8004828 <__libc_init_array+0xc>
 800484a:	f855 3b04 	ldr.w	r3, [r5], #4
 800484e:	4798      	blx	r3
 8004850:	3601      	adds	r6, #1
 8004852:	e7f2      	b.n	800483a <__libc_init_array+0x1e>
 8004854:	08005e88 	.word	0x08005e88
 8004858:	08005e88 	.word	0x08005e88
 800485c:	08005e88 	.word	0x08005e88
 8004860:	08005e8c 	.word	0x08005e8c

08004864 <memset>:
 8004864:	4603      	mov	r3, r0
 8004866:	4402      	add	r2, r0
 8004868:	4293      	cmp	r3, r2
 800486a:	d100      	bne.n	800486e <memset+0xa>
 800486c:	4770      	bx	lr
 800486e:	f803 1b01 	strb.w	r1, [r3], #1
 8004872:	e7f9      	b.n	8004868 <memset+0x4>

08004874 <siprintf>:
 8004874:	b40e      	push	{r1, r2, r3}
 8004876:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800487a:	b500      	push	{lr}
 800487c:	b09c      	sub	sp, #112	; 0x70
 800487e:	ab1d      	add	r3, sp, #116	; 0x74
 8004880:	9002      	str	r0, [sp, #8]
 8004882:	9006      	str	r0, [sp, #24]
 8004884:	9107      	str	r1, [sp, #28]
 8004886:	9104      	str	r1, [sp, #16]
 8004888:	4808      	ldr	r0, [pc, #32]	; (80048ac <siprintf+0x38>)
 800488a:	4909      	ldr	r1, [pc, #36]	; (80048b0 <siprintf+0x3c>)
 800488c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004890:	9105      	str	r1, [sp, #20]
 8004892:	6800      	ldr	r0, [r0, #0]
 8004894:	a902      	add	r1, sp, #8
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	f000 f894 	bl	80049c4 <_svfiprintf_r>
 800489c:	2200      	movs	r2, #0
 800489e:	9b02      	ldr	r3, [sp, #8]
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	b01c      	add	sp, #112	; 0x70
 80048a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048a8:	b003      	add	sp, #12
 80048aa:	4770      	bx	lr
 80048ac:	2000000c 	.word	0x2000000c
 80048b0:	ffff0208 	.word	0xffff0208

080048b4 <siscanf>:
 80048b4:	b40e      	push	{r1, r2, r3}
 80048b6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80048ba:	b530      	push	{r4, r5, lr}
 80048bc:	b09c      	sub	sp, #112	; 0x70
 80048be:	ac1f      	add	r4, sp, #124	; 0x7c
 80048c0:	f854 5b04 	ldr.w	r5, [r4], #4
 80048c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80048c8:	9002      	str	r0, [sp, #8]
 80048ca:	9006      	str	r0, [sp, #24]
 80048cc:	f7fb fcac 	bl	8000228 <strlen>
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <siscanf+0x4c>)
 80048d2:	9003      	str	r0, [sp, #12]
 80048d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80048d6:	2300      	movs	r3, #0
 80048d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80048da:	9314      	str	r3, [sp, #80]	; 0x50
 80048dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048e0:	9007      	str	r0, [sp, #28]
 80048e2:	4808      	ldr	r0, [pc, #32]	; (8004904 <siscanf+0x50>)
 80048e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80048e8:	462a      	mov	r2, r5
 80048ea:	4623      	mov	r3, r4
 80048ec:	a902      	add	r1, sp, #8
 80048ee:	6800      	ldr	r0, [r0, #0]
 80048f0:	9401      	str	r4, [sp, #4]
 80048f2:	f000 f9c1 	bl	8004c78 <__ssvfiscanf_r>
 80048f6:	b01c      	add	sp, #112	; 0x70
 80048f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048fc:	b003      	add	sp, #12
 80048fe:	4770      	bx	lr
 8004900:	08004909 	.word	0x08004909
 8004904:	2000000c 	.word	0x2000000c

08004908 <__seofread>:
 8004908:	2000      	movs	r0, #0
 800490a:	4770      	bx	lr

0800490c <__ssputs_r>:
 800490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	688e      	ldr	r6, [r1, #8]
 8004912:	4682      	mov	sl, r0
 8004914:	429e      	cmp	r6, r3
 8004916:	460c      	mov	r4, r1
 8004918:	4690      	mov	r8, r2
 800491a:	461f      	mov	r7, r3
 800491c:	d838      	bhi.n	8004990 <__ssputs_r+0x84>
 800491e:	898a      	ldrh	r2, [r1, #12]
 8004920:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004924:	d032      	beq.n	800498c <__ssputs_r+0x80>
 8004926:	6825      	ldr	r5, [r4, #0]
 8004928:	6909      	ldr	r1, [r1, #16]
 800492a:	3301      	adds	r3, #1
 800492c:	eba5 0901 	sub.w	r9, r5, r1
 8004930:	6965      	ldr	r5, [r4, #20]
 8004932:	444b      	add	r3, r9
 8004934:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004938:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800493c:	106d      	asrs	r5, r5, #1
 800493e:	429d      	cmp	r5, r3
 8004940:	bf38      	it	cc
 8004942:	461d      	movcc	r5, r3
 8004944:	0553      	lsls	r3, r2, #21
 8004946:	d531      	bpl.n	80049ac <__ssputs_r+0xa0>
 8004948:	4629      	mov	r1, r5
 800494a:	f000 ffeb 	bl	8005924 <_malloc_r>
 800494e:	4606      	mov	r6, r0
 8004950:	b950      	cbnz	r0, 8004968 <__ssputs_r+0x5c>
 8004952:	230c      	movs	r3, #12
 8004954:	f04f 30ff 	mov.w	r0, #4294967295
 8004958:	f8ca 3000 	str.w	r3, [sl]
 800495c:	89a3      	ldrh	r3, [r4, #12]
 800495e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004962:	81a3      	strh	r3, [r4, #12]
 8004964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004968:	464a      	mov	r2, r9
 800496a:	6921      	ldr	r1, [r4, #16]
 800496c:	f000 ff66 	bl	800583c <memcpy>
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497a:	81a3      	strh	r3, [r4, #12]
 800497c:	6126      	str	r6, [r4, #16]
 800497e:	444e      	add	r6, r9
 8004980:	6026      	str	r6, [r4, #0]
 8004982:	463e      	mov	r6, r7
 8004984:	6165      	str	r5, [r4, #20]
 8004986:	eba5 0509 	sub.w	r5, r5, r9
 800498a:	60a5      	str	r5, [r4, #8]
 800498c:	42be      	cmp	r6, r7
 800498e:	d900      	bls.n	8004992 <__ssputs_r+0x86>
 8004990:	463e      	mov	r6, r7
 8004992:	4632      	mov	r2, r6
 8004994:	4641      	mov	r1, r8
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	f000 ff5e 	bl	8005858 <memmove>
 800499c:	68a3      	ldr	r3, [r4, #8]
 800499e:	6822      	ldr	r2, [r4, #0]
 80049a0:	1b9b      	subs	r3, r3, r6
 80049a2:	4432      	add	r2, r6
 80049a4:	2000      	movs	r0, #0
 80049a6:	60a3      	str	r3, [r4, #8]
 80049a8:	6022      	str	r2, [r4, #0]
 80049aa:	e7db      	b.n	8004964 <__ssputs_r+0x58>
 80049ac:	462a      	mov	r2, r5
 80049ae:	f001 f813 	bl	80059d8 <_realloc_r>
 80049b2:	4606      	mov	r6, r0
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d1e1      	bne.n	800497c <__ssputs_r+0x70>
 80049b8:	4650      	mov	r0, sl
 80049ba:	6921      	ldr	r1, [r4, #16]
 80049bc:	f000 ff66 	bl	800588c <_free_r>
 80049c0:	e7c7      	b.n	8004952 <__ssputs_r+0x46>
	...

080049c4 <_svfiprintf_r>:
 80049c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c8:	4698      	mov	r8, r3
 80049ca:	898b      	ldrh	r3, [r1, #12]
 80049cc:	4607      	mov	r7, r0
 80049ce:	061b      	lsls	r3, r3, #24
 80049d0:	460d      	mov	r5, r1
 80049d2:	4614      	mov	r4, r2
 80049d4:	b09d      	sub	sp, #116	; 0x74
 80049d6:	d50e      	bpl.n	80049f6 <_svfiprintf_r+0x32>
 80049d8:	690b      	ldr	r3, [r1, #16]
 80049da:	b963      	cbnz	r3, 80049f6 <_svfiprintf_r+0x32>
 80049dc:	2140      	movs	r1, #64	; 0x40
 80049de:	f000 ffa1 	bl	8005924 <_malloc_r>
 80049e2:	6028      	str	r0, [r5, #0]
 80049e4:	6128      	str	r0, [r5, #16]
 80049e6:	b920      	cbnz	r0, 80049f2 <_svfiprintf_r+0x2e>
 80049e8:	230c      	movs	r3, #12
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	e0d1      	b.n	8004b96 <_svfiprintf_r+0x1d2>
 80049f2:	2340      	movs	r3, #64	; 0x40
 80049f4:	616b      	str	r3, [r5, #20]
 80049f6:	2300      	movs	r3, #0
 80049f8:	9309      	str	r3, [sp, #36]	; 0x24
 80049fa:	2320      	movs	r3, #32
 80049fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a00:	2330      	movs	r3, #48	; 0x30
 8004a02:	f04f 0901 	mov.w	r9, #1
 8004a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004bb0 <_svfiprintf_r+0x1ec>
 8004a0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a12:	4623      	mov	r3, r4
 8004a14:	469a      	mov	sl, r3
 8004a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a1a:	b10a      	cbz	r2, 8004a20 <_svfiprintf_r+0x5c>
 8004a1c:	2a25      	cmp	r2, #37	; 0x25
 8004a1e:	d1f9      	bne.n	8004a14 <_svfiprintf_r+0x50>
 8004a20:	ebba 0b04 	subs.w	fp, sl, r4
 8004a24:	d00b      	beq.n	8004a3e <_svfiprintf_r+0x7a>
 8004a26:	465b      	mov	r3, fp
 8004a28:	4622      	mov	r2, r4
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	4638      	mov	r0, r7
 8004a2e:	f7ff ff6d 	bl	800490c <__ssputs_r>
 8004a32:	3001      	adds	r0, #1
 8004a34:	f000 80aa 	beq.w	8004b8c <_svfiprintf_r+0x1c8>
 8004a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a3a:	445a      	add	r2, fp
 8004a3c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80a2 	beq.w	8004b8c <_svfiprintf_r+0x1c8>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a52:	f10a 0a01 	add.w	sl, sl, #1
 8004a56:	9304      	str	r3, [sp, #16]
 8004a58:	9307      	str	r3, [sp, #28]
 8004a5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a5e:	931a      	str	r3, [sp, #104]	; 0x68
 8004a60:	4654      	mov	r4, sl
 8004a62:	2205      	movs	r2, #5
 8004a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a68:	4851      	ldr	r0, [pc, #324]	; (8004bb0 <_svfiprintf_r+0x1ec>)
 8004a6a:	f000 fed9 	bl	8005820 <memchr>
 8004a6e:	9a04      	ldr	r2, [sp, #16]
 8004a70:	b9d8      	cbnz	r0, 8004aaa <_svfiprintf_r+0xe6>
 8004a72:	06d0      	lsls	r0, r2, #27
 8004a74:	bf44      	itt	mi
 8004a76:	2320      	movmi	r3, #32
 8004a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a7c:	0711      	lsls	r1, r2, #28
 8004a7e:	bf44      	itt	mi
 8004a80:	232b      	movmi	r3, #43	; 0x2b
 8004a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a86:	f89a 3000 	ldrb.w	r3, [sl]
 8004a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a8c:	d015      	beq.n	8004aba <_svfiprintf_r+0xf6>
 8004a8e:	4654      	mov	r4, sl
 8004a90:	2000      	movs	r0, #0
 8004a92:	f04f 0c0a 	mov.w	ip, #10
 8004a96:	9a07      	ldr	r2, [sp, #28]
 8004a98:	4621      	mov	r1, r4
 8004a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a9e:	3b30      	subs	r3, #48	; 0x30
 8004aa0:	2b09      	cmp	r3, #9
 8004aa2:	d94e      	bls.n	8004b42 <_svfiprintf_r+0x17e>
 8004aa4:	b1b0      	cbz	r0, 8004ad4 <_svfiprintf_r+0x110>
 8004aa6:	9207      	str	r2, [sp, #28]
 8004aa8:	e014      	b.n	8004ad4 <_svfiprintf_r+0x110>
 8004aaa:	eba0 0308 	sub.w	r3, r0, r8
 8004aae:	fa09 f303 	lsl.w	r3, r9, r3
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	46a2      	mov	sl, r4
 8004ab6:	9304      	str	r3, [sp, #16]
 8004ab8:	e7d2      	b.n	8004a60 <_svfiprintf_r+0x9c>
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	1d19      	adds	r1, r3, #4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	9103      	str	r1, [sp, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bfbb      	ittet	lt
 8004ac6:	425b      	neglt	r3, r3
 8004ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8004acc:	9307      	strge	r3, [sp, #28]
 8004ace:	9307      	strlt	r3, [sp, #28]
 8004ad0:	bfb8      	it	lt
 8004ad2:	9204      	strlt	r2, [sp, #16]
 8004ad4:	7823      	ldrb	r3, [r4, #0]
 8004ad6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ad8:	d10c      	bne.n	8004af4 <_svfiprintf_r+0x130>
 8004ada:	7863      	ldrb	r3, [r4, #1]
 8004adc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ade:	d135      	bne.n	8004b4c <_svfiprintf_r+0x188>
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	3402      	adds	r4, #2
 8004ae4:	1d1a      	adds	r2, r3, #4
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	9203      	str	r2, [sp, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bfb8      	it	lt
 8004aee:	f04f 33ff 	movlt.w	r3, #4294967295
 8004af2:	9305      	str	r3, [sp, #20]
 8004af4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004bc0 <_svfiprintf_r+0x1fc>
 8004af8:	2203      	movs	r2, #3
 8004afa:	4650      	mov	r0, sl
 8004afc:	7821      	ldrb	r1, [r4, #0]
 8004afe:	f000 fe8f 	bl	8005820 <memchr>
 8004b02:	b140      	cbz	r0, 8004b16 <_svfiprintf_r+0x152>
 8004b04:	2340      	movs	r3, #64	; 0x40
 8004b06:	eba0 000a 	sub.w	r0, r0, sl
 8004b0a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b0e:	9b04      	ldr	r3, [sp, #16]
 8004b10:	3401      	adds	r4, #1
 8004b12:	4303      	orrs	r3, r0
 8004b14:	9304      	str	r3, [sp, #16]
 8004b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b1a:	2206      	movs	r2, #6
 8004b1c:	4825      	ldr	r0, [pc, #148]	; (8004bb4 <_svfiprintf_r+0x1f0>)
 8004b1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b22:	f000 fe7d 	bl	8005820 <memchr>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	d038      	beq.n	8004b9c <_svfiprintf_r+0x1d8>
 8004b2a:	4b23      	ldr	r3, [pc, #140]	; (8004bb8 <_svfiprintf_r+0x1f4>)
 8004b2c:	bb1b      	cbnz	r3, 8004b76 <_svfiprintf_r+0x1b2>
 8004b2e:	9b03      	ldr	r3, [sp, #12]
 8004b30:	3307      	adds	r3, #7
 8004b32:	f023 0307 	bic.w	r3, r3, #7
 8004b36:	3308      	adds	r3, #8
 8004b38:	9303      	str	r3, [sp, #12]
 8004b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3c:	4433      	add	r3, r6
 8004b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b40:	e767      	b.n	8004a12 <_svfiprintf_r+0x4e>
 8004b42:	460c      	mov	r4, r1
 8004b44:	2001      	movs	r0, #1
 8004b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b4a:	e7a5      	b.n	8004a98 <_svfiprintf_r+0xd4>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f04f 0c0a 	mov.w	ip, #10
 8004b52:	4619      	mov	r1, r3
 8004b54:	3401      	adds	r4, #1
 8004b56:	9305      	str	r3, [sp, #20]
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b5e:	3a30      	subs	r2, #48	; 0x30
 8004b60:	2a09      	cmp	r2, #9
 8004b62:	d903      	bls.n	8004b6c <_svfiprintf_r+0x1a8>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0c5      	beq.n	8004af4 <_svfiprintf_r+0x130>
 8004b68:	9105      	str	r1, [sp, #20]
 8004b6a:	e7c3      	b.n	8004af4 <_svfiprintf_r+0x130>
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	2301      	movs	r3, #1
 8004b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b74:	e7f0      	b.n	8004b58 <_svfiprintf_r+0x194>
 8004b76:	ab03      	add	r3, sp, #12
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	462a      	mov	r2, r5
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <_svfiprintf_r+0x1f8>)
 8004b80:	a904      	add	r1, sp, #16
 8004b82:	f3af 8000 	nop.w
 8004b86:	1c42      	adds	r2, r0, #1
 8004b88:	4606      	mov	r6, r0
 8004b8a:	d1d6      	bne.n	8004b3a <_svfiprintf_r+0x176>
 8004b8c:	89ab      	ldrh	r3, [r5, #12]
 8004b8e:	065b      	lsls	r3, r3, #25
 8004b90:	f53f af2c 	bmi.w	80049ec <_svfiprintf_r+0x28>
 8004b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b96:	b01d      	add	sp, #116	; 0x74
 8004b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b9c:	ab03      	add	r3, sp, #12
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	462a      	mov	r2, r5
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <_svfiprintf_r+0x1f8>)
 8004ba6:	a904      	add	r1, sp, #16
 8004ba8:	f000 fa50 	bl	800504c <_printf_i>
 8004bac:	e7eb      	b.n	8004b86 <_svfiprintf_r+0x1c2>
 8004bae:	bf00      	nop
 8004bb0:	08005cd0 	.word	0x08005cd0
 8004bb4:	08005cda 	.word	0x08005cda
 8004bb8:	00000000 	.word	0x00000000
 8004bbc:	0800490d 	.word	0x0800490d
 8004bc0:	08005cd6 	.word	0x08005cd6

08004bc4 <_sungetc_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	1c4b      	adds	r3, r1, #1
 8004bc8:	4614      	mov	r4, r2
 8004bca:	d103      	bne.n	8004bd4 <_sungetc_r+0x10>
 8004bcc:	f04f 35ff 	mov.w	r5, #4294967295
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
 8004bd4:	8993      	ldrh	r3, [r2, #12]
 8004bd6:	b2cd      	uxtb	r5, r1
 8004bd8:	f023 0320 	bic.w	r3, r3, #32
 8004bdc:	8193      	strh	r3, [r2, #12]
 8004bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004be0:	6852      	ldr	r2, [r2, #4]
 8004be2:	b18b      	cbz	r3, 8004c08 <_sungetc_r+0x44>
 8004be4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004be6:	4293      	cmp	r3, r2
 8004be8:	dd08      	ble.n	8004bfc <_sungetc_r+0x38>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	1e5a      	subs	r2, r3, #1
 8004bee:	6022      	str	r2, [r4, #0]
 8004bf0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004bf4:	6863      	ldr	r3, [r4, #4]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	6063      	str	r3, [r4, #4]
 8004bfa:	e7e9      	b.n	8004bd0 <_sungetc_r+0xc>
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	f000 fdd5 	bl	80057ac <__submore>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d0f1      	beq.n	8004bea <_sungetc_r+0x26>
 8004c06:	e7e1      	b.n	8004bcc <_sungetc_r+0x8>
 8004c08:	6921      	ldr	r1, [r4, #16]
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	b151      	cbz	r1, 8004c24 <_sungetc_r+0x60>
 8004c0e:	4299      	cmp	r1, r3
 8004c10:	d208      	bcs.n	8004c24 <_sungetc_r+0x60>
 8004c12:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004c16:	42a9      	cmp	r1, r5
 8004c18:	d104      	bne.n	8004c24 <_sungetc_r+0x60>
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	3201      	adds	r2, #1
 8004c1e:	6023      	str	r3, [r4, #0]
 8004c20:	6062      	str	r2, [r4, #4]
 8004c22:	e7d5      	b.n	8004bd0 <_sungetc_r+0xc>
 8004c24:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c2c:	6363      	str	r3, [r4, #52]	; 0x34
 8004c2e:	2303      	movs	r3, #3
 8004c30:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c32:	4623      	mov	r3, r4
 8004c34:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e7dc      	b.n	8004bf8 <_sungetc_r+0x34>

08004c3e <__ssrefill_r>:
 8004c3e:	b510      	push	{r4, lr}
 8004c40:	460c      	mov	r4, r1
 8004c42:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004c44:	b169      	cbz	r1, 8004c62 <__ssrefill_r+0x24>
 8004c46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c4a:	4299      	cmp	r1, r3
 8004c4c:	d001      	beq.n	8004c52 <__ssrefill_r+0x14>
 8004c4e:	f000 fe1d 	bl	800588c <_free_r>
 8004c52:	2000      	movs	r0, #0
 8004c54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c56:	6360      	str	r0, [r4, #52]	; 0x34
 8004c58:	6063      	str	r3, [r4, #4]
 8004c5a:	b113      	cbz	r3, 8004c62 <__ssrefill_r+0x24>
 8004c5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c5e:	6023      	str	r3, [r4, #0]
 8004c60:	bd10      	pop	{r4, pc}
 8004c62:	6923      	ldr	r3, [r4, #16]
 8004c64:	f04f 30ff 	mov.w	r0, #4294967295
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	6063      	str	r3, [r4, #4]
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	f043 0320 	orr.w	r3, r3, #32
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	e7f3      	b.n	8004c60 <__ssrefill_r+0x22>

08004c78 <__ssvfiscanf_r>:
 8004c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4606      	mov	r6, r0
 8004c82:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004c86:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004c8a:	49b3      	ldr	r1, [pc, #716]	; (8004f58 <__ssvfiscanf_r+0x2e0>)
 8004c8c:	f10d 0804 	add.w	r8, sp, #4
 8004c90:	91a0      	str	r1, [sp, #640]	; 0x280
 8004c92:	49b2      	ldr	r1, [pc, #712]	; (8004f5c <__ssvfiscanf_r+0x2e4>)
 8004c94:	4fb2      	ldr	r7, [pc, #712]	; (8004f60 <__ssvfiscanf_r+0x2e8>)
 8004c96:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8004f64 <__ssvfiscanf_r+0x2ec>
 8004c9a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004c9e:	91a1      	str	r1, [sp, #644]	; 0x284
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	f892 a000 	ldrb.w	sl, [r2]
 8004ca6:	f1ba 0f00 	cmp.w	sl, #0
 8004caa:	f000 8153 	beq.w	8004f54 <__ssvfiscanf_r+0x2dc>
 8004cae:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8004cb2:	1c55      	adds	r5, r2, #1
 8004cb4:	f013 0308 	ands.w	r3, r3, #8
 8004cb8:	d019      	beq.n	8004cee <__ssvfiscanf_r+0x76>
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	dd0f      	ble.n	8004ce0 <__ssvfiscanf_r+0x68>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	781a      	ldrb	r2, [r3, #0]
 8004cc4:	5cba      	ldrb	r2, [r7, r2]
 8004cc6:	0712      	lsls	r2, r2, #28
 8004cc8:	d401      	bmi.n	8004cce <__ssvfiscanf_r+0x56>
 8004cca:	462a      	mov	r2, r5
 8004ccc:	e7e9      	b.n	8004ca2 <__ssvfiscanf_r+0x2a>
 8004cce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	3201      	adds	r2, #1
 8004cd4:	9245      	str	r2, [sp, #276]	; 0x114
 8004cd6:	6862      	ldr	r2, [r4, #4]
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	3a01      	subs	r2, #1
 8004cdc:	6062      	str	r2, [r4, #4]
 8004cde:	e7ec      	b.n	8004cba <__ssvfiscanf_r+0x42>
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004ce6:	4798      	blx	r3
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d0e9      	beq.n	8004cc0 <__ssvfiscanf_r+0x48>
 8004cec:	e7ed      	b.n	8004cca <__ssvfiscanf_r+0x52>
 8004cee:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8004cf2:	f040 8086 	bne.w	8004e02 <__ssvfiscanf_r+0x18a>
 8004cf6:	9341      	str	r3, [sp, #260]	; 0x104
 8004cf8:	9343      	str	r3, [sp, #268]	; 0x10c
 8004cfa:	7853      	ldrb	r3, [r2, #1]
 8004cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8004cfe:	bf04      	itt	eq
 8004d00:	2310      	moveq	r3, #16
 8004d02:	1c95      	addeq	r5, r2, #2
 8004d04:	f04f 020a 	mov.w	r2, #10
 8004d08:	bf08      	it	eq
 8004d0a:	9341      	streq	r3, [sp, #260]	; 0x104
 8004d0c:	46ab      	mov	fp, r5
 8004d0e:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8004d12:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004d16:	2b09      	cmp	r3, #9
 8004d18:	d91d      	bls.n	8004d56 <__ssvfiscanf_r+0xde>
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	4891      	ldr	r0, [pc, #580]	; (8004f64 <__ssvfiscanf_r+0x2ec>)
 8004d1e:	f000 fd7f 	bl	8005820 <memchr>
 8004d22:	b140      	cbz	r0, 8004d36 <__ssvfiscanf_r+0xbe>
 8004d24:	2301      	movs	r3, #1
 8004d26:	465d      	mov	r5, fp
 8004d28:	eba0 0009 	sub.w	r0, r0, r9
 8004d2c:	fa03 f000 	lsl.w	r0, r3, r0
 8004d30:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004d32:	4318      	orrs	r0, r3
 8004d34:	9041      	str	r0, [sp, #260]	; 0x104
 8004d36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d3a:	2b78      	cmp	r3, #120	; 0x78
 8004d3c:	d806      	bhi.n	8004d4c <__ssvfiscanf_r+0xd4>
 8004d3e:	2b57      	cmp	r3, #87	; 0x57
 8004d40:	d810      	bhi.n	8004d64 <__ssvfiscanf_r+0xec>
 8004d42:	2b25      	cmp	r3, #37	; 0x25
 8004d44:	d05d      	beq.n	8004e02 <__ssvfiscanf_r+0x18a>
 8004d46:	d857      	bhi.n	8004df8 <__ssvfiscanf_r+0x180>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d075      	beq.n	8004e38 <__ssvfiscanf_r+0x1c0>
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004d50:	230a      	movs	r3, #10
 8004d52:	9342      	str	r3, [sp, #264]	; 0x108
 8004d54:	e082      	b.n	8004e5c <__ssvfiscanf_r+0x1e4>
 8004d56:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004d58:	465d      	mov	r5, fp
 8004d5a:	fb02 1303 	mla	r3, r2, r3, r1
 8004d5e:	3b30      	subs	r3, #48	; 0x30
 8004d60:	9343      	str	r3, [sp, #268]	; 0x10c
 8004d62:	e7d3      	b.n	8004d0c <__ssvfiscanf_r+0x94>
 8004d64:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004d68:	2a20      	cmp	r2, #32
 8004d6a:	d8ef      	bhi.n	8004d4c <__ssvfiscanf_r+0xd4>
 8004d6c:	a101      	add	r1, pc, #4	; (adr r1, 8004d74 <__ssvfiscanf_r+0xfc>)
 8004d6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004d72:	bf00      	nop
 8004d74:	08004e47 	.word	0x08004e47
 8004d78:	08004d4d 	.word	0x08004d4d
 8004d7c:	08004d4d 	.word	0x08004d4d
 8004d80:	08004ea5 	.word	0x08004ea5
 8004d84:	08004d4d 	.word	0x08004d4d
 8004d88:	08004d4d 	.word	0x08004d4d
 8004d8c:	08004d4d 	.word	0x08004d4d
 8004d90:	08004d4d 	.word	0x08004d4d
 8004d94:	08004d4d 	.word	0x08004d4d
 8004d98:	08004d4d 	.word	0x08004d4d
 8004d9c:	08004d4d 	.word	0x08004d4d
 8004da0:	08004ebb 	.word	0x08004ebb
 8004da4:	08004e91 	.word	0x08004e91
 8004da8:	08004dff 	.word	0x08004dff
 8004dac:	08004dff 	.word	0x08004dff
 8004db0:	08004dff 	.word	0x08004dff
 8004db4:	08004d4d 	.word	0x08004d4d
 8004db8:	08004e95 	.word	0x08004e95
 8004dbc:	08004d4d 	.word	0x08004d4d
 8004dc0:	08004d4d 	.word	0x08004d4d
 8004dc4:	08004d4d 	.word	0x08004d4d
 8004dc8:	08004d4d 	.word	0x08004d4d
 8004dcc:	08004ecb 	.word	0x08004ecb
 8004dd0:	08004e9d 	.word	0x08004e9d
 8004dd4:	08004e3f 	.word	0x08004e3f
 8004dd8:	08004d4d 	.word	0x08004d4d
 8004ddc:	08004d4d 	.word	0x08004d4d
 8004de0:	08004ec7 	.word	0x08004ec7
 8004de4:	08004d4d 	.word	0x08004d4d
 8004de8:	08004e91 	.word	0x08004e91
 8004dec:	08004d4d 	.word	0x08004d4d
 8004df0:	08004d4d 	.word	0x08004d4d
 8004df4:	08004e47 	.word	0x08004e47
 8004df8:	3b45      	subs	r3, #69	; 0x45
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d8a6      	bhi.n	8004d4c <__ssvfiscanf_r+0xd4>
 8004dfe:	2305      	movs	r3, #5
 8004e00:	e02b      	b.n	8004e5a <__ssvfiscanf_r+0x1e2>
 8004e02:	6863      	ldr	r3, [r4, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	dd0d      	ble.n	8004e24 <__ssvfiscanf_r+0x1ac>
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	781a      	ldrb	r2, [r3, #0]
 8004e0c:	4552      	cmp	r2, sl
 8004e0e:	f040 80a1 	bne.w	8004f54 <__ssvfiscanf_r+0x2dc>
 8004e12:	3301      	adds	r3, #1
 8004e14:	6862      	ldr	r2, [r4, #4]
 8004e16:	6023      	str	r3, [r4, #0]
 8004e18:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004e1a:	3a01      	subs	r2, #1
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	6062      	str	r2, [r4, #4]
 8004e20:	9345      	str	r3, [sp, #276]	; 0x114
 8004e22:	e752      	b.n	8004cca <__ssvfiscanf_r+0x52>
 8004e24:	4621      	mov	r1, r4
 8004e26:	4630      	mov	r0, r6
 8004e28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e2a:	4798      	blx	r3
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d0eb      	beq.n	8004e08 <__ssvfiscanf_r+0x190>
 8004e30:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004e32:	2800      	cmp	r0, #0
 8004e34:	f040 8084 	bne.w	8004f40 <__ssvfiscanf_r+0x2c8>
 8004e38:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3c:	e086      	b.n	8004f4c <__ssvfiscanf_r+0x2d4>
 8004e3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004e40:	f042 0220 	orr.w	r2, r2, #32
 8004e44:	9241      	str	r2, [sp, #260]	; 0x104
 8004e46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4c:	9241      	str	r2, [sp, #260]	; 0x104
 8004e4e:	2210      	movs	r2, #16
 8004e50:	2b6f      	cmp	r3, #111	; 0x6f
 8004e52:	bf34      	ite	cc
 8004e54:	2303      	movcc	r3, #3
 8004e56:	2304      	movcs	r3, #4
 8004e58:	9242      	str	r2, [sp, #264]	; 0x108
 8004e5a:	9347      	str	r3, [sp, #284]	; 0x11c
 8004e5c:	6863      	ldr	r3, [r4, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	dd41      	ble.n	8004ee6 <__ssvfiscanf_r+0x26e>
 8004e62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004e64:	0659      	lsls	r1, r3, #25
 8004e66:	d404      	bmi.n	8004e72 <__ssvfiscanf_r+0x1fa>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	781a      	ldrb	r2, [r3, #0]
 8004e6c:	5cba      	ldrb	r2, [r7, r2]
 8004e6e:	0712      	lsls	r2, r2, #28
 8004e70:	d440      	bmi.n	8004ef4 <__ssvfiscanf_r+0x27c>
 8004e72:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	dc4f      	bgt.n	8004f18 <__ssvfiscanf_r+0x2a0>
 8004e78:	466b      	mov	r3, sp
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	a941      	add	r1, sp, #260	; 0x104
 8004e80:	f000 fa0a 	bl	8005298 <_scanf_chars>
 8004e84:	2801      	cmp	r0, #1
 8004e86:	d065      	beq.n	8004f54 <__ssvfiscanf_r+0x2dc>
 8004e88:	2802      	cmp	r0, #2
 8004e8a:	f47f af1e 	bne.w	8004cca <__ssvfiscanf_r+0x52>
 8004e8e:	e7cf      	b.n	8004e30 <__ssvfiscanf_r+0x1b8>
 8004e90:	220a      	movs	r2, #10
 8004e92:	e7dd      	b.n	8004e50 <__ssvfiscanf_r+0x1d8>
 8004e94:	2300      	movs	r3, #0
 8004e96:	9342      	str	r3, [sp, #264]	; 0x108
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e7de      	b.n	8004e5a <__ssvfiscanf_r+0x1e2>
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	9342      	str	r3, [sp, #264]	; 0x108
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	e7da      	b.n	8004e5a <__ssvfiscanf_r+0x1e2>
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	f000 fb40 	bl	800552c <__sccl>
 8004eac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004eae:	4605      	mov	r5, r0
 8004eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eb4:	9341      	str	r3, [sp, #260]	; 0x104
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e7cf      	b.n	8004e5a <__ssvfiscanf_r+0x1e2>
 8004eba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ec0:	9341      	str	r3, [sp, #260]	; 0x104
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e7c9      	b.n	8004e5a <__ssvfiscanf_r+0x1e2>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e7c7      	b.n	8004e5a <__ssvfiscanf_r+0x1e2>
 8004eca:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004ecc:	06c3      	lsls	r3, r0, #27
 8004ece:	f53f aefc 	bmi.w	8004cca <__ssvfiscanf_r+0x52>
 8004ed2:	9b00      	ldr	r3, [sp, #0]
 8004ed4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004ed6:	1d19      	adds	r1, r3, #4
 8004ed8:	9100      	str	r1, [sp, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	07c0      	lsls	r0, r0, #31
 8004ede:	bf4c      	ite	mi
 8004ee0:	801a      	strhmi	r2, [r3, #0]
 8004ee2:	601a      	strpl	r2, [r3, #0]
 8004ee4:	e6f1      	b.n	8004cca <__ssvfiscanf_r+0x52>
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	4630      	mov	r0, r6
 8004eea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004eec:	4798      	blx	r3
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d0b7      	beq.n	8004e62 <__ssvfiscanf_r+0x1ea>
 8004ef2:	e79d      	b.n	8004e30 <__ssvfiscanf_r+0x1b8>
 8004ef4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004ef6:	3201      	adds	r2, #1
 8004ef8:	9245      	str	r2, [sp, #276]	; 0x114
 8004efa:	6862      	ldr	r2, [r4, #4]
 8004efc:	3a01      	subs	r2, #1
 8004efe:	2a00      	cmp	r2, #0
 8004f00:	6062      	str	r2, [r4, #4]
 8004f02:	dd02      	ble.n	8004f0a <__ssvfiscanf_r+0x292>
 8004f04:	3301      	adds	r3, #1
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	e7ae      	b.n	8004e68 <__ssvfiscanf_r+0x1f0>
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004f10:	4798      	blx	r3
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d0a8      	beq.n	8004e68 <__ssvfiscanf_r+0x1f0>
 8004f16:	e78b      	b.n	8004e30 <__ssvfiscanf_r+0x1b8>
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	dc06      	bgt.n	8004f2a <__ssvfiscanf_r+0x2b2>
 8004f1c:	466b      	mov	r3, sp
 8004f1e:	4622      	mov	r2, r4
 8004f20:	4630      	mov	r0, r6
 8004f22:	a941      	add	r1, sp, #260	; 0x104
 8004f24:	f000 fa10 	bl	8005348 <_scanf_i>
 8004f28:	e7ac      	b.n	8004e84 <__ssvfiscanf_r+0x20c>
 8004f2a:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <__ssvfiscanf_r+0x2f0>)
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f43f aecc 	beq.w	8004cca <__ssvfiscanf_r+0x52>
 8004f32:	466b      	mov	r3, sp
 8004f34:	4622      	mov	r2, r4
 8004f36:	4630      	mov	r0, r6
 8004f38:	a941      	add	r1, sp, #260	; 0x104
 8004f3a:	f3af 8000 	nop.w
 8004f3e:	e7a1      	b.n	8004e84 <__ssvfiscanf_r+0x20c>
 8004f40:	89a3      	ldrh	r3, [r4, #12]
 8004f42:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f46:	bf18      	it	ne
 8004f48:	f04f 30ff 	movne.w	r0, #4294967295
 8004f4c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f54:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004f56:	e7f9      	b.n	8004f4c <__ssvfiscanf_r+0x2d4>
 8004f58:	08004bc5 	.word	0x08004bc5
 8004f5c:	08004c3f 	.word	0x08004c3f
 8004f60:	08005d1f 	.word	0x08005d1f
 8004f64:	08005cd6 	.word	0x08005cd6
 8004f68:	00000000 	.word	0x00000000

08004f6c <_printf_common>:
 8004f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f70:	4616      	mov	r6, r2
 8004f72:	4699      	mov	r9, r3
 8004f74:	688a      	ldr	r2, [r1, #8]
 8004f76:	690b      	ldr	r3, [r1, #16]
 8004f78:	4607      	mov	r7, r0
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	bfb8      	it	lt
 8004f7e:	4613      	movlt	r3, r2
 8004f80:	6033      	str	r3, [r6, #0]
 8004f82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f86:	460c      	mov	r4, r1
 8004f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f8c:	b10a      	cbz	r2, 8004f92 <_printf_common+0x26>
 8004f8e:	3301      	adds	r3, #1
 8004f90:	6033      	str	r3, [r6, #0]
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	0699      	lsls	r1, r3, #26
 8004f96:	bf42      	ittt	mi
 8004f98:	6833      	ldrmi	r3, [r6, #0]
 8004f9a:	3302      	addmi	r3, #2
 8004f9c:	6033      	strmi	r3, [r6, #0]
 8004f9e:	6825      	ldr	r5, [r4, #0]
 8004fa0:	f015 0506 	ands.w	r5, r5, #6
 8004fa4:	d106      	bne.n	8004fb4 <_printf_common+0x48>
 8004fa6:	f104 0a19 	add.w	sl, r4, #25
 8004faa:	68e3      	ldr	r3, [r4, #12]
 8004fac:	6832      	ldr	r2, [r6, #0]
 8004fae:	1a9b      	subs	r3, r3, r2
 8004fb0:	42ab      	cmp	r3, r5
 8004fb2:	dc28      	bgt.n	8005006 <_printf_common+0x9a>
 8004fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fb8:	1e13      	subs	r3, r2, #0
 8004fba:	6822      	ldr	r2, [r4, #0]
 8004fbc:	bf18      	it	ne
 8004fbe:	2301      	movne	r3, #1
 8004fc0:	0692      	lsls	r2, r2, #26
 8004fc2:	d42d      	bmi.n	8005020 <_printf_common+0xb4>
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fcc:	47c0      	blx	r8
 8004fce:	3001      	adds	r0, #1
 8004fd0:	d020      	beq.n	8005014 <_printf_common+0xa8>
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	68e5      	ldr	r5, [r4, #12]
 8004fd6:	f003 0306 	and.w	r3, r3, #6
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	bf18      	it	ne
 8004fde:	2500      	movne	r5, #0
 8004fe0:	6832      	ldr	r2, [r6, #0]
 8004fe2:	f04f 0600 	mov.w	r6, #0
 8004fe6:	68a3      	ldr	r3, [r4, #8]
 8004fe8:	bf08      	it	eq
 8004fea:	1aad      	subeq	r5, r5, r2
 8004fec:	6922      	ldr	r2, [r4, #16]
 8004fee:	bf08      	it	eq
 8004ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	bfc4      	itt	gt
 8004ff8:	1a9b      	subgt	r3, r3, r2
 8004ffa:	18ed      	addgt	r5, r5, r3
 8004ffc:	341a      	adds	r4, #26
 8004ffe:	42b5      	cmp	r5, r6
 8005000:	d11a      	bne.n	8005038 <_printf_common+0xcc>
 8005002:	2000      	movs	r0, #0
 8005004:	e008      	b.n	8005018 <_printf_common+0xac>
 8005006:	2301      	movs	r3, #1
 8005008:	4652      	mov	r2, sl
 800500a:	4649      	mov	r1, r9
 800500c:	4638      	mov	r0, r7
 800500e:	47c0      	blx	r8
 8005010:	3001      	adds	r0, #1
 8005012:	d103      	bne.n	800501c <_printf_common+0xb0>
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501c:	3501      	adds	r5, #1
 800501e:	e7c4      	b.n	8004faa <_printf_common+0x3e>
 8005020:	2030      	movs	r0, #48	; 0x30
 8005022:	18e1      	adds	r1, r4, r3
 8005024:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800502e:	4422      	add	r2, r4
 8005030:	3302      	adds	r3, #2
 8005032:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005036:	e7c5      	b.n	8004fc4 <_printf_common+0x58>
 8005038:	2301      	movs	r3, #1
 800503a:	4622      	mov	r2, r4
 800503c:	4649      	mov	r1, r9
 800503e:	4638      	mov	r0, r7
 8005040:	47c0      	blx	r8
 8005042:	3001      	adds	r0, #1
 8005044:	d0e6      	beq.n	8005014 <_printf_common+0xa8>
 8005046:	3601      	adds	r6, #1
 8005048:	e7d9      	b.n	8004ffe <_printf_common+0x92>
	...

0800504c <_printf_i>:
 800504c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005050:	460c      	mov	r4, r1
 8005052:	7e27      	ldrb	r7, [r4, #24]
 8005054:	4691      	mov	r9, r2
 8005056:	2f78      	cmp	r7, #120	; 0x78
 8005058:	4680      	mov	r8, r0
 800505a:	469a      	mov	sl, r3
 800505c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800505e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005062:	d807      	bhi.n	8005074 <_printf_i+0x28>
 8005064:	2f62      	cmp	r7, #98	; 0x62
 8005066:	d80a      	bhi.n	800507e <_printf_i+0x32>
 8005068:	2f00      	cmp	r7, #0
 800506a:	f000 80d9 	beq.w	8005220 <_printf_i+0x1d4>
 800506e:	2f58      	cmp	r7, #88	; 0x58
 8005070:	f000 80a4 	beq.w	80051bc <_printf_i+0x170>
 8005074:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800507c:	e03a      	b.n	80050f4 <_printf_i+0xa8>
 800507e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005082:	2b15      	cmp	r3, #21
 8005084:	d8f6      	bhi.n	8005074 <_printf_i+0x28>
 8005086:	a001      	add	r0, pc, #4	; (adr r0, 800508c <_printf_i+0x40>)
 8005088:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800508c:	080050e5 	.word	0x080050e5
 8005090:	080050f9 	.word	0x080050f9
 8005094:	08005075 	.word	0x08005075
 8005098:	08005075 	.word	0x08005075
 800509c:	08005075 	.word	0x08005075
 80050a0:	08005075 	.word	0x08005075
 80050a4:	080050f9 	.word	0x080050f9
 80050a8:	08005075 	.word	0x08005075
 80050ac:	08005075 	.word	0x08005075
 80050b0:	08005075 	.word	0x08005075
 80050b4:	08005075 	.word	0x08005075
 80050b8:	08005207 	.word	0x08005207
 80050bc:	08005129 	.word	0x08005129
 80050c0:	080051e9 	.word	0x080051e9
 80050c4:	08005075 	.word	0x08005075
 80050c8:	08005075 	.word	0x08005075
 80050cc:	08005229 	.word	0x08005229
 80050d0:	08005075 	.word	0x08005075
 80050d4:	08005129 	.word	0x08005129
 80050d8:	08005075 	.word	0x08005075
 80050dc:	08005075 	.word	0x08005075
 80050e0:	080051f1 	.word	0x080051f1
 80050e4:	680b      	ldr	r3, [r1, #0]
 80050e6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050ea:	1d1a      	adds	r2, r3, #4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	600a      	str	r2, [r1, #0]
 80050f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050f4:	2301      	movs	r3, #1
 80050f6:	e0a4      	b.n	8005242 <_printf_i+0x1f6>
 80050f8:	6825      	ldr	r5, [r4, #0]
 80050fa:	6808      	ldr	r0, [r1, #0]
 80050fc:	062e      	lsls	r6, r5, #24
 80050fe:	f100 0304 	add.w	r3, r0, #4
 8005102:	d50a      	bpl.n	800511a <_printf_i+0xce>
 8005104:	6805      	ldr	r5, [r0, #0]
 8005106:	600b      	str	r3, [r1, #0]
 8005108:	2d00      	cmp	r5, #0
 800510a:	da03      	bge.n	8005114 <_printf_i+0xc8>
 800510c:	232d      	movs	r3, #45	; 0x2d
 800510e:	426d      	negs	r5, r5
 8005110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005114:	230a      	movs	r3, #10
 8005116:	485e      	ldr	r0, [pc, #376]	; (8005290 <_printf_i+0x244>)
 8005118:	e019      	b.n	800514e <_printf_i+0x102>
 800511a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800511e:	6805      	ldr	r5, [r0, #0]
 8005120:	600b      	str	r3, [r1, #0]
 8005122:	bf18      	it	ne
 8005124:	b22d      	sxthne	r5, r5
 8005126:	e7ef      	b.n	8005108 <_printf_i+0xbc>
 8005128:	680b      	ldr	r3, [r1, #0]
 800512a:	6825      	ldr	r5, [r4, #0]
 800512c:	1d18      	adds	r0, r3, #4
 800512e:	6008      	str	r0, [r1, #0]
 8005130:	0628      	lsls	r0, r5, #24
 8005132:	d501      	bpl.n	8005138 <_printf_i+0xec>
 8005134:	681d      	ldr	r5, [r3, #0]
 8005136:	e002      	b.n	800513e <_printf_i+0xf2>
 8005138:	0669      	lsls	r1, r5, #25
 800513a:	d5fb      	bpl.n	8005134 <_printf_i+0xe8>
 800513c:	881d      	ldrh	r5, [r3, #0]
 800513e:	2f6f      	cmp	r7, #111	; 0x6f
 8005140:	bf0c      	ite	eq
 8005142:	2308      	moveq	r3, #8
 8005144:	230a      	movne	r3, #10
 8005146:	4852      	ldr	r0, [pc, #328]	; (8005290 <_printf_i+0x244>)
 8005148:	2100      	movs	r1, #0
 800514a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800514e:	6866      	ldr	r6, [r4, #4]
 8005150:	2e00      	cmp	r6, #0
 8005152:	bfa8      	it	ge
 8005154:	6821      	ldrge	r1, [r4, #0]
 8005156:	60a6      	str	r6, [r4, #8]
 8005158:	bfa4      	itt	ge
 800515a:	f021 0104 	bicge.w	r1, r1, #4
 800515e:	6021      	strge	r1, [r4, #0]
 8005160:	b90d      	cbnz	r5, 8005166 <_printf_i+0x11a>
 8005162:	2e00      	cmp	r6, #0
 8005164:	d04d      	beq.n	8005202 <_printf_i+0x1b6>
 8005166:	4616      	mov	r6, r2
 8005168:	fbb5 f1f3 	udiv	r1, r5, r3
 800516c:	fb03 5711 	mls	r7, r3, r1, r5
 8005170:	5dc7      	ldrb	r7, [r0, r7]
 8005172:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005176:	462f      	mov	r7, r5
 8005178:	42bb      	cmp	r3, r7
 800517a:	460d      	mov	r5, r1
 800517c:	d9f4      	bls.n	8005168 <_printf_i+0x11c>
 800517e:	2b08      	cmp	r3, #8
 8005180:	d10b      	bne.n	800519a <_printf_i+0x14e>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	07df      	lsls	r7, r3, #31
 8005186:	d508      	bpl.n	800519a <_printf_i+0x14e>
 8005188:	6923      	ldr	r3, [r4, #16]
 800518a:	6861      	ldr	r1, [r4, #4]
 800518c:	4299      	cmp	r1, r3
 800518e:	bfde      	ittt	le
 8005190:	2330      	movle	r3, #48	; 0x30
 8005192:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005196:	f106 36ff 	addle.w	r6, r6, #4294967295
 800519a:	1b92      	subs	r2, r2, r6
 800519c:	6122      	str	r2, [r4, #16]
 800519e:	464b      	mov	r3, r9
 80051a0:	4621      	mov	r1, r4
 80051a2:	4640      	mov	r0, r8
 80051a4:	f8cd a000 	str.w	sl, [sp]
 80051a8:	aa03      	add	r2, sp, #12
 80051aa:	f7ff fedf 	bl	8004f6c <_printf_common>
 80051ae:	3001      	adds	r0, #1
 80051b0:	d14c      	bne.n	800524c <_printf_i+0x200>
 80051b2:	f04f 30ff 	mov.w	r0, #4294967295
 80051b6:	b004      	add	sp, #16
 80051b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051bc:	4834      	ldr	r0, [pc, #208]	; (8005290 <_printf_i+0x244>)
 80051be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051c2:	680e      	ldr	r6, [r1, #0]
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80051ca:	061f      	lsls	r7, r3, #24
 80051cc:	600e      	str	r6, [r1, #0]
 80051ce:	d514      	bpl.n	80051fa <_printf_i+0x1ae>
 80051d0:	07d9      	lsls	r1, r3, #31
 80051d2:	bf44      	itt	mi
 80051d4:	f043 0320 	orrmi.w	r3, r3, #32
 80051d8:	6023      	strmi	r3, [r4, #0]
 80051da:	b91d      	cbnz	r5, 80051e4 <_printf_i+0x198>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	f023 0320 	bic.w	r3, r3, #32
 80051e2:	6023      	str	r3, [r4, #0]
 80051e4:	2310      	movs	r3, #16
 80051e6:	e7af      	b.n	8005148 <_printf_i+0xfc>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	f043 0320 	orr.w	r3, r3, #32
 80051ee:	6023      	str	r3, [r4, #0]
 80051f0:	2378      	movs	r3, #120	; 0x78
 80051f2:	4828      	ldr	r0, [pc, #160]	; (8005294 <_printf_i+0x248>)
 80051f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051f8:	e7e3      	b.n	80051c2 <_printf_i+0x176>
 80051fa:	065e      	lsls	r6, r3, #25
 80051fc:	bf48      	it	mi
 80051fe:	b2ad      	uxthmi	r5, r5
 8005200:	e7e6      	b.n	80051d0 <_printf_i+0x184>
 8005202:	4616      	mov	r6, r2
 8005204:	e7bb      	b.n	800517e <_printf_i+0x132>
 8005206:	680b      	ldr	r3, [r1, #0]
 8005208:	6826      	ldr	r6, [r4, #0]
 800520a:	1d1d      	adds	r5, r3, #4
 800520c:	6960      	ldr	r0, [r4, #20]
 800520e:	600d      	str	r5, [r1, #0]
 8005210:	0635      	lsls	r5, r6, #24
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	d501      	bpl.n	800521a <_printf_i+0x1ce>
 8005216:	6018      	str	r0, [r3, #0]
 8005218:	e002      	b.n	8005220 <_printf_i+0x1d4>
 800521a:	0671      	lsls	r1, r6, #25
 800521c:	d5fb      	bpl.n	8005216 <_printf_i+0x1ca>
 800521e:	8018      	strh	r0, [r3, #0]
 8005220:	2300      	movs	r3, #0
 8005222:	4616      	mov	r6, r2
 8005224:	6123      	str	r3, [r4, #16]
 8005226:	e7ba      	b.n	800519e <_printf_i+0x152>
 8005228:	680b      	ldr	r3, [r1, #0]
 800522a:	1d1a      	adds	r2, r3, #4
 800522c:	600a      	str	r2, [r1, #0]
 800522e:	681e      	ldr	r6, [r3, #0]
 8005230:	2100      	movs	r1, #0
 8005232:	4630      	mov	r0, r6
 8005234:	6862      	ldr	r2, [r4, #4]
 8005236:	f000 faf3 	bl	8005820 <memchr>
 800523a:	b108      	cbz	r0, 8005240 <_printf_i+0x1f4>
 800523c:	1b80      	subs	r0, r0, r6
 800523e:	6060      	str	r0, [r4, #4]
 8005240:	6863      	ldr	r3, [r4, #4]
 8005242:	6123      	str	r3, [r4, #16]
 8005244:	2300      	movs	r3, #0
 8005246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800524a:	e7a8      	b.n	800519e <_printf_i+0x152>
 800524c:	4632      	mov	r2, r6
 800524e:	4649      	mov	r1, r9
 8005250:	4640      	mov	r0, r8
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	47d0      	blx	sl
 8005256:	3001      	adds	r0, #1
 8005258:	d0ab      	beq.n	80051b2 <_printf_i+0x166>
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	079b      	lsls	r3, r3, #30
 800525e:	d413      	bmi.n	8005288 <_printf_i+0x23c>
 8005260:	68e0      	ldr	r0, [r4, #12]
 8005262:	9b03      	ldr	r3, [sp, #12]
 8005264:	4298      	cmp	r0, r3
 8005266:	bfb8      	it	lt
 8005268:	4618      	movlt	r0, r3
 800526a:	e7a4      	b.n	80051b6 <_printf_i+0x16a>
 800526c:	2301      	movs	r3, #1
 800526e:	4632      	mov	r2, r6
 8005270:	4649      	mov	r1, r9
 8005272:	4640      	mov	r0, r8
 8005274:	47d0      	blx	sl
 8005276:	3001      	adds	r0, #1
 8005278:	d09b      	beq.n	80051b2 <_printf_i+0x166>
 800527a:	3501      	adds	r5, #1
 800527c:	68e3      	ldr	r3, [r4, #12]
 800527e:	9903      	ldr	r1, [sp, #12]
 8005280:	1a5b      	subs	r3, r3, r1
 8005282:	42ab      	cmp	r3, r5
 8005284:	dcf2      	bgt.n	800526c <_printf_i+0x220>
 8005286:	e7eb      	b.n	8005260 <_printf_i+0x214>
 8005288:	2500      	movs	r5, #0
 800528a:	f104 0619 	add.w	r6, r4, #25
 800528e:	e7f5      	b.n	800527c <_printf_i+0x230>
 8005290:	08005ce1 	.word	0x08005ce1
 8005294:	08005cf2 	.word	0x08005cf2

08005298 <_scanf_chars>:
 8005298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800529c:	4615      	mov	r5, r2
 800529e:	688a      	ldr	r2, [r1, #8]
 80052a0:	4680      	mov	r8, r0
 80052a2:	460c      	mov	r4, r1
 80052a4:	b932      	cbnz	r2, 80052b4 <_scanf_chars+0x1c>
 80052a6:	698a      	ldr	r2, [r1, #24]
 80052a8:	2a00      	cmp	r2, #0
 80052aa:	bf0c      	ite	eq
 80052ac:	2201      	moveq	r2, #1
 80052ae:	f04f 32ff 	movne.w	r2, #4294967295
 80052b2:	608a      	str	r2, [r1, #8]
 80052b4:	2700      	movs	r7, #0
 80052b6:	6822      	ldr	r2, [r4, #0]
 80052b8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005344 <_scanf_chars+0xac>
 80052bc:	06d1      	lsls	r1, r2, #27
 80052be:	bf5f      	itttt	pl
 80052c0:	681a      	ldrpl	r2, [r3, #0]
 80052c2:	1d11      	addpl	r1, r2, #4
 80052c4:	6019      	strpl	r1, [r3, #0]
 80052c6:	6816      	ldrpl	r6, [r2, #0]
 80052c8:	69a0      	ldr	r0, [r4, #24]
 80052ca:	b188      	cbz	r0, 80052f0 <_scanf_chars+0x58>
 80052cc:	2801      	cmp	r0, #1
 80052ce:	d107      	bne.n	80052e0 <_scanf_chars+0x48>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	781a      	ldrb	r2, [r3, #0]
 80052d4:	6963      	ldr	r3, [r4, #20]
 80052d6:	5c9b      	ldrb	r3, [r3, r2]
 80052d8:	b953      	cbnz	r3, 80052f0 <_scanf_chars+0x58>
 80052da:	bb27      	cbnz	r7, 8005326 <_scanf_chars+0x8e>
 80052dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e0:	2802      	cmp	r0, #2
 80052e2:	d120      	bne.n	8005326 <_scanf_chars+0x8e>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80052ec:	071b      	lsls	r3, r3, #28
 80052ee:	d41a      	bmi.n	8005326 <_scanf_chars+0x8e>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	3701      	adds	r7, #1
 80052f4:	06da      	lsls	r2, r3, #27
 80052f6:	bf5e      	ittt	pl
 80052f8:	682b      	ldrpl	r3, [r5, #0]
 80052fa:	781b      	ldrbpl	r3, [r3, #0]
 80052fc:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005300:	682a      	ldr	r2, [r5, #0]
 8005302:	686b      	ldr	r3, [r5, #4]
 8005304:	3201      	adds	r2, #1
 8005306:	602a      	str	r2, [r5, #0]
 8005308:	68a2      	ldr	r2, [r4, #8]
 800530a:	3b01      	subs	r3, #1
 800530c:	3a01      	subs	r2, #1
 800530e:	606b      	str	r3, [r5, #4]
 8005310:	60a2      	str	r2, [r4, #8]
 8005312:	b142      	cbz	r2, 8005326 <_scanf_chars+0x8e>
 8005314:	2b00      	cmp	r3, #0
 8005316:	dcd7      	bgt.n	80052c8 <_scanf_chars+0x30>
 8005318:	4629      	mov	r1, r5
 800531a:	4640      	mov	r0, r8
 800531c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005320:	4798      	blx	r3
 8005322:	2800      	cmp	r0, #0
 8005324:	d0d0      	beq.n	80052c8 <_scanf_chars+0x30>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	f013 0310 	ands.w	r3, r3, #16
 800532c:	d105      	bne.n	800533a <_scanf_chars+0xa2>
 800532e:	68e2      	ldr	r2, [r4, #12]
 8005330:	3201      	adds	r2, #1
 8005332:	60e2      	str	r2, [r4, #12]
 8005334:	69a2      	ldr	r2, [r4, #24]
 8005336:	b102      	cbz	r2, 800533a <_scanf_chars+0xa2>
 8005338:	7033      	strb	r3, [r6, #0]
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	2000      	movs	r0, #0
 800533e:	441f      	add	r7, r3
 8005340:	6127      	str	r7, [r4, #16]
 8005342:	e7cb      	b.n	80052dc <_scanf_chars+0x44>
 8005344:	08005d1f 	.word	0x08005d1f

08005348 <_scanf_i>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	460c      	mov	r4, r1
 800534e:	4698      	mov	r8, r3
 8005350:	4b72      	ldr	r3, [pc, #456]	; (800551c <_scanf_i+0x1d4>)
 8005352:	b087      	sub	sp, #28
 8005354:	4682      	mov	sl, r0
 8005356:	4616      	mov	r6, r2
 8005358:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800535c:	ab03      	add	r3, sp, #12
 800535e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005362:	4b6f      	ldr	r3, [pc, #444]	; (8005520 <_scanf_i+0x1d8>)
 8005364:	69a1      	ldr	r1, [r4, #24]
 8005366:	4a6f      	ldr	r2, [pc, #444]	; (8005524 <_scanf_i+0x1dc>)
 8005368:	4627      	mov	r7, r4
 800536a:	2903      	cmp	r1, #3
 800536c:	bf18      	it	ne
 800536e:	461a      	movne	r2, r3
 8005370:	68a3      	ldr	r3, [r4, #8]
 8005372:	9201      	str	r2, [sp, #4]
 8005374:	1e5a      	subs	r2, r3, #1
 8005376:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800537a:	bf81      	itttt	hi
 800537c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005380:	eb03 0905 	addhi.w	r9, r3, r5
 8005384:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005388:	60a3      	strhi	r3, [r4, #8]
 800538a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800538e:	bf98      	it	ls
 8005390:	f04f 0900 	movls.w	r9, #0
 8005394:	463d      	mov	r5, r7
 8005396:	f04f 0b00 	mov.w	fp, #0
 800539a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800539e:	6023      	str	r3, [r4, #0]
 80053a0:	6831      	ldr	r1, [r6, #0]
 80053a2:	ab03      	add	r3, sp, #12
 80053a4:	2202      	movs	r2, #2
 80053a6:	7809      	ldrb	r1, [r1, #0]
 80053a8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80053ac:	f000 fa38 	bl	8005820 <memchr>
 80053b0:	b328      	cbz	r0, 80053fe <_scanf_i+0xb6>
 80053b2:	f1bb 0f01 	cmp.w	fp, #1
 80053b6:	d159      	bne.n	800546c <_scanf_i+0x124>
 80053b8:	6862      	ldr	r2, [r4, #4]
 80053ba:	b92a      	cbnz	r2, 80053c8 <_scanf_i+0x80>
 80053bc:	2308      	movs	r3, #8
 80053be:	6822      	ldr	r2, [r4, #0]
 80053c0:	6063      	str	r3, [r4, #4]
 80053c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c6:	6022      	str	r2, [r4, #0]
 80053c8:	6822      	ldr	r2, [r4, #0]
 80053ca:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80053ce:	6022      	str	r2, [r4, #0]
 80053d0:	68a2      	ldr	r2, [r4, #8]
 80053d2:	1e51      	subs	r1, r2, #1
 80053d4:	60a1      	str	r1, [r4, #8]
 80053d6:	b192      	cbz	r2, 80053fe <_scanf_i+0xb6>
 80053d8:	6832      	ldr	r2, [r6, #0]
 80053da:	1c51      	adds	r1, r2, #1
 80053dc:	6031      	str	r1, [r6, #0]
 80053de:	7812      	ldrb	r2, [r2, #0]
 80053e0:	f805 2b01 	strb.w	r2, [r5], #1
 80053e4:	6872      	ldr	r2, [r6, #4]
 80053e6:	3a01      	subs	r2, #1
 80053e8:	2a00      	cmp	r2, #0
 80053ea:	6072      	str	r2, [r6, #4]
 80053ec:	dc07      	bgt.n	80053fe <_scanf_i+0xb6>
 80053ee:	4631      	mov	r1, r6
 80053f0:	4650      	mov	r0, sl
 80053f2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80053f6:	4790      	blx	r2
 80053f8:	2800      	cmp	r0, #0
 80053fa:	f040 8085 	bne.w	8005508 <_scanf_i+0x1c0>
 80053fe:	f10b 0b01 	add.w	fp, fp, #1
 8005402:	f1bb 0f03 	cmp.w	fp, #3
 8005406:	d1cb      	bne.n	80053a0 <_scanf_i+0x58>
 8005408:	6863      	ldr	r3, [r4, #4]
 800540a:	b90b      	cbnz	r3, 8005410 <_scanf_i+0xc8>
 800540c:	230a      	movs	r3, #10
 800540e:	6063      	str	r3, [r4, #4]
 8005410:	6863      	ldr	r3, [r4, #4]
 8005412:	4945      	ldr	r1, [pc, #276]	; (8005528 <_scanf_i+0x1e0>)
 8005414:	6960      	ldr	r0, [r4, #20]
 8005416:	1ac9      	subs	r1, r1, r3
 8005418:	f000 f888 	bl	800552c <__sccl>
 800541c:	f04f 0b00 	mov.w	fp, #0
 8005420:	68a3      	ldr	r3, [r4, #8]
 8005422:	6822      	ldr	r2, [r4, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d03d      	beq.n	80054a4 <_scanf_i+0x15c>
 8005428:	6831      	ldr	r1, [r6, #0]
 800542a:	6960      	ldr	r0, [r4, #20]
 800542c:	f891 c000 	ldrb.w	ip, [r1]
 8005430:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005434:	2800      	cmp	r0, #0
 8005436:	d035      	beq.n	80054a4 <_scanf_i+0x15c>
 8005438:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800543c:	d124      	bne.n	8005488 <_scanf_i+0x140>
 800543e:	0510      	lsls	r0, r2, #20
 8005440:	d522      	bpl.n	8005488 <_scanf_i+0x140>
 8005442:	f10b 0b01 	add.w	fp, fp, #1
 8005446:	f1b9 0f00 	cmp.w	r9, #0
 800544a:	d003      	beq.n	8005454 <_scanf_i+0x10c>
 800544c:	3301      	adds	r3, #1
 800544e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005452:	60a3      	str	r3, [r4, #8]
 8005454:	6873      	ldr	r3, [r6, #4]
 8005456:	3b01      	subs	r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	6073      	str	r3, [r6, #4]
 800545c:	dd1b      	ble.n	8005496 <_scanf_i+0x14e>
 800545e:	6833      	ldr	r3, [r6, #0]
 8005460:	3301      	adds	r3, #1
 8005462:	6033      	str	r3, [r6, #0]
 8005464:	68a3      	ldr	r3, [r4, #8]
 8005466:	3b01      	subs	r3, #1
 8005468:	60a3      	str	r3, [r4, #8]
 800546a:	e7d9      	b.n	8005420 <_scanf_i+0xd8>
 800546c:	f1bb 0f02 	cmp.w	fp, #2
 8005470:	d1ae      	bne.n	80053d0 <_scanf_i+0x88>
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005478:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800547c:	d1bf      	bne.n	80053fe <_scanf_i+0xb6>
 800547e:	2310      	movs	r3, #16
 8005480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005484:	6063      	str	r3, [r4, #4]
 8005486:	e7a2      	b.n	80053ce <_scanf_i+0x86>
 8005488:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800548c:	6022      	str	r2, [r4, #0]
 800548e:	780b      	ldrb	r3, [r1, #0]
 8005490:	f805 3b01 	strb.w	r3, [r5], #1
 8005494:	e7de      	b.n	8005454 <_scanf_i+0x10c>
 8005496:	4631      	mov	r1, r6
 8005498:	4650      	mov	r0, sl
 800549a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800549e:	4798      	blx	r3
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d0df      	beq.n	8005464 <_scanf_i+0x11c>
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	05d9      	lsls	r1, r3, #23
 80054a8:	d50d      	bpl.n	80054c6 <_scanf_i+0x17e>
 80054aa:	42bd      	cmp	r5, r7
 80054ac:	d909      	bls.n	80054c2 <_scanf_i+0x17a>
 80054ae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80054b2:	4632      	mov	r2, r6
 80054b4:	4650      	mov	r0, sl
 80054b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054ba:	f105 39ff 	add.w	r9, r5, #4294967295
 80054be:	4798      	blx	r3
 80054c0:	464d      	mov	r5, r9
 80054c2:	42bd      	cmp	r5, r7
 80054c4:	d028      	beq.n	8005518 <_scanf_i+0x1d0>
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	f012 0210 	ands.w	r2, r2, #16
 80054cc:	d113      	bne.n	80054f6 <_scanf_i+0x1ae>
 80054ce:	702a      	strb	r2, [r5, #0]
 80054d0:	4639      	mov	r1, r7
 80054d2:	6863      	ldr	r3, [r4, #4]
 80054d4:	4650      	mov	r0, sl
 80054d6:	9e01      	ldr	r6, [sp, #4]
 80054d8:	47b0      	blx	r6
 80054da:	f8d8 3000 	ldr.w	r3, [r8]
 80054de:	6821      	ldr	r1, [r4, #0]
 80054e0:	1d1a      	adds	r2, r3, #4
 80054e2:	f8c8 2000 	str.w	r2, [r8]
 80054e6:	f011 0f20 	tst.w	r1, #32
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	d00f      	beq.n	800550e <_scanf_i+0x1c6>
 80054ee:	6018      	str	r0, [r3, #0]
 80054f0:	68e3      	ldr	r3, [r4, #12]
 80054f2:	3301      	adds	r3, #1
 80054f4:	60e3      	str	r3, [r4, #12]
 80054f6:	2000      	movs	r0, #0
 80054f8:	1bed      	subs	r5, r5, r7
 80054fa:	44ab      	add	fp, r5
 80054fc:	6925      	ldr	r5, [r4, #16]
 80054fe:	445d      	add	r5, fp
 8005500:	6125      	str	r5, [r4, #16]
 8005502:	b007      	add	sp, #28
 8005504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005508:	f04f 0b00 	mov.w	fp, #0
 800550c:	e7ca      	b.n	80054a4 <_scanf_i+0x15c>
 800550e:	07ca      	lsls	r2, r1, #31
 8005510:	bf4c      	ite	mi
 8005512:	8018      	strhmi	r0, [r3, #0]
 8005514:	6018      	strpl	r0, [r3, #0]
 8005516:	e7eb      	b.n	80054f0 <_scanf_i+0x1a8>
 8005518:	2001      	movs	r0, #1
 800551a:	e7f2      	b.n	8005502 <_scanf_i+0x1ba>
 800551c:	08005c8c 	.word	0x08005c8c
 8005520:	080057a9 	.word	0x080057a9
 8005524:	080056ad 	.word	0x080056ad
 8005528:	08005d1c 	.word	0x08005d1c

0800552c <__sccl>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	780b      	ldrb	r3, [r1, #0]
 8005530:	4604      	mov	r4, r0
 8005532:	2b5e      	cmp	r3, #94	; 0x5e
 8005534:	bf13      	iteet	ne
 8005536:	2200      	movne	r2, #0
 8005538:	2201      	moveq	r2, #1
 800553a:	784b      	ldrbeq	r3, [r1, #1]
 800553c:	1c48      	addne	r0, r1, #1
 800553e:	bf08      	it	eq
 8005540:	1c88      	addeq	r0, r1, #2
 8005542:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005546:	1e61      	subs	r1, r4, #1
 8005548:	f801 2f01 	strb.w	r2, [r1, #1]!
 800554c:	42a9      	cmp	r1, r5
 800554e:	d1fb      	bne.n	8005548 <__sccl+0x1c>
 8005550:	b90b      	cbnz	r3, 8005556 <__sccl+0x2a>
 8005552:	3801      	subs	r0, #1
 8005554:	bd70      	pop	{r4, r5, r6, pc}
 8005556:	f082 0101 	eor.w	r1, r2, #1
 800555a:	54e1      	strb	r1, [r4, r3]
 800555c:	1c42      	adds	r2, r0, #1
 800555e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8005562:	4610      	mov	r0, r2
 8005564:	2d2d      	cmp	r5, #45	; 0x2d
 8005566:	f102 36ff 	add.w	r6, r2, #4294967295
 800556a:	d006      	beq.n	800557a <__sccl+0x4e>
 800556c:	2d5d      	cmp	r5, #93	; 0x5d
 800556e:	d0f1      	beq.n	8005554 <__sccl+0x28>
 8005570:	b90d      	cbnz	r5, 8005576 <__sccl+0x4a>
 8005572:	4630      	mov	r0, r6
 8005574:	e7ee      	b.n	8005554 <__sccl+0x28>
 8005576:	462b      	mov	r3, r5
 8005578:	e7ef      	b.n	800555a <__sccl+0x2e>
 800557a:	7816      	ldrb	r6, [r2, #0]
 800557c:	2e5d      	cmp	r6, #93	; 0x5d
 800557e:	d0fa      	beq.n	8005576 <__sccl+0x4a>
 8005580:	42b3      	cmp	r3, r6
 8005582:	dcf8      	bgt.n	8005576 <__sccl+0x4a>
 8005584:	4618      	mov	r0, r3
 8005586:	3001      	adds	r0, #1
 8005588:	4286      	cmp	r6, r0
 800558a:	5421      	strb	r1, [r4, r0]
 800558c:	dcfb      	bgt.n	8005586 <__sccl+0x5a>
 800558e:	43d8      	mvns	r0, r3
 8005590:	4430      	add	r0, r6
 8005592:	42b3      	cmp	r3, r6
 8005594:	bfa8      	it	ge
 8005596:	2000      	movge	r0, #0
 8005598:	1c5d      	adds	r5, r3, #1
 800559a:	182b      	adds	r3, r5, r0
 800559c:	3202      	adds	r2, #2
 800559e:	e7de      	b.n	800555e <__sccl+0x32>

080055a0 <_strtol_l.isra.0>:
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a6:	4686      	mov	lr, r0
 80055a8:	d001      	beq.n	80055ae <_strtol_l.isra.0+0xe>
 80055aa:	2b24      	cmp	r3, #36	; 0x24
 80055ac:	d906      	bls.n	80055bc <_strtol_l.isra.0+0x1c>
 80055ae:	f7ff f92f 	bl	8004810 <__errno>
 80055b2:	2316      	movs	r3, #22
 80055b4:	6003      	str	r3, [r0, #0]
 80055b6:	2000      	movs	r0, #0
 80055b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055bc:	468c      	mov	ip, r1
 80055be:	4e3a      	ldr	r6, [pc, #232]	; (80056a8 <_strtol_l.isra.0+0x108>)
 80055c0:	4660      	mov	r0, ip
 80055c2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80055c6:	5da5      	ldrb	r5, [r4, r6]
 80055c8:	f015 0508 	ands.w	r5, r5, #8
 80055cc:	d1f8      	bne.n	80055c0 <_strtol_l.isra.0+0x20>
 80055ce:	2c2d      	cmp	r4, #45	; 0x2d
 80055d0:	d133      	bne.n	800563a <_strtol_l.isra.0+0x9a>
 80055d2:	f04f 0801 	mov.w	r8, #1
 80055d6:	f89c 4000 	ldrb.w	r4, [ip]
 80055da:	f100 0c02 	add.w	ip, r0, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d05d      	beq.n	800569e <_strtol_l.isra.0+0xfe>
 80055e2:	2b10      	cmp	r3, #16
 80055e4:	d10c      	bne.n	8005600 <_strtol_l.isra.0+0x60>
 80055e6:	2c30      	cmp	r4, #48	; 0x30
 80055e8:	d10a      	bne.n	8005600 <_strtol_l.isra.0+0x60>
 80055ea:	f89c 0000 	ldrb.w	r0, [ip]
 80055ee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80055f2:	2858      	cmp	r0, #88	; 0x58
 80055f4:	d14e      	bne.n	8005694 <_strtol_l.isra.0+0xf4>
 80055f6:	2310      	movs	r3, #16
 80055f8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80055fc:	f10c 0c02 	add.w	ip, ip, #2
 8005600:	2500      	movs	r5, #0
 8005602:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8005606:	3f01      	subs	r7, #1
 8005608:	fbb7 f9f3 	udiv	r9, r7, r3
 800560c:	4628      	mov	r0, r5
 800560e:	fb03 7a19 	mls	sl, r3, r9, r7
 8005612:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005616:	2e09      	cmp	r6, #9
 8005618:	d818      	bhi.n	800564c <_strtol_l.isra.0+0xac>
 800561a:	4634      	mov	r4, r6
 800561c:	42a3      	cmp	r3, r4
 800561e:	dd24      	ble.n	800566a <_strtol_l.isra.0+0xca>
 8005620:	2d00      	cmp	r5, #0
 8005622:	db1f      	blt.n	8005664 <_strtol_l.isra.0+0xc4>
 8005624:	4581      	cmp	r9, r0
 8005626:	d31d      	bcc.n	8005664 <_strtol_l.isra.0+0xc4>
 8005628:	d101      	bne.n	800562e <_strtol_l.isra.0+0x8e>
 800562a:	45a2      	cmp	sl, r4
 800562c:	db1a      	blt.n	8005664 <_strtol_l.isra.0+0xc4>
 800562e:	2501      	movs	r5, #1
 8005630:	fb00 4003 	mla	r0, r0, r3, r4
 8005634:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005638:	e7eb      	b.n	8005612 <_strtol_l.isra.0+0x72>
 800563a:	2c2b      	cmp	r4, #43	; 0x2b
 800563c:	bf08      	it	eq
 800563e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005642:	46a8      	mov	r8, r5
 8005644:	bf08      	it	eq
 8005646:	f100 0c02 	addeq.w	ip, r0, #2
 800564a:	e7c8      	b.n	80055de <_strtol_l.isra.0+0x3e>
 800564c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005650:	2e19      	cmp	r6, #25
 8005652:	d801      	bhi.n	8005658 <_strtol_l.isra.0+0xb8>
 8005654:	3c37      	subs	r4, #55	; 0x37
 8005656:	e7e1      	b.n	800561c <_strtol_l.isra.0+0x7c>
 8005658:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800565c:	2e19      	cmp	r6, #25
 800565e:	d804      	bhi.n	800566a <_strtol_l.isra.0+0xca>
 8005660:	3c57      	subs	r4, #87	; 0x57
 8005662:	e7db      	b.n	800561c <_strtol_l.isra.0+0x7c>
 8005664:	f04f 35ff 	mov.w	r5, #4294967295
 8005668:	e7e4      	b.n	8005634 <_strtol_l.isra.0+0x94>
 800566a:	2d00      	cmp	r5, #0
 800566c:	da08      	bge.n	8005680 <_strtol_l.isra.0+0xe0>
 800566e:	2322      	movs	r3, #34	; 0x22
 8005670:	4638      	mov	r0, r7
 8005672:	f8ce 3000 	str.w	r3, [lr]
 8005676:	2a00      	cmp	r2, #0
 8005678:	d09e      	beq.n	80055b8 <_strtol_l.isra.0+0x18>
 800567a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800567e:	e007      	b.n	8005690 <_strtol_l.isra.0+0xf0>
 8005680:	f1b8 0f00 	cmp.w	r8, #0
 8005684:	d000      	beq.n	8005688 <_strtol_l.isra.0+0xe8>
 8005686:	4240      	negs	r0, r0
 8005688:	2a00      	cmp	r2, #0
 800568a:	d095      	beq.n	80055b8 <_strtol_l.isra.0+0x18>
 800568c:	2d00      	cmp	r5, #0
 800568e:	d1f4      	bne.n	800567a <_strtol_l.isra.0+0xda>
 8005690:	6011      	str	r1, [r2, #0]
 8005692:	e791      	b.n	80055b8 <_strtol_l.isra.0+0x18>
 8005694:	2430      	movs	r4, #48	; 0x30
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1b2      	bne.n	8005600 <_strtol_l.isra.0+0x60>
 800569a:	2308      	movs	r3, #8
 800569c:	e7b0      	b.n	8005600 <_strtol_l.isra.0+0x60>
 800569e:	2c30      	cmp	r4, #48	; 0x30
 80056a0:	d0a3      	beq.n	80055ea <_strtol_l.isra.0+0x4a>
 80056a2:	230a      	movs	r3, #10
 80056a4:	e7ac      	b.n	8005600 <_strtol_l.isra.0+0x60>
 80056a6:	bf00      	nop
 80056a8:	08005d1f 	.word	0x08005d1f

080056ac <_strtol_r>:
 80056ac:	f7ff bf78 	b.w	80055a0 <_strtol_l.isra.0>

080056b0 <_strtoul_l.isra.0>:
 80056b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056b4:	468c      	mov	ip, r1
 80056b6:	4686      	mov	lr, r0
 80056b8:	4e3a      	ldr	r6, [pc, #232]	; (80057a4 <_strtoul_l.isra.0+0xf4>)
 80056ba:	4660      	mov	r0, ip
 80056bc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80056c0:	5da5      	ldrb	r5, [r4, r6]
 80056c2:	f015 0508 	ands.w	r5, r5, #8
 80056c6:	d1f8      	bne.n	80056ba <_strtoul_l.isra.0+0xa>
 80056c8:	2c2d      	cmp	r4, #45	; 0x2d
 80056ca:	d134      	bne.n	8005736 <_strtoul_l.isra.0+0x86>
 80056cc:	f04f 0801 	mov.w	r8, #1
 80056d0:	f89c 4000 	ldrb.w	r4, [ip]
 80056d4:	f100 0c02 	add.w	ip, r0, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d05e      	beq.n	800579a <_strtoul_l.isra.0+0xea>
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d10c      	bne.n	80056fa <_strtoul_l.isra.0+0x4a>
 80056e0:	2c30      	cmp	r4, #48	; 0x30
 80056e2:	d10a      	bne.n	80056fa <_strtoul_l.isra.0+0x4a>
 80056e4:	f89c 0000 	ldrb.w	r0, [ip]
 80056e8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80056ec:	2858      	cmp	r0, #88	; 0x58
 80056ee:	d14f      	bne.n	8005790 <_strtoul_l.isra.0+0xe0>
 80056f0:	2310      	movs	r3, #16
 80056f2:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80056f6:	f10c 0c02 	add.w	ip, ip, #2
 80056fa:	f04f 37ff 	mov.w	r7, #4294967295
 80056fe:	fbb7 f7f3 	udiv	r7, r7, r3
 8005702:	2500      	movs	r5, #0
 8005704:	fb03 f907 	mul.w	r9, r3, r7
 8005708:	4628      	mov	r0, r5
 800570a:	ea6f 0909 	mvn.w	r9, r9
 800570e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005712:	2e09      	cmp	r6, #9
 8005714:	d818      	bhi.n	8005748 <_strtoul_l.isra.0+0x98>
 8005716:	4634      	mov	r4, r6
 8005718:	42a3      	cmp	r3, r4
 800571a:	dd24      	ble.n	8005766 <_strtoul_l.isra.0+0xb6>
 800571c:	2d00      	cmp	r5, #0
 800571e:	db1f      	blt.n	8005760 <_strtoul_l.isra.0+0xb0>
 8005720:	4287      	cmp	r7, r0
 8005722:	d31d      	bcc.n	8005760 <_strtoul_l.isra.0+0xb0>
 8005724:	d101      	bne.n	800572a <_strtoul_l.isra.0+0x7a>
 8005726:	45a1      	cmp	r9, r4
 8005728:	db1a      	blt.n	8005760 <_strtoul_l.isra.0+0xb0>
 800572a:	2501      	movs	r5, #1
 800572c:	fb00 4003 	mla	r0, r0, r3, r4
 8005730:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005734:	e7eb      	b.n	800570e <_strtoul_l.isra.0+0x5e>
 8005736:	2c2b      	cmp	r4, #43	; 0x2b
 8005738:	bf08      	it	eq
 800573a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800573e:	46a8      	mov	r8, r5
 8005740:	bf08      	it	eq
 8005742:	f100 0c02 	addeq.w	ip, r0, #2
 8005746:	e7c7      	b.n	80056d8 <_strtoul_l.isra.0+0x28>
 8005748:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800574c:	2e19      	cmp	r6, #25
 800574e:	d801      	bhi.n	8005754 <_strtoul_l.isra.0+0xa4>
 8005750:	3c37      	subs	r4, #55	; 0x37
 8005752:	e7e1      	b.n	8005718 <_strtoul_l.isra.0+0x68>
 8005754:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005758:	2e19      	cmp	r6, #25
 800575a:	d804      	bhi.n	8005766 <_strtoul_l.isra.0+0xb6>
 800575c:	3c57      	subs	r4, #87	; 0x57
 800575e:	e7db      	b.n	8005718 <_strtoul_l.isra.0+0x68>
 8005760:	f04f 35ff 	mov.w	r5, #4294967295
 8005764:	e7e4      	b.n	8005730 <_strtoul_l.isra.0+0x80>
 8005766:	2d00      	cmp	r5, #0
 8005768:	da07      	bge.n	800577a <_strtoul_l.isra.0+0xca>
 800576a:	2322      	movs	r3, #34	; 0x22
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	f8ce 3000 	str.w	r3, [lr]
 8005774:	b942      	cbnz	r2, 8005788 <_strtoul_l.isra.0+0xd8>
 8005776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800577a:	f1b8 0f00 	cmp.w	r8, #0
 800577e:	d000      	beq.n	8005782 <_strtoul_l.isra.0+0xd2>
 8005780:	4240      	negs	r0, r0
 8005782:	2a00      	cmp	r2, #0
 8005784:	d0f7      	beq.n	8005776 <_strtoul_l.isra.0+0xc6>
 8005786:	b10d      	cbz	r5, 800578c <_strtoul_l.isra.0+0xdc>
 8005788:	f10c 31ff 	add.w	r1, ip, #4294967295
 800578c:	6011      	str	r1, [r2, #0]
 800578e:	e7f2      	b.n	8005776 <_strtoul_l.isra.0+0xc6>
 8005790:	2430      	movs	r4, #48	; 0x30
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1b1      	bne.n	80056fa <_strtoul_l.isra.0+0x4a>
 8005796:	2308      	movs	r3, #8
 8005798:	e7af      	b.n	80056fa <_strtoul_l.isra.0+0x4a>
 800579a:	2c30      	cmp	r4, #48	; 0x30
 800579c:	d0a2      	beq.n	80056e4 <_strtoul_l.isra.0+0x34>
 800579e:	230a      	movs	r3, #10
 80057a0:	e7ab      	b.n	80056fa <_strtoul_l.isra.0+0x4a>
 80057a2:	bf00      	nop
 80057a4:	08005d1f 	.word	0x08005d1f

080057a8 <_strtoul_r>:
 80057a8:	f7ff bf82 	b.w	80056b0 <_strtoul_l.isra.0>

080057ac <__submore>:
 80057ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b0:	460c      	mov	r4, r1
 80057b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80057b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057b8:	4299      	cmp	r1, r3
 80057ba:	d11b      	bne.n	80057f4 <__submore+0x48>
 80057bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057c0:	f000 f8b0 	bl	8005924 <_malloc_r>
 80057c4:	b918      	cbnz	r0, 80057ce <__submore+0x22>
 80057c6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80057d4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80057d8:	6360      	str	r0, [r4, #52]	; 0x34
 80057da:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80057de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80057e2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80057e6:	7043      	strb	r3, [r0, #1]
 80057e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80057ec:	7003      	strb	r3, [r0, #0]
 80057ee:	6020      	str	r0, [r4, #0]
 80057f0:	2000      	movs	r0, #0
 80057f2:	e7ea      	b.n	80057ca <__submore+0x1e>
 80057f4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80057f6:	0077      	lsls	r7, r6, #1
 80057f8:	463a      	mov	r2, r7
 80057fa:	f000 f8ed 	bl	80059d8 <_realloc_r>
 80057fe:	4605      	mov	r5, r0
 8005800:	2800      	cmp	r0, #0
 8005802:	d0e0      	beq.n	80057c6 <__submore+0x1a>
 8005804:	eb00 0806 	add.w	r8, r0, r6
 8005808:	4601      	mov	r1, r0
 800580a:	4632      	mov	r2, r6
 800580c:	4640      	mov	r0, r8
 800580e:	f000 f815 	bl	800583c <memcpy>
 8005812:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005816:	f8c4 8000 	str.w	r8, [r4]
 800581a:	e7e9      	b.n	80057f0 <__submore+0x44>

0800581c <__retarget_lock_acquire_recursive>:
 800581c:	4770      	bx	lr

0800581e <__retarget_lock_release_recursive>:
 800581e:	4770      	bx	lr

08005820 <memchr>:
 8005820:	4603      	mov	r3, r0
 8005822:	b510      	push	{r4, lr}
 8005824:	b2c9      	uxtb	r1, r1
 8005826:	4402      	add	r2, r0
 8005828:	4293      	cmp	r3, r2
 800582a:	4618      	mov	r0, r3
 800582c:	d101      	bne.n	8005832 <memchr+0x12>
 800582e:	2000      	movs	r0, #0
 8005830:	e003      	b.n	800583a <memchr+0x1a>
 8005832:	7804      	ldrb	r4, [r0, #0]
 8005834:	3301      	adds	r3, #1
 8005836:	428c      	cmp	r4, r1
 8005838:	d1f6      	bne.n	8005828 <memchr+0x8>
 800583a:	bd10      	pop	{r4, pc}

0800583c <memcpy>:
 800583c:	440a      	add	r2, r1
 800583e:	4291      	cmp	r1, r2
 8005840:	f100 33ff 	add.w	r3, r0, #4294967295
 8005844:	d100      	bne.n	8005848 <memcpy+0xc>
 8005846:	4770      	bx	lr
 8005848:	b510      	push	{r4, lr}
 800584a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800584e:	4291      	cmp	r1, r2
 8005850:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005854:	d1f9      	bne.n	800584a <memcpy+0xe>
 8005856:	bd10      	pop	{r4, pc}

08005858 <memmove>:
 8005858:	4288      	cmp	r0, r1
 800585a:	b510      	push	{r4, lr}
 800585c:	eb01 0402 	add.w	r4, r1, r2
 8005860:	d902      	bls.n	8005868 <memmove+0x10>
 8005862:	4284      	cmp	r4, r0
 8005864:	4623      	mov	r3, r4
 8005866:	d807      	bhi.n	8005878 <memmove+0x20>
 8005868:	1e43      	subs	r3, r0, #1
 800586a:	42a1      	cmp	r1, r4
 800586c:	d008      	beq.n	8005880 <memmove+0x28>
 800586e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005872:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005876:	e7f8      	b.n	800586a <memmove+0x12>
 8005878:	4601      	mov	r1, r0
 800587a:	4402      	add	r2, r0
 800587c:	428a      	cmp	r2, r1
 800587e:	d100      	bne.n	8005882 <memmove+0x2a>
 8005880:	bd10      	pop	{r4, pc}
 8005882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800588a:	e7f7      	b.n	800587c <memmove+0x24>

0800588c <_free_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4605      	mov	r5, r0
 8005890:	2900      	cmp	r1, #0
 8005892:	d043      	beq.n	800591c <_free_r+0x90>
 8005894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005898:	1f0c      	subs	r4, r1, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	bfb8      	it	lt
 800589e:	18e4      	addlt	r4, r4, r3
 80058a0:	f000 f8d0 	bl	8005a44 <__malloc_lock>
 80058a4:	4a1e      	ldr	r2, [pc, #120]	; (8005920 <_free_r+0x94>)
 80058a6:	6813      	ldr	r3, [r2, #0]
 80058a8:	4610      	mov	r0, r2
 80058aa:	b933      	cbnz	r3, 80058ba <_free_r+0x2e>
 80058ac:	6063      	str	r3, [r4, #4]
 80058ae:	6014      	str	r4, [r2, #0]
 80058b0:	4628      	mov	r0, r5
 80058b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058b6:	f000 b8cb 	b.w	8005a50 <__malloc_unlock>
 80058ba:	42a3      	cmp	r3, r4
 80058bc:	d90a      	bls.n	80058d4 <_free_r+0x48>
 80058be:	6821      	ldr	r1, [r4, #0]
 80058c0:	1862      	adds	r2, r4, r1
 80058c2:	4293      	cmp	r3, r2
 80058c4:	bf01      	itttt	eq
 80058c6:	681a      	ldreq	r2, [r3, #0]
 80058c8:	685b      	ldreq	r3, [r3, #4]
 80058ca:	1852      	addeq	r2, r2, r1
 80058cc:	6022      	streq	r2, [r4, #0]
 80058ce:	6063      	str	r3, [r4, #4]
 80058d0:	6004      	str	r4, [r0, #0]
 80058d2:	e7ed      	b.n	80058b0 <_free_r+0x24>
 80058d4:	461a      	mov	r2, r3
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	b10b      	cbz	r3, 80058de <_free_r+0x52>
 80058da:	42a3      	cmp	r3, r4
 80058dc:	d9fa      	bls.n	80058d4 <_free_r+0x48>
 80058de:	6811      	ldr	r1, [r2, #0]
 80058e0:	1850      	adds	r0, r2, r1
 80058e2:	42a0      	cmp	r0, r4
 80058e4:	d10b      	bne.n	80058fe <_free_r+0x72>
 80058e6:	6820      	ldr	r0, [r4, #0]
 80058e8:	4401      	add	r1, r0
 80058ea:	1850      	adds	r0, r2, r1
 80058ec:	4283      	cmp	r3, r0
 80058ee:	6011      	str	r1, [r2, #0]
 80058f0:	d1de      	bne.n	80058b0 <_free_r+0x24>
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4401      	add	r1, r0
 80058f8:	6011      	str	r1, [r2, #0]
 80058fa:	6053      	str	r3, [r2, #4]
 80058fc:	e7d8      	b.n	80058b0 <_free_r+0x24>
 80058fe:	d902      	bls.n	8005906 <_free_r+0x7a>
 8005900:	230c      	movs	r3, #12
 8005902:	602b      	str	r3, [r5, #0]
 8005904:	e7d4      	b.n	80058b0 <_free_r+0x24>
 8005906:	6820      	ldr	r0, [r4, #0]
 8005908:	1821      	adds	r1, r4, r0
 800590a:	428b      	cmp	r3, r1
 800590c:	bf01      	itttt	eq
 800590e:	6819      	ldreq	r1, [r3, #0]
 8005910:	685b      	ldreq	r3, [r3, #4]
 8005912:	1809      	addeq	r1, r1, r0
 8005914:	6021      	streq	r1, [r4, #0]
 8005916:	6063      	str	r3, [r4, #4]
 8005918:	6054      	str	r4, [r2, #4]
 800591a:	e7c9      	b.n	80058b0 <_free_r+0x24>
 800591c:	bd38      	pop	{r3, r4, r5, pc}
 800591e:	bf00      	nop
 8005920:	20000090 	.word	0x20000090

08005924 <_malloc_r>:
 8005924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005926:	1ccd      	adds	r5, r1, #3
 8005928:	f025 0503 	bic.w	r5, r5, #3
 800592c:	3508      	adds	r5, #8
 800592e:	2d0c      	cmp	r5, #12
 8005930:	bf38      	it	cc
 8005932:	250c      	movcc	r5, #12
 8005934:	2d00      	cmp	r5, #0
 8005936:	4606      	mov	r6, r0
 8005938:	db01      	blt.n	800593e <_malloc_r+0x1a>
 800593a:	42a9      	cmp	r1, r5
 800593c:	d903      	bls.n	8005946 <_malloc_r+0x22>
 800593e:	230c      	movs	r3, #12
 8005940:	6033      	str	r3, [r6, #0]
 8005942:	2000      	movs	r0, #0
 8005944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005946:	f000 f87d 	bl	8005a44 <__malloc_lock>
 800594a:	4921      	ldr	r1, [pc, #132]	; (80059d0 <_malloc_r+0xac>)
 800594c:	680a      	ldr	r2, [r1, #0]
 800594e:	4614      	mov	r4, r2
 8005950:	b99c      	cbnz	r4, 800597a <_malloc_r+0x56>
 8005952:	4f20      	ldr	r7, [pc, #128]	; (80059d4 <_malloc_r+0xb0>)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	b923      	cbnz	r3, 8005962 <_malloc_r+0x3e>
 8005958:	4621      	mov	r1, r4
 800595a:	4630      	mov	r0, r6
 800595c:	f000 f862 	bl	8005a24 <_sbrk_r>
 8005960:	6038      	str	r0, [r7, #0]
 8005962:	4629      	mov	r1, r5
 8005964:	4630      	mov	r0, r6
 8005966:	f000 f85d 	bl	8005a24 <_sbrk_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	d123      	bne.n	80059b6 <_malloc_r+0x92>
 800596e:	230c      	movs	r3, #12
 8005970:	4630      	mov	r0, r6
 8005972:	6033      	str	r3, [r6, #0]
 8005974:	f000 f86c 	bl	8005a50 <__malloc_unlock>
 8005978:	e7e3      	b.n	8005942 <_malloc_r+0x1e>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	1b5b      	subs	r3, r3, r5
 800597e:	d417      	bmi.n	80059b0 <_malloc_r+0x8c>
 8005980:	2b0b      	cmp	r3, #11
 8005982:	d903      	bls.n	800598c <_malloc_r+0x68>
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	441c      	add	r4, r3
 8005988:	6025      	str	r5, [r4, #0]
 800598a:	e004      	b.n	8005996 <_malloc_r+0x72>
 800598c:	6863      	ldr	r3, [r4, #4]
 800598e:	42a2      	cmp	r2, r4
 8005990:	bf0c      	ite	eq
 8005992:	600b      	streq	r3, [r1, #0]
 8005994:	6053      	strne	r3, [r2, #4]
 8005996:	4630      	mov	r0, r6
 8005998:	f000 f85a 	bl	8005a50 <__malloc_unlock>
 800599c:	f104 000b 	add.w	r0, r4, #11
 80059a0:	1d23      	adds	r3, r4, #4
 80059a2:	f020 0007 	bic.w	r0, r0, #7
 80059a6:	1ac2      	subs	r2, r0, r3
 80059a8:	d0cc      	beq.n	8005944 <_malloc_r+0x20>
 80059aa:	1a1b      	subs	r3, r3, r0
 80059ac:	50a3      	str	r3, [r4, r2]
 80059ae:	e7c9      	b.n	8005944 <_malloc_r+0x20>
 80059b0:	4622      	mov	r2, r4
 80059b2:	6864      	ldr	r4, [r4, #4]
 80059b4:	e7cc      	b.n	8005950 <_malloc_r+0x2c>
 80059b6:	1cc4      	adds	r4, r0, #3
 80059b8:	f024 0403 	bic.w	r4, r4, #3
 80059bc:	42a0      	cmp	r0, r4
 80059be:	d0e3      	beq.n	8005988 <_malloc_r+0x64>
 80059c0:	1a21      	subs	r1, r4, r0
 80059c2:	4630      	mov	r0, r6
 80059c4:	f000 f82e 	bl	8005a24 <_sbrk_r>
 80059c8:	3001      	adds	r0, #1
 80059ca:	d1dd      	bne.n	8005988 <_malloc_r+0x64>
 80059cc:	e7cf      	b.n	800596e <_malloc_r+0x4a>
 80059ce:	bf00      	nop
 80059d0:	20000090 	.word	0x20000090
 80059d4:	20000094 	.word	0x20000094

080059d8 <_realloc_r>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	4607      	mov	r7, r0
 80059dc:	4614      	mov	r4, r2
 80059de:	460e      	mov	r6, r1
 80059e0:	b921      	cbnz	r1, 80059ec <_realloc_r+0x14>
 80059e2:	4611      	mov	r1, r2
 80059e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059e8:	f7ff bf9c 	b.w	8005924 <_malloc_r>
 80059ec:	b922      	cbnz	r2, 80059f8 <_realloc_r+0x20>
 80059ee:	f7ff ff4d 	bl	800588c <_free_r>
 80059f2:	4625      	mov	r5, r4
 80059f4:	4628      	mov	r0, r5
 80059f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f8:	f000 f830 	bl	8005a5c <_malloc_usable_size_r>
 80059fc:	42a0      	cmp	r0, r4
 80059fe:	d20f      	bcs.n	8005a20 <_realloc_r+0x48>
 8005a00:	4621      	mov	r1, r4
 8005a02:	4638      	mov	r0, r7
 8005a04:	f7ff ff8e 	bl	8005924 <_malloc_r>
 8005a08:	4605      	mov	r5, r0
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d0f2      	beq.n	80059f4 <_realloc_r+0x1c>
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4622      	mov	r2, r4
 8005a12:	f7ff ff13 	bl	800583c <memcpy>
 8005a16:	4631      	mov	r1, r6
 8005a18:	4638      	mov	r0, r7
 8005a1a:	f7ff ff37 	bl	800588c <_free_r>
 8005a1e:	e7e9      	b.n	80059f4 <_realloc_r+0x1c>
 8005a20:	4635      	mov	r5, r6
 8005a22:	e7e7      	b.n	80059f4 <_realloc_r+0x1c>

08005a24 <_sbrk_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	2300      	movs	r3, #0
 8005a28:	4d05      	ldr	r5, [pc, #20]	; (8005a40 <_sbrk_r+0x1c>)
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	4608      	mov	r0, r1
 8005a2e:	602b      	str	r3, [r5, #0]
 8005a30:	f7fc fab6 	bl	8001fa0 <_sbrk>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d102      	bne.n	8005a3e <_sbrk_r+0x1a>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	b103      	cbz	r3, 8005a3e <_sbrk_r+0x1a>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
 8005a40:	2000022c 	.word	0x2000022c

08005a44 <__malloc_lock>:
 8005a44:	4801      	ldr	r0, [pc, #4]	; (8005a4c <__malloc_lock+0x8>)
 8005a46:	f7ff bee9 	b.w	800581c <__retarget_lock_acquire_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	20000234 	.word	0x20000234

08005a50 <__malloc_unlock>:
 8005a50:	4801      	ldr	r0, [pc, #4]	; (8005a58 <__malloc_unlock+0x8>)
 8005a52:	f7ff bee4 	b.w	800581e <__retarget_lock_release_recursive>
 8005a56:	bf00      	nop
 8005a58:	20000234 	.word	0x20000234

08005a5c <_malloc_usable_size_r>:
 8005a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a60:	1f18      	subs	r0, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	bfbc      	itt	lt
 8005a66:	580b      	ldrlt	r3, [r1, r0]
 8005a68:	18c0      	addlt	r0, r0, r3
 8005a6a:	4770      	bx	lr

08005a6c <_init>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	bf00      	nop
 8005a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a72:	bc08      	pop	{r3}
 8005a74:	469e      	mov	lr, r3
 8005a76:	4770      	bx	lr

08005a78 <_fini>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	bf00      	nop
 8005a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7e:	bc08      	pop	{r3}
 8005a80:	469e      	mov	lr, r3
 8005a82:	4770      	bx	lr
